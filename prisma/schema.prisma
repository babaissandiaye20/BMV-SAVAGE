generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  firstName       String
  lastName        String
  phone           String         @unique
  password        String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deletedAt       DateTime?
  codeOtp         String?
  isPhoneVerified Boolean        @default(false)
  appointments    Appointment[]
  documents       Document[]
  messages        Message[]
  payments        Payment[]
  RefreshToken    RefreshToken[]
  PaymentGroup    PaymentGroup[]
}

model Document {
  id         String       @id @default(uuid())
  userId     String
  type       DocumentType
  fileUrl    String
  uploadedAt DateTime     @default(now())
  deletedAt  DateTime?
  user       User         @relation(fields: [userId], references: [id])
}

model Appointment {
  id            String            @id @default(uuid())
  userId        String
  scheduledAt   String?
  location      String?
  status        AppointmentStatus
  createdAt     DateTime          @default(now())
  deletedAt     String?
  titleNumber   String
  vehicleType   String
  vin           String
  receiptNumber String?
  issuesDate    String?
  user          User              @relation(fields: [userId], references: [id])
  payments      Payment[]
}

model PaymentGroup {
  id            String        @id @default(uuid())
  userId        String
  transactionId String        @unique // ID de la transaction globale (ex. Stripe)
  status        PaymentStatus
  totalAmount   Decimal       @db.Decimal(10, 2)
  createdAt     DateTime      @default(now())
  deletedAt     DateTime?
  user          User          @relation(fields: [userId], references: [id])
  payments      Payment[] // Relation avec les paiements individuels
}

model Payment {
  id             String        @id @default(uuid())
  userId         String
  appointmentId  String
  paymentModeId  String
  status         PaymentStatus
  transactionId  String?
  amount         Decimal       @db.Decimal(10, 2)
  createdAt      DateTime      @default(now())
  deletedAt      DateTime?
  appointment    Appointment   @relation(fields: [appointmentId], references: [id])
  paymentMode    PaymentMode   @relation(fields: [paymentModeId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  PaymentGroup   PaymentGroup? @relation(fields: [paymentGroupId], references: [id])
  paymentGroupId String?
}

model PaymentMode {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  payments  Payment[]
}

model Message {
  id        String    @id @default(uuid())
  userId    String
  content   String
  isAdmin   Boolean
  sentAt    DateTime  @default(now())
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}

enum DocumentType {
  LICENSE
  TITLE
  RECEIPT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum PaymentStatus {
  INITIATED
  PAID
  FAILED
}
