var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.603,1,2.981]],["body/controllers/AppController.html",[0,2.785,1,5.179,2,2.41,3,0.155,4,0.136,5,0.117,6,5.184,7,0.406,8,1.351,9,6.901,10,1.829,11,0.013,12,0.6,13,5.934,14,1.164,15,0.72,16,0.305,17,0.681,18,4.853,19,5.184,20,0.155,21,0.101,22,2.6,23,1.556,24,1.203,25,5.934,26,0.01,27,0.01]],["title/modules/AppModule.html",[28,1.108,29,2.777]],["body/modules/AppModule.html",[1,3.955,2,1.848,3,0.08,4,0.07,5,0.06,11,0.013,16,0.357,17,0.351,18,4.294,19,2.672,20,0.08,21,0.052,26,0.007,27,0.007,28,1.471,29,5.811,30,1.198,31,1.198,32,1.34,33,1.34,34,1.242,35,2.291,36,1.34,37,2.672,38,2.672,39,2.672,40,4.294,41,4.294,42,4.294,43,4.573,44,4.294,45,3.341,46,3.868,47,3.846,48,4.055,49,4.055,50,4.294,51,4.055,52,3.846,53,4.055,54,4.573,55,4.055,56,2.375,57,3.073,58,2.22,59,4.294,60,4.055,61,4.055,62,4.294,63,1.993,64,1.198,65,1.34,66,3.059,67,3.685,68,3.685,69,2.58,70,3.312,71,3.432,72,1.585,73,3.059,74,1.34,75,1.948,76,1.745,77,3.059,78,2.417,79,3.059,80,1.948,81,2.227,82,2.227,83,2.417,84,3.059,85,3.059,86,3.059,87,1.289,88,3.059,89,2.672,90,3.059,91,3.059,92,2.417,93,3.059,94,2.206,95,3.685,96,2.417,97,2.672,98,3.059,99,2.672,100,3.059,101,3.059,102,3.059,103,3.059,104,3.059,105,3.059,106,3.059,107,3.059,108,2.417,109,3.059,110,3.059,111,3.059,112,1.452,113,3.059,114,1.948,115,2.672,116,0.233,117,2.672,118,1.84,119,3.059]],["title/injectables/AppService.html",[18,2.608,120,0.362]],["body/injectables/AppService.html",[3,0.159,4,0.14,5,0.12,7,0.417,8,1.373,9,6.966,11,0.012,12,0.618,14,1.197,15,0.732,16,0.262,17,0.7,18,4.608,20,0.159,21,0.104,24,1.237,26,0.011,27,0.011,120,0.639,121,1.55,122,5.332,123,6.104,124,6.104,125,6.104]],["title/controllers/AppointmentController.html",[0,1.603,68,2.777]],["body/controllers/AppointmentController.html",[0,1.05,2,1.089,3,0.07,4,0.061,5,0.053,7,0.183,8,0.782,10,2.123,11,0.013,12,0.697,14,1.352,15,0.507,16,0.303,17,0.308,20,0.07,21,0.046,22,1.175,23,0.703,24,1.545,26,0.006,27,0.006,51,3.016,68,2.794,94,1.089,116,0.509,126,2.342,127,1.53,128,4.872,129,4.916,130,3.044,131,3.598,132,3.21,133,3.598,134,2.35,135,4.12,136,2.884,137,2.682,138,5.251,139,2.682,140,5.629,141,4.042,142,2.432,143,3.598,144,5.629,145,3.855,146,3.321,147,2.682,148,1.353,149,1.267,150,1.186,151,4.388,152,2.682,153,4.348,154,1.952,155,1.853,156,3.21,157,3.21,158,3.385,159,4.916,160,3.584,161,2.682,162,2.682,163,4.348,164,2.682,165,2.682,166,2.682,167,1.819,168,2.342,169,4.977,170,2.682,171,2.682,172,3.584,173,2.342,174,2.352,175,3.402,176,2.682,177,2.342,178,1.952,179,2.682,180,2.682,181,4.12,182,2.682,183,4.447,184,3.817,185,3.817,186,4.12,187,2.682,188,1.829,189,2.342,190,4.673,191,2.682,192,2.623,193,2.682,194,2.236,195,2.35,196,2.35,197,2.682,198,4.249,199,4.584,200,1.613,201,1.819,202,0.75,203,2.342,204,2.236,205,4.382,206,2.999,207,3.255,208,3.255,209,1.53,210,2.623,211,1.819,212,2.682,213,1.819,214,1.175,215,2.682,216,4.144,217,3.437,218,3.21,219,2.119,220,2.682,221,2.682,222,2.682,223,2.682,224,2.682,225,1.819,226,1.358,227,2.119,228,2.682,229,2.342,230,2.682,231,2.682,232,2.682,233,2.682,234,2.682,235,2.682,236,2.682,237,2.682,238,2.682]],["title/modules/AppointmentModule.html",[28,1.108,40,2.608]],["body/modules/AppointmentModule.html",[2,2.686,3,0.138,4,0.121,5,0.104,11,0.013,16,0.335,17,0.604,20,0.138,21,0.09,26,0.01,27,0.01,28,1.957,30,2.063,31,2.063,32,2.308,33,2.308,34,2.139,35,3.047,36,3.167,40,5.324,45,3.949,51,5.052,58,2.624,63,2.897,64,2.063,65,2.308,68,4.903,69,3.14,75,3.355,87,2.221,203,4.602,239,4.602,240,4.602,241,5.269,242,5.269,243,5.269,244,5.269]],["title/injectables/AppointmentService.html",[51,2.462,120,0.362]],["body/injectables/AppointmentService.html",[3,0.064,4,0.056,5,0.049,7,0.168,8,0.732,11,0.013,12,0.697,14,1.314,15,0.765,16,0.287,17,0.282,20,0.064,21,0.042,23,1.011,24,1.358,26,0.006,27,0.006,51,2.319,56,1.894,58,2.131,74,1.079,87,1.038,112,2.94,116,0.51,120,0.341,121,0.625,128,4.593,129,3.368,130,2.553,131,3.368,132,3.067,133,3.368,134,2.199,136,2.256,143,2.151,146,1.997,148,1.358,149,1.272,150,1.19,153,3.647,157,2.199,163,3.647,169,4.671,174,2.529,183,3.755,184,1.67,185,3.959,188,2.258,190,4.543,192,1.568,204,2.093,205,4.151,206,3.459,209,1.404,217,2.822,218,1.404,226,1.752,245,2.151,246,2.469,247,3.856,248,1.113,249,1.404,250,2.462,251,1.757,252,3.856,253,2.462,254,3.319,255,3.047,256,2.462,257,2.628,258,3.856,259,2.462,260,2.462,261,3.856,262,2.462,263,2.455,264,2.462,265,3.856,266,2.462,267,2.455,268,2.462,269,1.946,270,1.276,271,2.615,272,1.313,273,3.755,274,3.755,275,1.71,276,2.248,277,3.856,278,2.462,279,2.807,280,3.856,281,2.807,282,3.856,283,2.807,284,3.856,285,2.807,286,3.856,287,2.807,288,3.856,289,2.807,290,3.856,291,1.946,292,2.462,293,4.151,294,3.368,295,4.151,296,2.919,297,2.451,298,4.249,299,3.959,300,3.424,301,3.856,302,1.313,303,1.313,304,1.313,305,1.313,306,1.313,307,2.807,308,2.183,309,1.625,310,3.856,311,3.856,312,2.462,313,2.462,314,2.455,315,1.689,316,3.856,317,3.856,318,2.462,319,1.481,320,1.946,321,3.856,322,2.151,323,1.67,324,3.856,325,1.792,326,1.946,327,1.91,328,2.462,329,2.462,330,2.151,331,3.047,332,2.462,333,1.481,334,2.151,335,1.67,336,2.462,337,1.67,338,2.462,339,1.122,340,2.462,341,1.792,342,1.276,343,1.792,344,1.946,345,1.22,346,2.151,347,2.462,348,2.462,349,1.568,350,2.462]],["title/controllers/AuthController.html",[0,1.603,351,2.981]],["body/controllers/AuthController.html",[0,1.345,2,1.395,3,0.09,4,0.079,5,0.068,7,0.235,8,0.94,10,2.078,11,0.013,12,0.682,14,1.323,15,0.643,16,0.31,17,0.394,20,0.09,21,0.058,22,1.505,23,0.9,24,1.367,26,0.007,27,0.007,64,1.345,116,0.552,127,1.959,141,3.813,142,2.095,148,1.367,149,1.28,150,1.198,194,3.154,196,1.959,198,4.225,199,3.825,200,2.066,202,0.96,210,4.294,211,2.329,214,2.545,216,4.055,217,2.648,275,0.818,327,3.151,351,3.606,352,3,353,2.714,354,3.914,355,4.327,356,3.606,357,4.327,358,4.327,359,3.435,360,5.113,361,3.435,362,5.556,363,3.435,364,3.606,365,3.435,366,3.435,367,3.435,368,4.327,369,2.963,370,3.606,371,3.435,372,4.954,373,3.435,374,3.914,375,3.435,376,4.954,377,5.025,378,2.979,379,3.435,380,3.435,381,4.63,382,3.435,383,3.435,384,4.954,385,3.639,386,4.954,387,6.136,388,3.435,389,4.954,390,4.225,391,4.05,392,3.435,393,4.313,394,3.435,395,4.63,396,3.435,397,3.435,398,4.954,399,3.452,400,5.89,401,3.435,402,4.954,403,3.435,404,3,405,3.7,406,3,407,3.435,408,3.435,409,3.435,410,3.435,411,3.435,412,3.435,413,3.435,414,3.435,415,3.435,416,3.435,417,3.435,418,3.435,419,3.435,420,3.435,421,3.435,422,3.435,423,3.435,424,3.435,425,2.714,426,3.435,427,3.435,428,3.435,429,3.435,430,3.435,431,2.5,432,3.435,433,3.435,434,3,435,3.435]],["title/modules/AuthModule.html",[28,1.108,41,2.608]],["body/modules/AuthModule.html",[2,2.265,3,0.106,4,0.093,5,0.08,11,0.013,16,0.351,17,0.466,20,0.106,21,0.069,26,0.008,27,0.008,28,1.723,30,1.591,31,1.591,32,1.781,33,1.781,34,1.651,35,2.684,36,2.789,41,5.354,45,3.675,47,4.23,49,4.46,58,2.442,63,2.443,64,1.591,65,1.781,69,3.023,70,4.634,71,3.631,72,2.106,75,2.589,87,1.714,89,3.551,92,3.212,114,2.589,115,3.551,351,4.634,356,2.959,378,3.354,405,5.148,406,3.551,436,3.551,437,4.065,438,3.551,439,3.551,440,4.026,441,5.03,442,4.723,443,5.577,444,5.577,445,2.959,446,4.065,447,2.589,448,2.589,449,4.06,450,2.959,451,4.065,452,4.06,453,3.212,454,4.065,455,5.577,456,2.959,457,4.065,458,2.445,459,4.065,460,3.551,461,4.065,462,4.065,463,4.065,464,4.065,465,3.212,466,3.212,467,3.551,468,3.212,469,3.212]],["title/injectables/AuthService.html",[120,0.362,405,2.608]],["body/injectables/AuthService.html",[3,0.059,4,0.052,5,0.045,7,0.155,8,0.687,11,0.013,12,0.659,14,1.231,15,0.826,16,0.288,17,0.261,20,0.059,21,0.039,23,1.645,24,1.272,26,0.005,27,0.005,56,1.812,58,2.066,64,1.418,71,2.934,72,1.178,74,0.996,87,0.959,114,1.448,116,0.496,120,0.32,121,0.577,136,1.08,145,2.178,146,1.876,148,1.321,149,1.237,150,1.157,155,2.266,158,2.178,174,2.475,188,1.321,214,2.854,218,1.297,226,0.98,246,2.404,248,1.045,249,1.297,251,1.65,254,2.965,257,0.923,271,2.456,272,2.343,275,1.752,276,2.337,296,2.449,297,2.345,299,3.06,302,2.218,303,2.218,304,2.218,305,2.218,306,2.218,308,2.646,318,3.251,319,1.368,320,3.565,327,3.543,331,2.861,333,1.368,339,1.036,346,1.986,354,2.861,355,3.163,356,3.284,357,3.163,358,3.163,362,1.986,364,2.636,368,1.986,385,3.251,405,2.306,425,4.065,440,2.793,442,3.997,445,1.655,447,1.448,448,1.448,449,2.636,450,1.655,458,2.713,470,1.986,471,3.621,472,3.621,473,6.277,474,3.565,475,3.941,476,2.793,477,2.274,478,3.621,479,2.274,480,1.368,481,3.621,482,2.274,483,3.621,484,2.274,485,3.621,486,2.274,487,3.621,488,2.274,489,3.621,490,3.941,491,2.274,492,3.621,493,2.274,494,1.655,495,2.274,496,3.621,497,5.227,498,1.448,499,1.986,500,1.986,501,2.654,502,2.853,503,1.966,504,2.783,505,2.667,506,2.274,507,2.274,508,2.274,509,2.274,510,1.797,511,2.274,512,2.274,513,2.274,514,2.274,515,2.274,516,3.621,517,1.986,518,2.274,519,1.655,520,2.142,521,4.512,522,2.274,523,1.986,524,1.542,525,2.274,526,2.274,527,2.636,528,2.274,529,2.274,530,2.274,531,2.861,532,3.163,533,2.274,534,2.274,535,2.274,536,2.274,537,2.274,538,1.797,539,2.274,540,2.274,541,2.274,542,2.274,543,1.986,544,3.163,545,1.542,546,2.636,547,2.636,548,3.163,549,1.986,550,1.448,551,1.797,552,1.448,553,1.986,554,1.986,555,1.655,556,1.797,557,1.655,558,1.986,559,1.178,560,2.274,561,1.986]],["title/interfaces/AuthenticatedRequest.html",[562,1.493,563,2.981]],["body/interfaces/AuthenticatedRequest.html",[0,1.295,3,0.086,4,0.076,5,0.123,7,0.226,11,0.013,15,0.757,16,0.321,17,0.379,20,0.086,21,0.056,22,1.45,23,0.867,24,1.347,26,0.007,27,0.007,52,3.244,116,0.604,136,1.571,141,3.393,142,2.231,145,3.421,151,3.622,156,1.887,158,1.99,160,3.98,174,2.202,188,1.758,194,3.606,195,2.75,196,1.887,198,4.17,199,4.571,200,1.99,201,2.244,202,0.925,204,1.796,207,2.615,208,2.615,209,1.887,213,2.244,214,1.45,216,3.995,217,3.41,225,2.244,226,1.305,227,2.615,257,1.344,275,1.148,296,1.796,297,2.198,318,1.714,327,1.64,335,2.244,337,2.244,339,1.508,341,2.409,353,2.615,369,1.821,370,2.409,374,3.81,377,4.495,390,1.99,391,2.107,399,1.796,524,2.244,562,1.758,563,4.549,564,1.796,565,2.615,566,2.617,567,1.271,568,2.409,569,3.07,570,4.212,571,2.89,572,4.549,573,2.615,574,2.89,575,2.615,576,3.51,577,4.141,578,2.89,579,3.27,580,4.212,581,3.858,582,4.239,583,4.035,584,4.416,585,2.615,586,2.615,587,2.615,588,2.89,589,2.89,590,2.89,591,2.89,592,2.89,593,2.492,594,2.89,595,2.89,596,2.89,597,2.244,598,2.89,599,2.89,600,2.89,601,2.89,602,2.89,603,2.615,604,2.89,605,2.107,606,2.409,607,2.89,608,2.89,609,2.75,610,2.244,611,2.409,612,1.99,613,4.212,614,2.89,615,4.212,616,2.89,617,2.409,618,3.27,619,2.409,620,2.409,621,2.615,622,2.409,623,2.89,624,2.89,625,2.615,626,2.409,627,4.939,628,3.622,629,2.89,630,2.409,631,2.89,632,3.81,633,2.89,634,2.615,635,2.89,636,2.409,637,2.615,638,2.107,639,2.107,640,2.89,641,2.89]],["title/injectables/BlacklistTokenService.html",[120,0.362,440,2.223]],["body/injectables/BlacklistTokenService.html",[3,0.126,4,0.11,5,0.095,7,0.33,8,1.187,11,0.013,12,0.702,14,1.227,15,0.788,16,0.297,17,0.553,20,0.126,21,0.082,23,1.265,24,0.978,26,0.009,27,0.009,56,2.585,58,2.611,74,2.114,87,2.034,116,0.528,120,0.552,121,1.225,148,1.406,149,1.317,150,1.232,214,3.215,246,2.4,248,1.805,249,2.752,251,2.85,257,1.959,272,2.129,275,1.149,276,1.927,440,3.394,447,3.982,448,4.674,480,2.772,517,4.215,519,4.551,593,3.039,642,6.411,643,3.812,644,5.462,645,4.825,646,6.253,647,5.799,648,4.825,649,6.253,650,4.825,651,4.825]],["title/interfaces/CacheEvictOptions.html",[562,1.493,652,2.777]],["body/interfaces/CacheEvictOptions.html",[3,0.154,4,0.135,5,0.116,7,0.403,11,0.013,15,0.797,16,0.252,17,0.675,20,0.198,26,0.01,27,0.01,116,0.449,151,3.751,275,1.687,562,2.148,564,3.197,567,1.582,652,5.151,653,4.654,654,4.654,655,5.019,656,5.145,657,4.287,658,5.145,659,4.654,660,4.51,661,5.145]],["title/injectables/CacheInterceptor.html",[120,0.362,662,3.236]],["body/injectables/CacheInterceptor.html",[3,0.097,4,0.085,5,0.073,7,0.255,8,0.997,11,0.013,12,0.531,14,0.732,16,0.324,17,0.428,20,0.097,21,0.063,23,1.377,24,1.411,26,0.008,27,0.008,57,3.381,76,2.127,116,0.4,120,0.464,121,0.947,127,3.468,148,1.065,149,0.997,150,0.933,151,2.375,160,2.375,248,1.517,272,1.789,275,1.879,276,1.149,297,1.7,302,2.248,303,2.248,304,2.526,305,2.248,306,2.248,345,1.848,456,2.715,501,2.628,502,2.469,504,1.848,505,1.771,520,1.771,523,4.588,552,3.345,559,1.932,652,2.529,655,4.204,657,3.824,662,4.151,663,3.258,664,5.253,665,3.729,666,6.306,667,3.729,668,5.253,669,5.216,670,6.602,671,3.729,672,2.947,673,6.081,674,5.253,675,3.258,676,3.729,677,3.729,678,3.729,679,2.947,680,5.253,681,3.729,682,3.824,683,2.529,684,3.729,685,3.729,686,1.848,687,6.081,688,3.258,689,3.824,690,3.258,691,3.729,692,3.345,693,5.253,694,6.081,695,2.947,696,3.729,697,2.996,698,5.253,699,3.345,700,3.729,701,5.253,702,5.253,703,5.253,704,5.253,705,3.729,706,3.729,707,2.529,708,5.253,709,3.729,710,3.729,711,3.729,712,2.947,713,3.729,714,3.729,715,3.729,716,3.729,717,3.729,718,3.729,719,3.729]],["title/modules/CacheModule.html",[28,1.108,720,2.981]],["body/modules/CacheModule.html",[3,0.145,4,0.127,5,0.109,11,0.012,16,0.317,17,0.636,20,0.145,21,0.094,26,0.01,27,0.01,28,2.002,30,2.17,31,2.17,32,2.428,33,2.428,34,2.25,35,3.118,36,3.24,46,4.854,63,2.99,64,2.17,65,2.428,69,3.241,720,6.059,721,4.841,722,5.542,723,4.841,724,4.841,725,5.735,726,5.542,727,5.542,728,5.542]],["title/injectables/CacheService.html",[120,0.362,725,2.777]],["body/injectables/CacheService.html",[3,0.089,4,0.078,5,0.067,7,0.234,8,0.937,11,0.013,12,0.642,14,1.376,15,0.763,16,0.212,17,0.392,20,0.089,21,0.058,22,1.498,23,0.896,24,1.175,26,0.007,27,0.01,57,3.197,76,1.95,80,2.178,116,0.513,120,0.436,121,0.868,142,1.729,146,2.558,148,1.364,149,1.205,150,1.127,174,1.74,195,3.839,246,2.36,248,0.987,275,1.512,276,2.161,297,1.559,322,4.313,323,3.349,345,2.872,480,2.732,552,3.145,569,2.178,655,5.037,692,2.178,699,4.287,707,5.316,712,3.902,725,3.349,729,2.987,730,5.796,731,5.544,732,4.938,733,3.42,734,3.42,735,3.42,736,6.317,737,2.178,738,5.88,739,2.447,740,3.42,741,2.319,742,4.938,743,3.636,744,4.938,745,4.938,746,4.313,747,4.938,748,3.902,749,3.145,750,4.938,751,4.938,752,3.42,753,6.347,754,4.938,755,4.938,756,3.42,757,6.317,758,7.404,759,4.938,760,4.938,761,5.796,762,3.42,763,3.42,764,4.938,765,4.938,766,2.987,767,3.42,768,5.063,769,3.42,770,3.42,771,3.42,772,3.42,773,2.319,774,2.987,775,3.42,776,3.42,777,1.205,778,3.42,779,3.42,780,2.489,781,2.987,782,2.987,783,3.42,784,2.489]],["title/interfaces/CacheableOptions.html",[562,1.493,683,2.777]],["body/interfaces/CacheableOptions.html",[3,0.151,4,0.132,5,0.114,7,0.395,11,0.013,15,0.792,16,0.247,17,0.662,20,0.197,26,0.01,27,0.01,116,0.533,151,3.677,275,1.667,562,2.106,564,3.134,567,1.563,655,4.985,656,5.043,660,4.457,682,4.203,683,5.107,692,3.677,739,3.731,785,4.562,786,7.828,787,5.043,788,5.043]],["title/injectables/CloudinaryService.html",[120,0.362,789,2.777]],["body/injectables/CloudinaryService.html",[3,0.095,4,0.084,5,0.119,7,0.25,8,0.983,11,0.013,12,0.699,14,1.18,15,0.746,16,0.258,17,0.419,20,0.095,21,0.062,24,1.4,26,0.008,27,0.008,116,0.458,118,2.197,120,0.457,121,0.928,148,1.219,149,1.142,150,1.068,155,1.98,226,0.989,246,2.361,248,1.736,272,2.048,275,0.87,276,1.595,302,2.351,303,2.351,304,2.351,305,2.351,306,2.351,309,2.535,345,2.98,480,2.709,501,2.785,502,2.912,503,2.81,504,2.565,505,2.459,520,2.459,552,3.297,567,1.156,609,2.084,612,4.313,618,4.437,639,2.327,686,1.81,743,2.855,789,3.511,790,3.192,791,5.169,792,4.091,793,4.377,794,4.377,795,5.178,796,5.178,797,3.654,798,6.014,799,2.887,800,5.484,801,3.654,802,3.769,803,2.887,804,3.654,805,5.178,806,3.654,807,5.169,808,3.114,809,2.197,810,3.192,811,3.654,812,3.654,813,3.654,814,3.654,815,3.654,816,3.654,817,3.654,818,3.654,819,3.654,820,3.654,821,3.654,822,3.192,823,2.478,824,3.654,825,3.654,826,3.654,827,3.654,828,3.654,829,4.523,830,3.654,831,5.178,832,3.654,833,3.654,834,3.654,835,3.192,836,2.887,837,3.192,838,3.192,839,2.327,840,3.654,841,2.478,842,2.66,843,2.66,844,2.327,845,3.192,846,2.887,847,3.654]],["title/classes/CreateAppointmentDto.html",[21,0.07,153,2.777]],["body/classes/CreateAppointmentDto.html",[3,0.09,4,0.079,5,0.068,7,0.237,10,2.289,11,0.012,12,0.751,15,0.818,16,0.25,20,0.09,21,0.085,26,0.007,27,0.007,116,0.585,142,2.412,150,1.319,153,3.377,174,1.754,188,2.128,202,0.967,226,1.727,279,4.645,281,4.247,283,4.247,285,4.247,287,4.247,289,4.247,291,4.61,315,1.516,333,2.995,342,3.503,369,2.66,431,4.645,567,1.112,593,2.796,777,2.616,848,1.219,849,5.977,850,2.519,851,3.46,852,3.935,853,3.935,854,4.98,855,3.237,856,3.625,857,3.935,858,5.406,859,3.46,860,3.308,861,3.935,862,3.625,863,3.935,864,3.935,865,3.935,866,3.935,867,4.064,868,4.064,869,4.61,870,3.46,871,3.935,872,4.776,873,3.46,874,3.625,875,3.935,876,3.935,877,3.625,878,3.935,879,3.46,880,3.935,881,3.022,882,3.022,883,2.58,884,3.022,885,2.099,886,3.935,887,3.377,888,3.46,889,3.935,890,3.022,891,3.022,892,3.935,893,3.935,894,4.61,895,3.022,896,3.022,897,2.961,898,2.962,899,4.031,900,3.377,901,5.343,902,1.139,903,2.203,904,2.734,905,2.519,906,2.734]],["title/classes/CreateDocumentDto.html",[21,0.07,579,2.777]],["body/classes/CreateDocumentDto.html",[3,0.148,4,0.13,5,0.112,7,0.388,10,1.749,11,0.012,12,0.574,16,0.32,20,0.148,21,0.118,26,0.01,27,0.01,116,0.618,142,2.066,202,1.587,270,2.94,567,1.547,579,4.697,583,2.94,605,3.615,777,2.44,848,2,855,2.92,897,2.711,898,3.034,902,1.869,907,6.05,908,4.485,909,5.809,910,4.132,911,3.85,912,4.958,913,4.958,914,4.485,915,4.958,916,4.958]],["title/classes/CreateGuestAppointmentDto.html",[21,0.07,163,2.777]],["body/classes/CreateGuestAppointmentDto.html",[3,0.084,4,0.074,5,0.063,7,0.22,10,2.326,11,0.012,12,0.774,15,0.832,16,0.202,20,0.084,21,0.08,26,0.007,27,0.007,116,0.596,142,2.434,150,1.219,163,3.201,202,0.898,206,5.637,279,4.487,281,4.071,283,4.071,285,4.071,287,4.071,289,4.071,291,4.42,297,2.151,318,3.401,335,3.793,337,3.793,339,2.549,342,2.898,369,2.593,431,3.436,567,1.054,593,2.068,777,2.66,848,1.132,849,6.119,850,2.339,855,3.372,858,4.996,860,3.441,861,3.729,862,3.436,863,3.729,864,3.729,865,3.729,866,3.729,867,3.925,868,3.925,869,4.42,871,3.729,872,4.935,874,3.436,875,3.729,876,3.729,877,3.436,878,3.729,880,3.729,881,2.807,882,2.807,889,3.729,890,2.807,891,2.807,892,3.729,893,2.539,894,4.42,895,2.807,896,2.807,897,2.997,898,3.188,899,4.098,901,4.87,902,1.058,906,2.539,917,4.123,918,3.214,919,4.123,920,4.123,921,5.594,922,3.214,923,3.214,924,4.123,925,3.729,926,3.214,927,3.214,928,4.72,929,3.436,930,3.214,931,3.214,932,3.214,933,3.214,934,3.201,935,4.87,936,2.807]],["title/classes/CreatePaymentDto.html",[21,0.07,937,2.981]],["body/classes/CreatePaymentDto.html",[3,0.11,4,0.097,5,0.083,7,0.289,10,2.243,11,0.013,12,0.736,15,0.79,16,0.245,20,0.11,21,0.097,26,0.008,27,0.008,94,2.325,112,3.456,116,0.554,142,2.17,174,2.018,188,2.369,202,1.181,226,1.885,349,3.647,369,2.63,370,4.169,567,1.279,620,5.069,621,5.929,626,4.169,697,3.972,739,2.838,777,2.643,782,6.357,848,1.489,855,2.414,867,4.434,868,4.137,883,2.967,897,2.938,898,3.051,899,3.951,902,1.391,937,4.169,938,6.554,939,3.691,940,5.674,941,5.133,942,5.133,943,5.674,944,6.357,945,5.002,946,4.226,947,4.226,948,4.226,949,5.727,950,4.226,951,4.226,952,5.727,953,5.727,954,4.226,955,4.226,956,5.727,957,4.226,958,4.226,959,6.496,960,6.496,961,5.727,962,4.226,963,4.226,964,4.226,965,4.226]],["title/classes/CreatePaymentModeDto.html",[21,0.07,966,2.608]],["body/classes/CreatePaymentModeDto.html",[3,0.139,4,0.122,5,0.105,7,0.365,10,1.646,11,0.012,12,0.54,15,0.675,16,0.312,20,0.139,21,0.113,26,0.01,27,0.01,94,3.094,116,0.407,142,1.989,149,1.54,202,1.493,273,4.22,274,4.22,315,2.922,319,4.011,349,3.401,369,2.519,567,1.49,697,4.345,777,1.881,848,1.881,855,2.812,860,2.434,885,2.812,897,2.611,898,2.922,899,3.621,902,1.758,925,5.27,966,4.248,967,4.248,968,5.826,969,4.22,970,6.67,971,6.67,972,5.341,973,5.341,974,3.212,975,4.665,976,5.341]],["title/classes/CreateUserDto.html",[21,0.07,977,2.608]],["body/classes/CreateUserDto.html",[3,0.112,4,0.098,5,0.085,7,0.294,10,2.257,11,0.013,12,0.741,15,0.812,16,0.281,20,0.112,21,0.099,26,0.008,27,0.008,116,0.558,142,2.394,202,1.203,315,3.073,318,4.061,319,4.219,327,3.249,335,4.447,337,4.447,339,3.514,369,2.65,387,5.064,400,5.064,567,1.295,739,2.873,777,2.58,848,1.516,860,3.338,885,2.957,897,2.953,898,3.305,899,3.808,902,1.417,917,5.064,919,5.064,920,3.759,924,5.064,925,4.581,929,3.132,934,3.932,974,2.588,975,3.759,977,3.692,978,6.59,979,3.4,980,5.798,981,4.303,982,4.303,983,4.303,984,4.303,985,4.303,986,4.303,987,5.064,988,4.303,989,4.303,990,5.798,991,4.303,992,4.303,993,3.132,994,5.798,995,5.798,996,4.303,997,4.303,998,3.4]],["title/controllers/DocumentController.html",[0,1.603,597,2.777]],["body/controllers/DocumentController.html",[0,1.035,2,1.073,3,0.069,4,0.06,5,0.119,7,0.181,8,0.773,10,1.859,11,0.013,12,0.61,14,1.184,15,0.712,16,0.301,17,0.303,20,0.069,21,0.045,22,1.158,23,0.693,24,1.223,26,0.006,27,0.006,52,2.835,116,0.611,127,1.507,132,2.323,134,2.323,136,2.36,141,3.722,142,2.342,145,3.833,148,1.223,149,1.145,150,1.071,151,4.059,156,2.323,158,2.449,160,3.165,167,1.792,174,0.931,175,1.792,177,2.308,178,1.923,188,1.485,189,2.308,194,3.819,195,2.323,196,1.507,198,3.833,199,4.321,200,1.589,201,1.792,202,0.739,204,1.434,207,2.088,208,2.088,209,1.507,213,1.792,214,1.158,216,3.628,217,3.207,225,1.792,226,1.103,227,2.088,257,1.073,275,0.97,296,1.434,297,1.856,318,1.369,327,1.309,335,1.792,337,1.792,339,1.204,341,1.923,353,2.088,369,2.11,370,2.965,377,5.036,390,2.449,391,2.594,399,2.211,524,1.792,562,1.485,563,4.834,565,2.088,566,1.434,567,0.59,568,1.923,569,2.594,570,3.558,571,2.308,572,4.834,573,2.088,574,2.308,575,2.088,576,2.965,577,3.618,578,2.308,579,3.788,580,3.558,581,4.091,582,4.873,583,4.155,584,4.059,585,2.088,586,2.088,587,2.088,588,2.308,589,2.308,590,2.308,591,2.308,592,2.308,593,2.177,594,2.308,595,2.308,596,2.308,597,2.762,598,2.308,599,2.308,600,3.558,601,2.308,602,2.308,603,2.088,604,2.308,605,1.683,606,1.923,607,2.308,608,2.308,609,3.441,610,2.762,611,2.965,612,2.989,613,3.558,614,2.308,615,3.558,616,3.558,617,2.965,618,4.091,619,1.923,620,2.965,621,3.218,622,1.923,623,2.308,624,2.308,625,3.218,626,2.965,627,5.419,628,4.059,629,2.308,630,1.923,631,3.558,632,4.413,633,3.558,634,3.218,635,2.308,636,1.923,637,3.218,638,2.594,639,2.594,640,2.308,641,2.308,904,2.088,911,1.792,999,2.449,1000,2.643,1001,2.643,1002,2.643,1003,5.585,1004,2.643,1005,2.643,1006,2.088,1007,2.643,1008,2.643,1009,2.088,1010,2.643,1011,2.643,1012,2.643,1013,2.643,1014,2.643,1015,2.643,1016,2.643,1017,2.643,1018,2.643]],["title/modules/DocumentModule.html",[28,1.108,42,2.608]],["body/modules/DocumentModule.html",[2,2.671,3,0.136,4,0.119,5,0.103,11,0.013,16,0.341,17,0.599,20,0.136,21,0.089,26,0.01,27,0.01,28,1.949,30,2.044,31,2.044,32,2.287,33,2.287,34,2.12,35,3.035,36,2.287,42,5.344,48,4.782,52,4.536,56,2.802,58,2.618,63,2.881,64,2.044,65,2.287,69,3.123,74,2.287,87,2.201,99,4.561,573,4.126,597,4.883,1019,5.222,1020,5.222,1021,5.222,1022,6.577,1023,5.222]],["title/classes/DocumentResponseDto.html",[21,0.07,584,2.608]],["body/classes/DocumentResponseDto.html",[3,0.105,4,0.092,5,0.079,7,0.275,10,2.277,11,0.012,12,0.748,15,0.748,16,0.237,20,0.105,21,0.068,26,0.008,27,0.008,116,0.609,118,3.326,142,2.406,188,2.307,202,1.123,226,2.049,270,2.081,296,3.434,297,3.258,342,2.865,369,2.575,567,1.235,583,4.104,584,3.522,593,3.379,605,2.558,622,2.923,628,3.522,639,3.522,777,2.667,841,3.751,846,4.371,848,1.415,855,3.401,856,4.026,858,4.026,860,3.258,874,4.026,897,2.964,904,3.173,909,5.204,910,2.923,911,3.751,915,3.508,974,3.326,1024,6.613,1025,3.508,1026,5.526,1027,6.327,1028,4.016,1029,5.531,1030,4.016,1031,6.817,1032,6.817,1033,6.817,1034,6.817,1035,6.817,1036,4.016,1037,4.016,1038,5.531,1039,5.531,1040,4.016,1041,4.016,1042,5.531,1043,4.016,1044,4.016]],["title/injectables/DocumentService.html",[52,2.336,120,0.362]],["body/injectables/DocumentService.html",[3,0.082,4,0.072,5,0.134,7,0.214,8,0.879,11,0.013,12,0.688,14,1.275,15,0.801,16,0.291,17,0.359,20,0.082,21,0.053,23,1.444,24,1.379,26,0.007,27,0.007,52,2.642,56,2.145,58,2.317,60,3.314,74,1.372,87,1.32,114,1.995,116,0.598,120,0.409,121,0.795,132,2.642,134,2.642,136,2.199,148,1.379,149,1.291,150,1.208,155,1.031,188,2.22,226,1.841,246,2.438,248,1.337,249,1.787,251,2.111,254,3.219,257,2.238,263,2.949,267,2.949,270,1.623,272,1.876,275,1.835,276,2.168,296,2.514,297,2.775,302,1.067,303,1.067,304,1.067,305,1.067,306,1.067,307,2.28,308,2.238,309,1.32,531,2.475,583,3.365,584,4.331,585,2.475,586,2.475,593,1.372,609,3.143,612,3.314,618,3.141,627,3.659,628,1.995,632,2.475,634,2.475,639,1.995,808,3.661,809,2.785,841,3.141,857,2.475,909,5.122,999,2.785,1026,2.736,1045,2.736,1046,3.133,1047,4.632,1048,3.133,1049,3.133,1050,3.141,1051,3.133,1052,3.133,1053,4.632,1054,3.133,1055,3.133,1056,3.133,1057,3.133,1058,4.632,1059,3.659,1060,4.632,1061,3.133,1062,2.736,1063,3.133,1064,3.133,1065,3.133,1066,3.133,1067,3.133,1068,7.504,1069,3.133,1070,3.133,1071,6.088,1072,3.133,1073,3.133,1074,3.133,1075,3.133,1076,3.133,1077,3.133,1078,3.133,1079,3.133,1080,5.511,1081,4.632,1082,3.133]],["title/injectables/EvolutionApiService.html",[120,0.362,1083,2.777]],["body/injectables/EvolutionApiService.html",[3,0.074,4,0.065,5,0.056,7,0.194,8,0.816,11,0.013,12,0.709,14,0.843,15,0.798,16,0.267,17,0.325,20,0.074,21,0.048,23,2.069,24,1.262,26,0.006,27,0.006,57,3.102,71,3.303,72,1.468,76,1.616,80,2.736,116,0.534,120,0.38,121,0.719,148,1.052,149,0.985,150,0.922,155,1.415,184,1.922,194,2.332,217,2.64,246,2.019,248,1.24,272,2.687,275,1.771,276,1.785,308,1.745,309,2.441,314,3.305,325,2.063,326,2.239,333,3.121,339,3.102,345,1.404,385,4.136,404,2.475,458,2.584,476,2.332,480,2.188,545,3.52,547,3.128,550,1.805,555,2.063,557,4.216,567,0.96,603,2.239,686,1.404,739,2.571,743,1.346,748,2.239,773,2.914,780,2.063,839,1.805,844,1.805,885,2.441,999,1.704,1083,2.914,1084,6.271,1085,5.673,1086,2.475,1087,6.807,1088,6.552,1089,5.945,1090,6.552,1091,4.533,1092,2.914,1093,2.914,1094,2.063,1095,4.297,1096,3.128,1097,2.834,1098,3.128,1099,2.834,1100,2.834,1101,2.834,1102,2.834,1103,2.834,1104,2.063,1105,3.395,1106,2.475,1107,2.834,1108,2.834,1109,2.834,1110,2.475,1111,4.101,1112,4.533,1113,2.063,1114,2.239,1115,2.475,1116,2.475,1117,2.475,1118,2.239,1119,2.063,1120,1.805,1121,2.834,1122,2.834,1123,4.297,1124,4.533,1125,2.239,1126,2.475,1127,2.475,1128,2.475,1129,2.475,1130,2.239,1131,2.475,1132,3.753,1133,3.753,1134,2.475,1135,2.475,1136,3.395,1137,2.475,1138,4.101,1139,2.475,1140,3.395,1141,3.753,1142,2.332,1143,2.475,1144,3.395,1145,3.753,1146,2.475,1147,2.475,1148,2.834,1149,2.834,1150,2.834,1151,2.834,1152,2.834,1153,4.297,1154,2.834,1155,2.834,1156,2.834,1157,2.834,1158,2.834,1159,2.834,1160,2.834,1161,2.834,1162,2.834,1163,2.834,1164,2.834,1165,2.834,1166,2.239,1167,4.533,1168,2.475,1169,2.475,1170,2.475,1171,2.475,1172,2.475]],["title/injectables/ExceptionService.html",[53,2.462,120,0.362]],["body/injectables/ExceptionService.html",[3,0.101,4,0.088,5,0.076,7,0.264,8,1.021,11,0.013,12,0.758,14,1.432,15,0.827,16,0.265,17,0.442,20,0.101,21,0.091,22,1.69,23,1.011,24,1.428,26,0.008,27,0.008,53,3.235,58,2.206,116,0.57,120,0.475,121,0.979,148,1.518,149,1.422,150,1.33,155,2.32,248,1.114,272,2.109,275,1.738,302,1.314,303,1.314,304,1.314,305,1.314,306,1.314,308,1.567,369,1.457,497,6.777,501,1.457,737,2.457,784,2.808,823,2.616,842,2.808,843,2.808,885,2.611,902,1.27,1142,3.637,1173,3.37,1174,5.379,1175,5.379,1176,5.379,1177,5.379,1178,5.379,1179,5.379,1180,3.858,1181,3.858,1182,5.379,1183,5.379,1184,3.858,1185,3.858,1186,5.379,1187,3.858,1188,5.379,1189,3.858,1190,5.379,1191,3.858,1192,5.379,1193,6.541,1194,3.858,1195,3.648,1196,5.379,1197,3.858,1198,3.858,1199,3.858,1200,3.37,1201,3.37,1202,5.853,1203,3.858,1204,3.858,1205,3.37,1206,6.701,1207,3.858,1208,3.858,1209,3.858,1210,3.858,1211,3.858,1212,3.858,1213,3.858,1214,3.858,1215,3.858,1216,3.858,1217,3.858,1218,3.858,1219,3.858,1220,3.858]],["title/injectables/ExistsConstraint.html",[120,0.362,1221,3.236]],["body/injectables/ExistsConstraint.html",[3,0.106,4,0.093,5,0.08,7,0.277,8,1.056,11,0.013,12,0.692,14,1.092,15,0.793,16,0.293,17,0.465,20,0.145,21,0.108,24,1.387,26,0.008,27,0.008,56,2.41,74,1.775,112,1.923,116,0.484,120,0.492,121,1.028,148,1.128,149,1.056,150,0.988,246,2.108,248,1.835,251,2.897,272,2.164,275,1.513,276,1.248,302,2.164,303,2.164,304,2.164,305,2.164,306,2.164,315,1.775,323,3.773,342,2.098,480,2.102,501,2.799,502,3.009,503,2.199,504,2.757,505,2.642,520,1.923,524,2.747,559,2.882,567,1.243,660,2.58,686,2.007,689,2.949,699,3.543,743,2.642,902,2.092,1221,5.022,1222,3.201,1223,4.86,1224,4.05,1225,5.564,1226,4.86,1227,6.629,1228,4.051,1229,5.976,1230,4.86,1231,4.051,1232,4.86,1233,5.406,1234,4.86,1235,4.86,1236,3.538,1237,3.538,1238,3.538,1239,3.538,1240,3.538,1241,4.86,1242,5.976,1243,4.86,1244,3.538,1245,3.538,1246,4.05,1247,3.538,1248,4.05,1249,4.396,1250,4.86,1251,3.538,1252,3.538]],["title/interfaces/FileStorageService.html",[562,1.493,808,2.462]],["body/interfaces/FileStorageService.html",[3,0.135,4,0.119,5,0.141,7,0.355,8,1.243,11,0.012,12,0.726,14,1.408,15,0.844,20,0.187,26,0.01,27,0.01,116,0.547,118,3.119,148,1.455,149,1.363,150,1.275,226,1.404,275,1.235,480,2.999,562,2.388,564,2.816,609,2.959,612,4.774,792,5.175,793,5.225,794,5.225,799,4.099,800,5.779,802,4.767,803,4.099,808,3.939,809,3.119,1253,3.776,1254,5.175,1255,5.187,1256,4.531,1257,5.187,1258,4.442,1259,5.187,1260,3.776]],["title/interfaces/FileUploadResult.html",[562,1.493,809,2.462]],["body/interfaces/FileUploadResult.html",[3,0.15,4,0.131,5,0.137,7,0.393,11,0.012,15,0.847,20,0.196,26,0.01,27,0.01,116,0.531,118,4.7,226,2.115,275,1.368,480,2.838,562,2.545,564,3.119,567,1.558,609,3.277,612,4.196,793,4.182,794,4.182,800,5.079,802,4.182,808,3.455,809,4.196,1253,4.182,1254,4.54,1260,4.182]],["title/injectables/FirebaseAdminService.html",[54,2.777,120,0.362]],["body/injectables/FirebaseAdminService.html",[3,0.133,4,0.116,5,0.1,7,0.348,8,1.228,11,0.013,12,0.654,14,1.269,15,0.72,16,0.305,17,0.583,20,0.133,21,0.086,24,1.031,26,0.009,27,0.009,54,4.387,78,4.019,108,5.62,116,0.387,120,0.571,121,1.291,148,1.031,149,0.965,150,0.903,155,1.675,214,2.228,246,2.192,254,2.52,276,1.567,302,1.732,303,1.732,304,1.732,305,1.732,306,1.732,308,2.065,309,2.144,501,1.921,527,3.702,686,2.52,737,3.239,839,3.239,842,3.702,843,3.702,844,3.239,1261,6.213,1262,4.443,1263,6.9,1264,6.468,1265,5.086,1266,6.468,1267,5.086,1268,5.086,1269,5.65,1270,5.65,1271,6.468,1272,5.086,1273,5.086,1274,5.086,1275,5.086,1276,5.086,1277,5.086,1278,5.086,1279,5.086,1280,5.086,1281,5.086]],["title/injectables/JwtAuthGuard.html",[120,0.362,452,2.981]],["body/injectables/JwtAuthGuard.html",[3,0.113,4,0.099,5,0.085,7,0.296,8,1.105,11,0.013,12,0.589,14,0.849,16,0.324,17,0.496,20,0.113,21,0.074,23,1.723,24,1.18,26,0.009,27,0.009,58,2.542,87,1.824,112,2.055,116,0.443,120,0.514,121,1.099,148,1.18,149,1.105,150,1.033,155,1.916,211,2.935,214,2.88,246,2.026,248,1.68,272,2.239,275,1.674,276,1.333,302,1.981,303,1.981,304,1.981,305,1.981,306,1.981,308,2.363,440,3.817,447,3.706,448,2.756,449,3.15,452,4.236,453,5.195,456,3.15,474,4.598,480,2.483,494,4.786,501,2.656,502,2.855,503,2.349,504,2.144,505,2.055,519,4.236,520,2.055,559,2.241,566,3.159,572,3.15,666,6.744,669,5.556,672,3.419,688,3.78,690,3.78,695,3.419,857,3.419,1282,5.195,1283,3.419,1284,5.083,1285,5.083,1286,3.78,1287,4.327,1288,5.083,1289,4.327,1290,3.78,1291,2.935,1292,3.419,1293,3.15,1294,5.083,1295,4.327,1296,3.78,1297,4.327,1298,3.78,1299,4.327,1300,3.78]],["title/injectables/JwtStrategy.html",[120,0.362,441,2.777]],["body/injectables/JwtStrategy.html",[3,0.119,4,0.104,5,0.09,7,0.311,8,1.141,11,0.013,12,0.608,14,0.892,15,0.46,16,0.32,17,0.521,20,0.119,21,0.077,23,1.576,24,0.921,26,0.009,27,0.009,56,2.526,71,4.09,72,2.354,74,1.991,116,0.546,120,0.531,121,1.154,146,2.354,148,1.219,149,1.141,150,1.068,155,1.496,174,2.374,226,1.23,246,2.076,248,1.736,251,3.071,254,2.252,272,2.047,275,1.082,276,1.4,302,2.047,303,2.047,304,2.047,305,2.047,306,2.047,308,1.845,374,4.751,378,2.733,399,2.467,441,4.078,458,3.616,460,3.97,467,3.97,494,3.308,501,2.709,502,2.912,503,2.467,504,2.252,505,2.158,538,3.591,543,3.97,559,2.354,566,3.264,1094,3.308,1224,4.377,1282,5.324,1291,3.082,1293,3.308,1301,3.97,1302,6.013,1303,4.545,1304,6.013,1305,4.545,1306,4.545,1307,4.545,1308,4.545,1309,4.545,1310,3.591,1311,3.308,1312,4.545,1313,4.545,1314,4.545,1315,4.545,1316,4.545,1317,4.545,1318,3.082,1319,3.97,1320,4.545,1321,4.545,1322,4.545,1323,4.545]],["title/classes/LoginDto.html",[21,0.07,360,2.981]],["body/classes/LoginDto.html",[3,0.147,4,0.129,5,0.111,7,0.386,10,2.128,11,0.012,12,0.699,15,0.786,16,0.296,20,0.147,21,0.117,26,0.01,27,0.01,116,0.526,202,1.579,318,3.864,327,3.696,360,5.027,567,1.542,777,2.433,848,1.99,860,3.147,897,2.92,898,3.025,899,3.748,902,1.86,934,4.683,987,4.934,993,4.112,998,4.463,1324,4.934,1325,4.463,1326,5.649,1327,5.649,1328,5.649,1329,4.463]],["title/injectables/OptionalJwtAuthGuard.html",[120,0.362,1330,3.236]],["body/injectables/OptionalJwtAuthGuard.html",[3,0.121,4,0.106,5,0.092,7,0.318,8,1.159,11,0.013,12,0.618,14,0.913,16,0.292,17,0.534,20,0.121,21,0.079,22,2.038,23,1.22,24,1.382,26,0.009,27,0.009,112,2.9,116,0.465,120,0.54,121,1.181,148,1.238,149,1.159,150,1.084,214,2.986,246,2.1,248,1.343,275,1.623,276,1.434,302,2.079,303,2.079,304,2.079,305,2.079,306,2.079,378,4.638,440,3.928,447,2.963,448,2.963,449,3.387,474,4.825,480,2.575,501,2.734,502,2.939,503,2.526,504,2.305,505,2.209,519,4.445,520,2.209,559,2.41,566,3.315,572,3.387,610,3.155,669,5.718,672,3.676,695,3.676,1283,3.676,1284,5.334,1285,5.334,1286,4.064,1288,5.334,1290,4.064,1291,3.155,1293,3.387,1296,4.064,1298,4.064,1300,4.064,1330,4.825,1331,5.954,1332,5.954,1333,4.653,1334,4.653,1335,6.107,1336,3.676,1337,4.653,1338,4.064,1339,4.064,1340,2.963,1341,4.653]],["title/classes/ParamAppointmentIdDto.html",[21,0.07,138,2.981]],["body/classes/ParamAppointmentIdDto.html",[3,0.143,4,0.125,5,0.108,7,0.374,10,1.688,11,0.012,12,0.554,15,0.686,16,0.315,20,0.143,21,0.115,26,0.01,27,0.01,116,0.417,128,4.623,138,4.932,142,2.021,202,1.531,226,2.208,315,2.4,567,1.513,777,1.93,848,1.93,855,2.856,860,2.496,867,4.895,868,4.685,883,3.51,885,2.856,887,4.595,897,2.653,898,2.968,900,4.595,902,1.803,903,3.488,1342,5.354,1343,3.715,1344,5.478,1345,4.785,1346,5.478]],["title/classes/ParamDocumentIdDto.html",[21,0.07,582,2.777]],["body/classes/ParamDocumentIdDto.html",[3,0.144,4,0.127,5,0.109,7,0.378,10,1.704,11,0.012,12,0.559,15,0.689,16,0.317,20,0.144,21,0.116,26,0.01,27,0.01,116,0.421,142,2.033,202,1.546,226,2.212,315,2.422,567,1.522,582,4.622,583,4.234,777,1.948,848,1.948,855,2.873,860,2.52,883,3.531,885,2.873,887,4.622,897,2.668,898,2.986,900,4.622,902,1.82,903,3.521,1343,3.75,1347,5.385,1348,5.529,1349,4.83,1350,5.529]],["title/classes/ParamUserIdDto.html",[21,0.07,172,2.608]],["body/classes/ParamUserIdDto.html",[3,0.144,4,0.127,5,0.109,7,0.378,10,1.704,11,0.012,12,0.559,15,0.689,16,0.317,20,0.144,21,0.116,26,0.01,27,0.01,116,0.421,142,2.033,172,4.34,174,2.717,188,2.694,202,1.546,226,2.088,315,2.422,369,2.574,567,1.522,622,4.025,777,1.948,848,1.948,860,2.52,883,3.531,884,4.83,885,2.873,886,5.385,887,4.622,897,2.668,898,2.986,900,4.622,902,1.82,903,3.521,905,4.025,1342,5.385,1343,3.75,1345,4.83]],["title/classes/ParamUserIdDto-1.html",[21,0.058,172,2.172,749,2.172]],["body/classes/ParamUserIdDto-1.html",[3,0.145,4,0.127,5,0.109,7,0.38,10,1.712,11,0.012,12,0.562,15,0.691,16,0.317,20,0.145,21,0.116,26,0.01,27,0.01,116,0.423,142,2.038,172,4.353,174,2.722,188,2.7,202,1.553,226,2.091,315,2.434,567,1.527,777,1.957,848,1.957,860,2.532,883,3.541,885,2.881,886,5.85,887,4.636,897,2.676,898,2.994,900,4.636,902,1.829,903,3.538,905,4.044,1343,3.768,1347,5.401,1349,4.853,1351,5.555]],["title/controllers/PaymentController.html",[0,1.603,1352,2.981]],["body/controllers/PaymentController.html",[0,1.122,2,1.163,3,0.075,4,0.066,5,0.056,7,0.196,8,0.822,10,2.027,11,0.013,12,0.666,14,1.291,15,0.729,16,0.282,17,0.329,20,0.075,21,0.049,22,1.255,23,0.751,24,1.268,26,0.006,27,0.006,94,2.671,116,0.501,127,1.634,130,2.057,141,3.571,142,2.372,145,3.502,146,2.244,148,1.268,149,1.297,150,1.111,154,2.085,156,2.471,158,2.605,159,3.784,160,2.759,167,1.943,168,2.503,169,1.943,173,2.503,174,2.586,175,1.943,185,1.943,188,2.124,194,1.555,195,1.634,196,2.471,198,3.761,199,4.23,200,1.723,201,1.943,202,0.801,204,1.555,210,3.709,211,1.943,213,1.943,214,1.255,216,3.502,217,3.114,218,1.634,226,1.849,229,2.503,246,2.401,254,2.886,257,1.163,276,0.883,300,3.709,349,2.759,369,1.082,393,2.938,399,1.555,527,3.154,576,2.085,577,3.154,737,1.824,749,2.759,777,2.052,841,1.943,855,1.826,883,3.644,937,4.789,1142,3.708,1340,1.824,1352,3.154,1353,2.503,1354,3.784,1355,5.087,1356,3.784,1357,3.784,1358,4.332,1359,5.225,1360,2.503,1361,3.784,1362,4.332,1363,3.784,1364,4.332,1365,2.865,1366,3.784,1367,2.865,1368,2.865,1369,2.865,1370,5.398,1371,2.865,1372,2.503,1373,2.865,1374,4.789,1375,4.239,1376,4.789,1377,3.502,1378,2.865,1379,3.423,1380,4.332,1381,4.332,1382,4.553,1383,4.563,1384,4.332,1385,3.784,1386,2.865,1387,2.503,1388,2.865,1389,2.865,1390,4.332,1391,2.865,1392,6.832,1393,2.865,1394,4.332,1395,2.865,1396,3.423,1397,2.865,1398,3.327,1399,2.503,1400,2.865,1401,5.225,1402,2.865,1403,2.865,1404,2.865,1405,2.865,1406,2.865,1407,2.865,1408,2.865,1409,2.865,1410,2.865,1411,2.264,1412,2.865,1413,2.865,1414,2.865,1415,2.865,1416,2.503,1417,2.865,1418,2.865,1419,4.332,1420,2.865,1421,4.332,1422,4.332,1423,2.865,1424,2.865,1425,2.865,1426,2.865,1427,2.865]],["title/controllers/PaymentModeController.html",[0,1.603,67,2.777]],["body/controllers/PaymentModeController.html",[0,1.359,2,1.409,3,0.091,4,0.079,5,0.068,7,0.237,8,0.947,10,2.086,11,0.013,12,0.685,14,1.328,15,0.766,16,0.29,17,0.398,20,0.091,21,0.059,22,1.52,23,0.91,24,1.372,26,0.007,27,0.007,55,3.514,67,3.385,94,3.386,95,4.781,96,2.742,116,0.487,127,1.979,130,3.034,132,3.645,134,2.846,136,3.215,141,4.035,142,2.291,148,1.295,149,1.213,150,1.135,154,2.526,155,1.643,156,2.846,157,2.846,167,2.354,175,3.963,178,2.526,192,3.178,194,2.709,195,1.979,196,2.846,198,4.239,199,4.239,200,2.087,201,2.354,202,0.97,204,1.884,209,1.979,213,2.354,214,1.52,216,4.071,217,3.086,218,2.846,219,2.742,225,2.354,226,2.049,263,2.21,267,2.21,300,3.178,568,2.526,569,3.722,630,2.526,636,2.526,638,4.069,697,4.589,966,4.489,967,4.489,999,3.001,1006,2.742,1009,2.742,1050,2.354,1318,3.385,1428,3.031,1429,6.158,1430,3.47,1431,3.47,1432,3.47,1433,3.47,1434,3.385,1435,3.47,1436,3.47,1437,3.47,1438,5.041,1439,3.47,1440,3.943,1441,3.47,1442,3.47,1443,3.47,1444,3.47,1445,3.031,1446,3.47,1447,3.47,1448,3.47,1449,3.031,1450,3.47]],["title/modules/PaymentModeModule.html",[28,1.108,43,2.777]],["body/modules/PaymentModeModule.html",[2,2.705,3,0.139,4,0.122,5,0.105,11,0.013,16,0.336,17,0.611,20,0.139,21,0.091,26,0.01,27,0.01,28,1.967,30,2.086,31,2.086,32,2.334,33,2.334,34,2.164,35,3.063,36,2.918,43,5.647,45,3.961,55,4.807,58,2.632,63,2.918,64,2.086,65,2.334,67,4.928,69,3.163,75,3.393,87,2.246,94,2.705,95,3.614,96,4.21,97,4.654,967,3.393,1451,5.329,1452,5.329,1453,5.329,1454,5.329]],["title/injectables/PaymentModeService.html",[55,2.462,120,0.362]],["body/injectables/PaymentModeService.html",[3,0.094,4,0.082,5,0.071,7,0.246,8,0.971,11,0.013,12,0.721,14,1.346,15,0.772,16,0.294,17,0.412,20,0.094,21,0.061,23,1.341,24,1.391,26,0.007,27,0.007,55,3.076,56,2.287,58,2.416,74,1.574,87,1.514,94,2.98,95,4.977,116,0.523,120,0.452,121,0.912,130,2.429,132,3.703,134,2.918,136,2.429,146,1.861,148,1.391,149,1.302,150,1.219,155,1.183,157,2.049,192,2.288,204,1.95,209,2.049,218,3.398,226,1.93,246,2.492,248,1.477,249,2.049,251,2.332,254,3.4,255,4.042,257,2.98,263,3.258,267,3.258,272,1.742,275,1.634,276,2.114,294,3.138,296,3.234,297,2.332,299,4.04,300,3.258,302,1.223,303,1.223,304,1.223,305,1.223,306,1.223,307,2.615,308,2.077,309,1.514,593,1.574,638,2.288,697,3.913,966,4.134,967,4.673,999,3.076,1050,3.469,1318,2.436,1429,3.138,1434,2.436,1438,4.403,1440,4.042,1455,3.138,1456,3.592,1457,3.592,1458,3.592,1459,3.592,1460,3.592,1461,3.592,1462,5.46,1463,3.592,1464,5.116,1465,3.592,1466,3.592,1467,3.592,1468,3.592,1469,5.116]],["title/modules/PaymentModule.html",[28,1.108,44,2.608]],["body/modules/PaymentModule.html",[2,2.549,3,0.127,4,0.111,5,0.096,11,0.013,16,0.34,17,0.557,20,0.127,21,0.083,26,0.009,27,0.009,28,1.883,30,1.901,31,1.901,32,2.127,33,2.127,34,1.971,35,2.933,36,3.048,44,5.36,45,3.866,58,2.569,63,2.75,64,1.901,65,2.127,69,2.981,75,3.092,87,2.047,94,2.549,114,3.092,1352,5.065,1377,2.92,1398,5.29,1399,4.241,1470,4.241,1471,4.241,1472,4.241,1473,4.855,1474,4.969,1475,4.969,1476,4.855,1477,4.241,1478,4.855,1479,4.241,1480,5.484,1481,4.241,1482,4.855]],["title/interfaces/PaymentProcessor.html",[562,1.493,1483,2.777]],["body/interfaces/PaymentProcessor.html",[3,0.126,4,0.111,5,0.095,7,0.331,8,1.19,11,0.012,12,0.744,14,1.442,15,0.859,20,0.126,26,0.009,27,0.009,116,0.56,148,1.49,149,1.395,150,1.385,480,3.038,562,1.767,564,2.63,739,3.864,942,6.162,1246,5.06,1258,3.286,1382,4.564,1483,4.252,1484,6.015,1485,4.232,1486,6.072,1487,5.492,1488,5.476,1489,5.476,1490,4.232,1491,6.072,1492,4.845,1493,5.808,1494,4.232,1495,6.072,1496,6.072,1497,5.06,1498,4.845,1499,5.476,1500,4.845,1501,5.476,1502,4.845]],["title/injectables/PaymentProcessorFactory.html",[120,0.362,1474,2.608]],["body/injectables/PaymentProcessorFactory.html",[3,0.139,4,0.122,5,0.105,7,0.365,8,1.266,11,0.013,12,0.675,14,1.048,15,0.736,16,0.312,17,0.612,20,0.139,21,0.091,22,2.34,23,1.4,24,1.083,26,0.01,27,0.01,94,2.709,116,0.508,120,0.589,121,1.356,148,1.352,149,1.266,150,1.185,155,1.758,248,1.542,273,4.22,274,4.22,308,2.169,345,2.646,1377,3.212,1474,4.248,1475,5.093,1477,4.665,1483,4.933,1484,5.747,1503,4.665,1504,6.67,1505,5.341,1506,5.341,1507,6.67,1508,5.341,1509,7.274,1510,4.665,1511,5.341,1512,5.341,1513,5.341,1514,5.341,1515,5.341]],["title/injectables/PaymentService.html",[120,0.362,1398,2.608]],["body/injectables/PaymentService.html",[3,0.051,4,0.045,5,0.038,7,0.133,8,0.608,11,0.013,12,0.596,14,1.019,15,0.679,16,0.239,17,0.224,20,0.051,21,0.033,23,1.067,24,1.195,26,0.005,27,0.005,56,1.658,58,1.94,74,0.855,87,0.823,94,2.587,112,3.364,116,0.396,120,0.283,121,0.496,128,3.356,146,1.012,148,1.053,149,0.986,150,0.923,155,1.054,169,3.192,174,1.966,183,1.543,185,4.554,188,2.035,217,2.145,226,1.665,246,2.213,248,0.924,249,1.114,251,1.459,254,2.574,257,1.3,269,1.543,270,1.012,272,1.385,275,1.821,276,2.213,293,1.706,295,1.706,296,2.555,297,2.145,298,4.657,299,3.785,300,2.591,302,0.665,303,0.665,304,0.665,305,0.665,306,0.665,308,2.393,314,2.591,319,1.925,349,2.591,369,0.738,390,1.174,391,2.039,393,1.324,399,1.06,469,3.215,501,0.738,502,0.793,520,0.927,527,1.421,532,1.706,556,1.543,617,4.29,620,3.426,625,1.543,626,4.062,697,1.826,739,0.968,749,1.243,784,1.421,836,1.543,852,1.543,853,1.543,855,1.35,856,1.421,877,1.421,940,3.554,941,3.215,943,3.554,1059,1.543,1062,4.538,1125,1.543,1136,1.543,1319,1.706,1336,4.41,1338,1.706,1339,2.796,1340,1.243,1354,2.796,1355,4.111,1356,2.796,1357,2.796,1360,2.796,1361,1.706,1370,4.105,1372,2.796,1374,2.962,1375,2.962,1376,2.962,1377,4.372,1379,1.543,1382,4.637,1383,1.706,1387,2.796,1396,4.657,1398,2.039,1462,4.062,1474,2.997,1479,1.706,1480,3.554,1481,3.554,1487,1.543,1493,3.719,1497,3.426,1516,1.706,1517,3.202,1518,1.953,1519,1.953,1520,5.148,1521,4.538,1522,3.554,1523,3.202,1524,3.202,1525,4.105,1526,5.195,1527,4.111,1528,3.202,1529,1.953,1530,3.202,1531,5.195,1532,1.953,1533,3.202,1534,1.953,1535,3.202,1536,1.953,1537,2.796,1538,2.796,1539,4.069,1540,3.202,1541,3.202,1542,3.202,1543,6.556,1544,1.953,1545,3.202,1546,1.953,1547,1.706,1548,1.953,1549,1.953,1550,1.953,1551,3.202,1552,3.202,1553,3.202,1554,4.069,1555,3.202,1556,4.069,1557,1.953,1558,3.202,1559,1.953,1560,1.953,1561,5.195,1562,1.953,1563,1.953,1564,1.953,1565,3.202,1566,1.953,1567,1.706,1568,1.953,1569,1.953,1570,1.953,1571,1.706,1572,1.953,1573,1.953,1574,1.953,1575,1.953,1576,1.953,1577,1.706,1578,1.953,1579,4.069,1580,3.202,1581,1.953,1582,1.953,1583,1.953,1584,1.953,1585,1.953,1586,1.953,1587,1.953,1588,1.953,1589,1.953,1590,1.953,1591,1.953,1592,3.202,1593,1.706,1594,1.706,1595,1.953,1596,1.706,1597,1.706,1598,1.953,1599,1.953,1600,1.953,1601,2.53,1602,1.953,1603,3.202,1604,1.953,1605,3.202,1606,3.202,1607,1.953,1608,1.953,1609,1.953,1610,1.953,1611,1.953,1612,1.953,1613,1.706,1614,1.953,1615,1.953,1616,2.796,1617,3.202,1618,1.953,1619,1.953,1620,3.202,1621,3.202,1622,1.953,1623,3.202,1624,1.953,1625,1.953,1626,1.706,1627,1.953,1628,1.953,1629,1.953,1630,1.953,1631,3.202,1632,1.953,1633,1.953,1634,1.953,1635,3.202,1636,1.953,1637,3.202]],["title/modules/PrismaModule.html",[28,1.108,45,2.029]],["body/modules/PrismaModule.html",[3,0.15,4,0.131,5,0.113,11,0.012,16,0.298,17,0.657,20,0.15,21,0.097,26,0.01,27,0.01,28,2.032,30,2.244,31,2.244,32,2.511,33,2.511,34,2.327,35,3.164,36,3.288,45,4.08,56,2.992,63,3.052,64,2.244,65,2.511,69,2.722,1638,5.006,1639,5.732,1640,5.006,1641,5.732,1642,5.732]],["title/injectables/PrismaService.html",[56,1.443,120,0.362]],["body/injectables/PrismaService.html",[3,0.125,4,0.109,5,0.094,7,0.327,8,1.181,11,0.013,12,0.699,14,1.22,16,0.313,17,0.549,20,0.125,21,0.081,26,0.009,27,0.009,56,2.191,120,0.55,121,1.215,246,2.395,248,1.995,270,2.479,276,1.917,302,2.491,303,2.491,304,2.491,305,2.491,306,2.491,309,2.622,501,2.763,502,2.971,566,3.376,619,3.483,686,2.371,839,3.047,844,3.047,1263,6.789,1293,3.483,1311,5.325,1643,4.18,1644,6.91,1645,7.773,1646,4.786,1647,4.786,1648,4.786,1649,4.786,1650,4.18,1651,4.18,1652,4.786,1653,4.786,1654,4.786,1655,4.786,1656,5.433,1657,4.18,1658,5.433,1659,4.18,1660,3.781,1661,4.786,1662,4.786,1663,4.18,1664,4.786,1665,4.786]],["title/modules/RedisModule.html",[28,1.108,46,2.462]],["body/modules/RedisModule.html",[3,0.15,4,0.131,5,0.113,11,0.012,16,0.298,17,0.657,20,0.15,21,0.097,26,0.01,27,0.01,28,2.032,30,2.244,31,2.244,32,2.511,33,2.511,34,2.327,35,3.164,36,3.288,46,4.952,57,3.871,63,3.052,64,2.244,65,2.511,69,2.722,1666,5.006,1667,5.732,1668,5.006,1669,5.732,1670,5.732]],["title/injectables/RedisService.html",[57,1.866,120,0.362]],["body/injectables/RedisService.html",[3,0.082,4,0.072,5,0.062,7,0.216,8,0.884,11,0.013,12,0.69,14,1.279,15,0.802,16,0.237,17,0.362,20,0.082,21,0.054,23,0.828,24,1.321,26,0.007,27,0.007,57,2.123,80,4.708,81,2.298,82,2.298,116,0.552,120,0.412,121,0.802,148,1.468,149,1.295,150,1.211,246,2.473,248,0.912,257,2.647,272,1.075,275,1.552,276,2.231,297,2.123,302,2.402,303,2.402,304,2.402,305,2.402,306,2.402,315,2.041,399,3.318,480,2.88,501,2.97,502,3.193,503,3.538,504,3.23,505,3.095,552,2.967,559,2.413,655,4.708,692,3.526,699,2.011,707,3.16,712,4.375,736,5.339,737,2.011,738,6.457,739,3.38,741,3.16,743,2.629,749,2.011,856,3.391,1258,2.142,1311,2.298,1376,3.391,1525,3.681,1616,4.07,1656,4.836,1671,2.758,1672,5.537,1673,4.836,1674,3.158,1675,3.158,1676,3.158,1677,3.158,1678,4.659,1679,4.659,1680,4.07,1681,4.659,1682,4.659,1683,4.659,1684,4.659,1685,3.158,1686,4.659,1687,3.158,1688,4.659,1689,3.158,1690,4.659,1691,3.158,1692,3.158,1693,2.758,1694,3.158,1695,3.158,1696,3.158,1697,5.537,1698,3.158,1699,4.659,1700,2.758,1701,3.158,1702,3.158,1703,3.158,1704,3.158]],["title/injectables/RefreshTokenService.html",[120,0.362,442,2.608]],["body/injectables/RefreshTokenService.html",[3,0.103,4,0.091,5,0.078,7,0.271,8,1.04,11,0.013,12,0.686,14,1.232,15,0.778,16,0.305,17,0.454,20,0.103,21,0.067,23,1.436,24,0.803,26,0.008,27,0.008,56,2.388,71,3.866,72,2.052,74,1.736,116,0.516,120,0.484,121,1.006,130,2.602,148,1.374,149,1.287,150,1.204,188,1.998,214,3.224,246,2.369,248,1.582,249,2.26,251,2.497,257,1.609,272,1.866,275,1.614,276,1.936,302,2.308,303,2.308,304,2.308,305,2.308,306,2.308,442,3.49,450,5.179,458,3.778,480,2.687,494,2.884,501,2.78,502,2.988,520,2.602,559,2.839,593,2.4,643,3.131,647,3.131,883,3.254,1140,4.33,1224,3.989,1311,3.989,1705,6.215,1706,5.48,1707,3.962,1708,5.48,1709,3.962,1710,3.962,1711,3.962,1712,5.48,1713,5.48,1714,3.962,1715,3.962,1716,3.962,1717,3.131,1718,5.48,1719,3.962,1720,3.962,1721,3.461,1722,3.962,1723,3.962,1724,5.48,1725,3.962,1726,3.962,1727,5.48,1728,3.962,1729,3.962]],["title/classes/RequestPasswordResetDto.html",[21,0.07,381,2.981]],["body/classes/RequestPasswordResetDto.html",[3,0.154,4,0.135,5,0.116,7,0.403,10,1.815,11,0.012,12,0.596,15,0.717,16,0.303,20,0.154,21,0.12,26,0.01,27,0.01,116,0.449,202,1.646,318,3.935,327,3.509,381,5.155,567,1.582,777,2.075,848,2.075,860,2.684,897,2.773,898,3.103,902,1.939,934,4.803,1325,4.654,1329,4.654,1730,6.187,1731,5.145,1732,5.89]],["title/classes/ResetPasswordDto.html",[21,0.07,395,2.981]],["body/classes/ResetPasswordDto.html",[3,0.14,4,0.122,5,0.105,7,0.366,10,2.244,11,0.012,12,0.737,15,0.81,16,0.286,20,0.14,21,0.114,26,0.01,27,0.01,116,0.555,202,1.496,318,3.772,385,3.772,395,4.862,490,6.36,567,1.492,777,2.565,848,1.886,860,3.319,897,2.985,898,3.19,899,3.952,902,1.762,934,4.53,993,3.896,998,4.229,1325,4.229,1329,4.229,1733,6.66,1734,4.676,1735,5.353,1736,5.353,1737,5.353,1738,5.353,1739,5.353,1740,4.676,1741,5.353]],["title/interfaces/Response.html",[562,1.493,1142,2.223]],["body/interfaces/Response.html",[3,0.144,4,0.126,5,0.109,7,0.377,11,0.012,15,0.855,20,0.144,26,0.01,27,0.01,116,0.614,150,1.466,257,3.129,562,2.012,564,2.994,567,1.52,739,3.657,741,5.005,885,3.249,1142,3.694,1195,5.226,1742,4.818,1743,6.731,1744,6.089,1745,6.089]],["title/injectables/ResponseService.html",[58,1.348,120,0.362]],["body/injectables/ResponseService.html",[3,0.077,4,0.067,5,0.058,7,0.202,8,0.84,11,0.013,12,0.748,14,1.45,15,0.829,16,0.19,17,0.338,20,0.077,21,0.05,24,1.499,26,0.006,27,0.006,58,1.457,116,0.579,120,0.391,121,0.748,141,1.6,145,1.773,148,1.542,149,1.403,150,1.313,155,2.434,156,1.681,157,2.525,158,2.662,174,1.038,188,1.614,226,0.798,257,2.571,309,1.866,345,3.596,364,3.222,369,1.113,390,2.662,391,2.819,510,2.329,610,3.002,611,3.222,628,3.762,741,4.812,743,3.446,823,4.007,855,2.491,872,1.999,885,3.465,929,2.146,1142,4.399,1195,3.605,1340,1.877,1375,4.301,1411,3.497,1601,2.329,1744,5.842,1745,5.842,1746,2.575,1747,3.866,1748,3.866,1749,3.866,1750,3.866,1751,3.866,1752,3.866,1753,3.866,1754,4.426,1755,2.948,1756,4.426,1757,2.948,1758,3.866,1759,3.866,1760,4.426,1761,2.948,1762,5.161,1763,3.866,1764,4.426,1765,2.948,1766,5.161,1767,4.426,1768,2.948,1769,3.866,1770,3.866,1771,4.426,1772,2.948,1773,4.426,1774,2.948,1775,4.426,1776,2.948,1777,3.866,1778,4.426,1779,2.948,1780,3.866,1781,4.426,1782,2.948,1783,3.866,1784,2.948,1785,7.393,1786,2.575,1787,3.497,1788,2.575,1789,3.866,1790,2.575,1791,3.866,1792,2.575,1793,2.575,1794,2.575,1795,2.575]],["title/modules/SmsModule.html",[28,1.108,47,2.336]],["body/modules/SmsModule.html",[3,0.133,4,0.117,5,0.1,11,0.013,16,0.344,17,0.585,20,0.133,21,0.087,26,0.009,27,0.009,28,1.927,30,1.995,31,1.995,32,2.233,33,2.233,34,2.07,35,3.001,36,2.837,47,4.716,57,3.602,59,5.114,63,2.837,64,1.995,65,2.233,69,2.42,70,4.715,72,2.64,76,2.907,302,1.736,303,1.736,304,1.736,305,1.736,306,1.736,465,4.028,466,4.028,498,4.534,501,1.925,502,2.07,520,2.42,1083,5.36,1085,4.028,1104,3.71,1111,4.028,1796,4.452,1797,4.452,1798,5.097,1799,5.097,1800,3.71,1801,5.097,1802,5.097]],["title/interfaces/SmsServiceInterface.html",[476,2.223,562,1.493]],["body/interfaces/SmsServiceInterface.html",[3,0.148,4,0.13,5,0.112,7,0.389,8,1.317,11,0.012,12,0.702,14,1.361,15,0.846,20,0.181,26,0.01,27,0.01,116,0.528,148,1.406,149,1.317,150,1.232,275,1.355,339,3.161,385,3.876,476,4.062,480,2.942,498,3.623,562,2.075,564,3.089,1092,4.704,1093,4.704,1096,5.049,1098,5.049,1803,4.496,1804,5.69,1805,5.69]],["title/injectables/StripeService.html",[120,0.362,1475,2.608]],["body/injectables/StripeService.html",[3,0.078,4,0.068,5,0.059,7,0.205,8,0.85,11,0.013,12,0.721,14,1.168,15,0.81,16,0.23,17,0.343,20,0.078,21,0.051,23,1.406,24,1.207,26,0.007,27,0.007,94,1.818,116,0.485,118,1.8,120,0.396,121,0.76,142,1.335,148,1.207,149,1.21,150,1.057,155,2.098,188,1.091,195,2.553,226,1.452,246,2.351,248,1.548,272,2.277,275,1.066,276,1.38,308,1.818,309,1.262,342,1.55,345,2.218,349,3.416,369,2.526,390,1.8,480,2.692,567,1,617,2.178,686,1.483,697,1.707,739,3.314,743,2.126,749,1.906,766,2.614,791,4.704,839,1.906,844,1.906,852,2.365,853,2.365,867,1.906,868,1.906,941,2.365,942,5.478,945,2.614,1166,2.365,1246,3.904,1258,3.638,1336,3.537,1340,2.851,1374,3.259,1376,3.259,1377,4.84,1382,4.868,1385,3.911,1396,2.365,1475,2.851,1483,3.036,1486,5.567,1487,4.238,1488,4.685,1489,5.567,1490,2.614,1491,4.685,1493,4.704,1494,2.614,1495,4.685,1496,5.2,1497,4.333,1499,2.614,1501,3.911,1510,2.614,1520,3.911,1521,6.366,1522,6.738,1525,2.365,1527,3.911,1577,2.614,1593,2.614,1594,2.614,1596,2.614,1597,2.614,1613,2.614,1626,2.614,1663,2.614,1680,5.2,1700,4.685,1787,2.365,1806,2.614,1807,4.477,1808,2.993,1809,4.477,1810,4.477,1811,2.993,1812,4.477,1813,2.993,1814,4.477,1815,2.993,1816,5.364,1817,5.364,1818,4.477,1819,2.993,1820,2.993,1821,2.993,1822,2.993,1823,2.993,1824,2.993,1825,2.993,1826,4.477,1827,2.993,1828,2.993,1829,2.993,1830,2.993,1831,2.993,1832,2.993,1833,4.477,1834,2.993,1835,2.993,1836,2.993,1837,2.993,1838,2.993,1839,2.993,1840,2.993,1841,2.993,1842,2.993,1843,2.993,1844,2.993,1845,2.993,1846,2.614,1847,2.993]],["title/injectables/TwilioService.html",[59,2.608,120,0.362]],["body/injectables/TwilioService.html",[3,0.114,4,0.1,5,0.086,7,0.3,8,1.114,11,0.013,12,0.746,14,1.152,15,0.822,16,0.303,17,0.503,20,0.114,21,0.075,22,1.92,23,1.149,24,1.19,26,0.009,27,0.009,59,3.738,71,4.032,72,2.271,116,0.561,120,0.519,121,1.113,148,1.341,149,1.256,150,1.175,155,1.443,246,2.337,248,1.266,254,2.908,272,2.582,275,1.576,308,1.78,309,2.474,314,2.792,339,3.222,385,3.662,458,3.53,476,3.186,548,3.829,567,1.311,686,2.172,935,5.229,1092,3.981,1093,3.981,1094,3.191,1096,4.273,1098,4.273,1104,3.191,1113,3.191,1114,3.464,1119,3.191,1120,2.792,1848,3.829,1849,7.585,1850,5.87,1851,4.384,1852,4.384,1853,5.127,1854,4.384,1855,5.229,1856,5.127,1857,3.829,1858,5.781,1859,3.829,1860,4.384,1861,3.829,1862,3.829,1863,4.384,1864,4.384,1865,3.829,1866,3.829,1867,5.87,1868,5.87,1869,4.384,1870,4.384,1871,4.384]],["title/injectables/UniqueConstraint.html",[120,0.362,1872,3.236]],["body/injectables/UniqueConstraint.html",[3,0.106,4,0.093,5,0.08,7,0.276,8,1.055,11,0.013,12,0.692,14,1.09,15,0.793,16,0.293,17,0.464,20,0.145,21,0.108,24,1.386,26,0.008,27,0.008,56,2.409,74,1.772,112,1.92,116,0.484,120,0.491,121,1.027,148,1.126,149,1.055,150,0.987,246,2.107,248,1.833,251,2.894,272,2.162,275,1.512,276,1.246,302,2.162,303,2.162,304,2.162,305,2.162,306,2.162,315,1.772,319,2.432,323,2.743,342,2.095,480,2.099,501,2.797,502,3.007,503,2.195,504,2.754,505,2.639,520,1.92,524,2.743,559,2.879,567,1.241,660,2.575,686,2.004,689,2.944,699,3.539,743,2.639,902,2.091,974,2.432,1223,4.854,1224,4.045,1226,4.854,1227,6.626,1229,5.972,1230,4.854,1232,4.854,1233,5.402,1234,4.854,1235,4.854,1236,3.532,1237,3.532,1238,3.532,1239,3.532,1240,3.532,1241,4.854,1242,5.972,1243,4.854,1244,3.532,1245,3.532,1246,4.045,1247,3.532,1248,4.045,1249,4.391,1250,4.854,1251,3.532,1252,3.532,1872,5.017,1873,3.195,1874,5.558,1875,4.044,1876,4.044]],["title/classes/UpdateAppointmentDto.html",[21,0.07,190,2.777]],["body/classes/UpdateAppointmentDto.html",[3,0.094,4,0.083,5,0.071,7,0.247,10,2.264,11,0.012,12,0.743,15,0.801,16,0.256,20,0.094,21,0.087,26,0.008,27,0.008,116,0.582,142,2.398,150,1.428,190,3.481,202,1.009,217,2.722,269,5.431,270,1.87,279,5.003,281,4.348,283,4.348,285,4.348,287,4.348,289,4.348,342,3.806,369,2.457,431,3.736,567,1.146,593,2.248,605,2.298,777,2.646,848,1.271,850,2.627,855,3.267,858,5.854,860,3.255,861,4.055,862,3.736,863,4.055,864,4.055,865,4.055,866,4.055,867,4.548,868,4.548,869,5.644,871,4.055,872,4.844,874,3.736,875,4.055,876,4.055,877,3.736,878,4.055,880,4.055,889,4.055,892,4.055,893,2.852,894,5.14,897,2.94,899,3.989,901,5.934,902,1.188,906,4.055,910,2.627,911,2.448,914,2.852,936,3.152,1877,6.56,1878,3.609,1879,3.609,1880,3.609,1881,5.133,1882,3.609,1883,3.609,1884,3.609,1885,3.609,1886,3.609,1887,3.609,1888,3.609]],["title/classes/UpdateDocumentDto.html",[21,0.07,581,2.777]],["body/classes/UpdateDocumentDto.html",[3,0.147,4,0.129,5,0.111,7,0.386,10,1.741,11,0.012,12,0.571,16,0.32,20,0.147,21,0.117,26,0.01,27,0.01,116,0.618,142,2.059,202,1.579,270,2.926,567,1.542,581,4.683,583,2.926,605,3.597,777,2.433,848,1.99,855,2.911,897,2.703,898,3.025,902,1.86,908,4.463,909,5.801,910,4.112,911,3.831,912,4.934,913,4.934,914,4.463,916,4.934,1889,6.032,1890,6.906,1891,5.649]],["title/classes/UpdatePaymentModeDto.html",[21,0.07,1438,2.777]],["body/classes/UpdatePaymentModeDto.html",[3,0.162,4,0.142,5,0.122,11,0.012,16,0.313,20,0.162,21,0.105,26,0.011,27,0.011,94,2.965,130,2.944,202,1.733,566,3.964,848,2.184,966,3.949,967,3.949,969,4.899,1438,4.953,1440,4.899,1892,5.416,1893,7.303,1894,5.416]],["title/classes/UpdateUserDto.html",[21,0.07,1895,2.777]],["body/classes/UpdateUserDto.html",[3,0.163,4,0.143,5,0.123,11,0.012,16,0.314,20,0.163,21,0.106,26,0.011,27,0.011,130,2.96,566,3.976,848,2.196,977,3.97,979,4.925,1894,5.445,1895,4.968,1896,5.445,1897,7.326,1898,6.234,1899,6.234,1900,4.925]],["title/modules/UploadModule.html",[28,1.108,48,2.462]],["body/modules/UploadModule.html",[3,0.143,4,0.125,5,0.108,11,0.012,16,0.29,17,0.628,20,0.143,21,0.093,26,0.01,27,0.01,28,1.992,30,2.144,31,2.144,32,2.4,33,2.4,34,2.224,35,3.102,36,3.223,48,4.906,60,4.906,63,2.968,64,2.144,65,2.4,302,1.865,303,1.865,304,1.865,305,1.865,306,1.865,465,4.328,466,4.328,468,5.354,501,2.069,502,2.224,520,2.601,789,5.532,1901,4.785,1902,4.785,1903,4.785,1904,6.776,1905,5.478]],["title/injectables/UploadService.html",[60,2.462,120,0.362]],["body/injectables/UploadService.html",[3,0.077,4,0.068,5,0.105,7,0.203,8,0.843,11,0.013,12,0.735,14,1.307,15,0.813,16,0.272,17,0.34,20,0.077,21,0.05,24,1.286,26,0.006,27,0.006,60,2.672,112,1.407,116,0.526,118,1.782,120,0.393,121,0.752,148,1.351,149,1.265,150,1.183,155,1.755,226,0.802,246,2.346,248,1.539,272,2.592,275,1.692,276,1.955,302,2.269,303,2.269,304,2.269,305,2.269,306,2.269,308,2.165,309,2.675,345,2.641,369,2.014,399,1.608,480,2.684,501,2.61,502,2.577,504,2.935,505,2.812,558,2.588,567,0.992,612,4.371,637,2.341,639,1.887,686,1.468,737,1.887,743,2.531,791,4.68,792,3.511,793,3.88,794,3.88,799,2.341,800,5.29,802,3.234,803,2.341,808,2.672,809,1.782,810,2.588,822,2.588,823,2.009,829,2.588,835,2.588,836,2.341,837,2.588,838,2.588,839,3.395,841,3.615,842,3.234,843,3.234,844,3.395,845,2.588,855,1.249,1166,2.341,1200,2.588,1201,2.588,1254,3.511,1256,5.543,1743,3.881,1906,2.588,1907,5.331,1908,4.443,1909,4.443,1910,4.443,1911,4.443,1912,2.963,1913,4.443,1914,2.963,1915,4.443,1916,2.963,1917,2.963,1918,4.443,1919,2.963,1920,2.588,1921,2.963,1922,5.923,1923,5.923,1924,2.963,1925,4.443,1926,2.963,1927,2.963,1928,2.963,1929,4.443,1930,2.963,1931,2.963,1932,2.588,1933,5.331,1934,4.443,1935,2.963,1936,2.963,1937,2.963,1938,2.963,1939,2.963,1940,2.963,1941,2.963,1942,5.331,1943,2.963,1944,2.963,1945,2.963,1946,2.963,1947,2.963,1948,4.443,1949,2.963,1950,2.963,1951,2.963,1952,2.963,1953,2.963,1954,2.963,1955,2.963,1956,2.963,1957,2.963,1958,2.963,1959,2.963]],["title/controllers/UserController.html",[0,1.603,1960,2.981]],["body/controllers/UserController.html",[0,1.209,2,1.254,3,0.081,4,0.071,5,0.061,7,0.211,8,0.87,10,2.158,11,0.013,12,0.709,14,1.374,15,0.777,16,0.3,17,0.354,20,0.081,21,0.052,22,1.352,23,0.809,24,1.42,26,0.007,27,0.007,61,2.755,116,0.548,117,4.002,127,1.761,130,2.87,132,3.448,134,2.613,136,2.87,141,4.169,142,2.336,146,2.373,148,1.371,149,1.284,150,1.201,154,2.247,155,1.508,156,2.613,157,2.613,167,2.094,174,2.848,175,3.705,178,2.247,192,1.966,194,2.487,195,1.761,196,2.613,198,4.326,199,4.326,200,1.856,202,0.863,204,1.676,209,1.761,210,2.918,211,2.094,216,4.212,217,3.192,218,1.761,219,2.439,225,2.094,226,2.054,263,1.966,267,1.966,339,2.755,343,4.4,344,3.62,393,3.107,545,3.107,546,5.236,550,2.918,551,3.62,568,2.247,569,3.479,577,3.977,630,2.247,636,2.247,638,3.85,977,4.581,999,2.755,1006,2.439,1009,2.439,1050,2.094,1092,3.107,1093,3.107,1318,3.107,1434,3.107,1445,2.697,1449,2.697,1895,5.071,1900,3.62,1960,3.335,1961,2.697,1962,3.087,1963,3.087,1964,3.087,1965,3.087,1966,3.087,1967,3.087,1968,3.087,1969,3.087,1970,3.087,1971,4.582,1972,4.582,1973,4.582,1974,3.087,1975,3.087,1976,3.087,1977,3.087,1978,4.1,1979,4.582,1980,4.582,1981,3.087,1982,2.697,1983,2.697,1984,2.697,1985,3.087,1986,3.087,1987,3.087,1988,3.087,1989,3.087,1990,3.087,1991,3.087,1992,3.087,1993,3.087,1994,3.087,1995,3.087,1996,3.087,1997,3.087]],["title/modules/UserModule.html",[28,1.108,49,2.462]],["body/modules/UserModule.html",[2,2.598,3,0.13,4,0.114,5,0.099,11,0.013,16,0.343,17,0.573,20,0.13,21,0.085,26,0.009,27,0.009,28,1.91,30,1.957,31,1.957,32,2.19,33,2.19,34,2.03,35,2.974,36,2.19,45,3.961,47,4.485,49,5.06,57,3.584,58,2.589,61,4.729,63,2.803,64,1.957,65,2.19,69,3.038,75,3.184,76,2.852,87,2.108,92,3.95,469,3.95,1960,5.136,1982,4.367,1998,5,1999,5,2000,5,2001,5,2002,5,2003,5,2004,5,2005,5]],["title/injectables/UserService.html",[61,2.462,120,0.362]],["body/injectables/UserService.html",[3,0.066,4,0.058,5,0.05,7,0.174,8,0.75,11,0.013,12,0.685,14,1.285,15,0.744,16,0.298,17,0.292,20,0.066,21,0.043,23,1.434,24,1.373,26,0.006,27,0.006,56,1.927,57,2.985,58,2.156,61,2.377,74,1.114,76,1.45,87,1.072,112,1.207,114,1.619,116,0.499,120,0.349,121,0.645,130,1.877,132,3.121,134,2.255,136,2.303,146,2.513,148,1.327,149,1.243,150,1.163,155,0.837,157,1.45,174,2.656,188,1.442,192,1.619,204,1.38,209,1.45,218,3.121,226,1.883,246,2.458,248,1.141,249,1.45,251,1.802,254,3.245,255,3.124,257,2.824,263,2.517,267,2.517,271,2.681,272,1.863,275,1.656,276,2.347,296,2.633,297,1.802,299,1.724,300,2.517,302,2.368,303,2.368,304,2.368,305,2.368,306,2.368,307,3.982,308,2.749,309,2.306,320,2.009,327,1.26,331,3.124,333,2.377,334,2.221,339,1.802,341,2.878,342,1.317,343,2.878,344,2.009,385,1.317,393,1.724,399,2.633,434,2.221,475,4.237,476,2.97,498,1.619,499,2.221,500,2.221,501,2.627,502,2.824,503,2.146,504,2.403,505,2.303,520,1.877,531,3.124,538,3.124,544,4.237,546,2.878,549,2.221,550,1.619,552,1.619,553,2.221,554,2.221,555,1.851,556,2.009,559,2.048,561,4.237,593,1.114,638,1.619,707,3.289,773,1.724,846,2.009,977,3.484,999,2.377,1050,2.681,1318,1.724,1434,1.724,1538,4.237,1567,2.221,1571,3.453,1895,3.71,1900,3.124,1978,3.71,1983,2.221,1984,2.221,2006,2.221,2007,3.953,2008,3.953,2009,2.542,2010,2.542,2011,2.542,2012,2.542,2013,2.542,2014,3.953,2015,2.542,2016,2.542,2017,3.953,2018,2.542,2019,3.953,2020,4.85,2021,4.85,2022,2.542,2023,2.542,2024,2.542,2025,2.542,2026,3.953,2027,3.953]],["title/modules/ValidationModule.html",[28,1.108,50,2.608]],["body/modules/ValidationModule.html",[3,0.131,4,0.115,5,0.099,11,0.013,16,0.33,17,0.577,20,0.131,21,0.086,26,0.009,27,0.009,28,1.915,30,1.97,31,1.97,32,2.204,33,2.204,34,2.043,35,2.983,36,3.1,50,5.381,53,5.021,56,2.775,58,2.749,62,5.317,63,2.814,64,1.97,65,2.204,74,2.204,468,5.076,2028,4.395,2029,4.395,2030,5.032,2031,5.032,2032,5.032,2033,4.395,2034,5.032]],["title/injectables/ValidationService.html",[62,2.608,120,0.362]],["body/injectables/ValidationService.html",[3,0.133,4,0.116,5,0.1,7,0.348,11,0.013,12,0.654,16,0.321,17,0.742,20,0.133,21,0.11,22,2.228,23,1.962,24,1.031,26,0.009,27,0.009,53,4.75,62,4.119,112,3.554,116,0.493,120,0.571,121,1.291,148,1.031,149,0.965,150,0.903,248,1.468,275,1.211,342,3.351,566,3.511,567,1.445,660,5.03,689,3.702,743,2.415,902,1.675,1193,6.213,1195,3.449,2033,4.443,2035,4.443,2036,7.113,2037,5.086,2038,6.468,2039,7.485,2040,4.443,2041,4.443,2042,4.443,2043,5.086,2044,5.086,2045,5.086,2046,5.086,2047,5.086,2048,5.086,2049,5.086,2050,5.086,2051,5.086]],["title/classes/VerifyOtpDto.html",[21,0.07,1978,2.777]],["body/classes/VerifyOtpDto.html",[3,0.126,4,0.111,5,0.095,7,0.331,10,1.929,11,0.012,12,0.633,15,0.743,16,0.297,20,0.126,21,0.106,26,0.009,27,0.009,116,0.477,142,1.867,174,2.587,188,2.532,202,1.351,226,1.988,315,2.118,323,4.246,333,4.575,339,2.854,385,4.109,546,5.346,550,3.987,567,1.398,777,2.587,848,1.703,885,3.096,897,2.719,899,3.769,902,1.592,903,3.079,905,3.519,944,5.469,993,4.558,1059,5.803,1547,4.223,1740,5.469,1978,4.246,2052,6.066,2053,4.223,2054,5.469,2055,6.261,2056,4.835,2057,5.469,2058,6.261,2059,4.835,2060,6.261,2061,6.261,2062,6.261,2063,6.261,2064,6.261,2065,4.835,2066,4.835,2067,4.835,2068,4.835]],["title/injectables/WhatsAppService.html",[120,0.362,1800,2.981]],["body/injectables/WhatsAppService.html",[3,0.09,4,0.078,5,0.068,7,0.234,8,0.939,11,0.013,12,0.71,14,0.971,15,0.785,16,0.289,17,0.393,20,0.09,21,0.058,23,1.767,24,1.366,26,0.007,27,0.007,57,3.299,71,3.625,72,1.777,76,1.956,80,3.151,116,0.513,120,0.437,121,0.871,148,1.177,149,1.102,150,1.031,155,1.129,184,2.326,194,2.686,217,2.646,246,2.164,248,1.429,272,2.642,275,1.724,276,1.789,308,1.393,309,2.086,314,3.697,325,2.497,326,2.71,333,3.491,339,3.071,345,1.699,385,4.207,458,2.976,476,2.686,480,2.401,545,3.356,547,2.497,555,2.497,557,4.226,567,1.105,686,1.699,739,2.452,743,1.629,748,2.71,773,3.356,780,2.497,885,2.086,935,4.587,1089,6.322,1091,5.071,1092,3.356,1093,3.356,1094,2.497,1096,3.602,1098,3.602,1104,2.497,1106,2.996,1110,2.996,1113,2.497,1114,2.71,1118,2.71,1119,2.497,1120,2.184,1124,4.323,1125,2.71,1126,2.996,1127,2.996,1128,2.996,1129,2.996,1130,2.71,1131,2.996,1132,4.323,1133,4.323,1134,2.996,1135,2.996,1136,3.91,1137,2.996,1138,4.587,1139,2.996,1140,3.91,1141,4.323,1142,1.862,1143,2.996,1144,2.71,1145,2.996,1146,2.996,1147,2.996,1167,5.071,1168,2.996,1169,2.996,1170,2.996,1171,2.996,1172,2.996,1800,3.602,1853,4.323,1855,3.91,1856,4.323,1857,2.996,1858,5.071,1859,2.996,1861,2.996,1862,2.996,1865,2.996,1866,2.996,2069,2.996,2070,4.949,2071,3.43,2072,3.43,2073,3.43,2074,3.43,2075,3.43,2076,3.43,2077,3.43]],["title/coverage.html",[2078,4.429]],["body/coverage.html",[0,2.601,1,1.926,5,0.052,6,2.311,11,0.013,18,1.685,21,0.134,26,0.006,27,0.006,34,1.074,51,1.591,52,1.509,53,1.591,54,1.794,55,1.591,56,0.932,57,1.206,58,0.871,59,1.685,60,1.591,61,1.591,62,1.685,67,1.794,68,1.794,94,1.655,95,2.765,108,2.09,116,0.201,120,0.726,122,2.311,126,2.311,128,1.591,138,1.926,153,1.794,155,0.871,163,1.794,172,2.596,174,1.436,190,1.794,206,1.926,210,1.685,245,2.311,315,1.159,327,1.311,351,1.926,352,2.311,360,1.926,378,2.452,381,1.926,395,1.926,405,1.685,440,1.436,441,1.794,442,1.685,448,1.685,450,1.926,452,1.926,453,2.09,470,2.311,476,1.436,498,1.685,562,2.502,563,1.926,565,3.221,579,1.794,581,1.794,582,1.794,583,1.37,584,1.685,597,1.794,642,2.311,643,3.221,652,1.794,653,4.769,654,3.93,657,1.926,659,2.09,662,2.09,663,2.311,679,2.09,682,1.926,683,1.794,692,1.685,699,3.167,725,1.794,729,2.311,773,1.794,784,6.268,785,3.93,789,1.794,790,2.311,808,1.591,809,1.591,849,3.221,850,3.62,907,2.311,908,3.221,937,1.926,938,2.311,939,2.311,966,1.685,967,3.559,968,2.311,969,3.221,974,1.591,977,1.685,978,2.311,979,3.221,1024,2.311,1025,2.311,1045,2.311,1083,1.794,1084,2.311,1085,2.09,1086,2.311,1142,1.436,1173,2.311,1221,2.09,1222,3.221,1253,3.62,1260,1.926,1261,2.311,1262,2.311,1282,3.221,1283,3.221,1292,2.09,1301,2.311,1324,2.311,1330,2.09,1331,2.311,1332,2.311,1342,3.221,1343,3.79,1347,3.221,1352,1.926,1353,2.311,1398,1.685,1428,2.311,1438,1.794,1455,2.311,1474,1.685,1475,1.685,1483,1.794,1484,3.221,1485,2.311,1503,2.311,1516,2.311,1643,2.311,1671,2.311,1705,2.311,1730,2.311,1731,2.311,1733,2.311,1734,2.311,1742,2.311,1746,2.311,1800,1.926,1803,3.221,1806,2.311,1848,2.311,1872,2.09,1873,3.221,1877,2.311,1889,2.311,1892,2.311,1895,1.794,1896,2.311,1906,2.311,1960,1.926,1961,2.311,1978,1.794,2006,2.311,2035,2.311,2052,2.311,2053,2.311,2069,2.311,2078,2.09,2079,2.311,2080,2.311,2081,2.646,2082,7.424,2083,6.036,2084,4.077,2085,2.646,2086,4.974,2087,6.644,2088,5.588,2089,7.424,2090,5.588,2091,2.646,2092,7.519,2093,7.853,2094,3.561,2095,2.311,2096,3.561,2097,6.377,2098,2.311,2099,2.646,2100,2.646,2101,2.646,2102,2.646,2103,2.646,2104,2.646,2105,2.311,2106,2.311,2107,2.311,2108,2.311,2109,2.311,2110,2.311,2111,2.311,2112,2.646,2113,2.646,2114,2.646]],["title/dependencies.html",[31,1.93,83,2.696]],["body/dependencies.html",[11,0.013,17,0.608,21,0.113,26,0.01,27,0.01,31,2.077,72,2.748,81,3.861,82,3.861,202,1.483,270,2.748,271,3.597,378,3.19,445,3.861,456,3.861,575,5.248,576,3.861,593,2.324,675,4.633,807,4.191,883,2.748,902,1.746,1105,4.191,1269,4.633,1270,4.633,1291,3.597,1310,4.191,1377,3.19,1497,3.861,1650,4.633,1651,4.633,1693,4.633,1717,4.191,1855,4.191,2115,5.305,2116,6.642,2117,5.305,2118,5.305,2119,5.305,2120,5.305,2121,7.6,2122,5.305,2123,5.305,2124,5.305,2125,5.305,2126,5.305,2127,5.305,2128,4.633,2129,5.305,2130,5.305,2131,5.305,2132,5.305,2133,5.305,2134,5.305,2135,5.305,2136,5.305,2137,5.305,2138,5.305,2139,5.305,2140,5.305,2141,5.305,2142,5.305,2143,5.305]],["title/miscellaneous/functions.html",[2144,2.483,2145,4.306]],["body/miscellaneous/functions.html",[7,0.4,11,0.011,15,0.844,26,0.01,27,0.01,34,3.074,116,0.537,148,1.429,149,1.338,150,1.252,315,3.089,974,4.24,1222,4.619,1233,6.59,1248,5.132,1249,6.211,1258,4.782,1873,4.619,2098,5.106,2144,4.255,2145,5.106,2146,5.846,2147,5.846,2148,5.846,2149,5.846,2150,5.846]],["title/index.html",[7,0.233,2151,3.412,2152,3.412]],["body/index.html",[0,1.597,2,0.796,4,0.073,5,0.093,8,0.372,11,0.012,21,0.055,26,0.005,27,0.005,28,1.104,29,1.329,30,1.597,31,1.846,35,0.826,40,1.248,41,1.248,42,1.248,44,1.248,45,0.971,46,1.178,47,1.117,48,1.178,49,1.178,50,1.248,64,2.311,69,0.93,70,1.426,78,3.726,80,3.923,81,4.484,82,1.426,94,2.113,128,1.93,130,1.936,136,0.93,142,0.584,149,0.774,155,1.553,160,2.044,169,3.198,174,2.079,184,1.329,185,2.177,196,2.968,202,0.548,214,2.699,217,0.893,251,2.372,257,1.915,270,1.015,271,1.329,298,2.537,309,0.826,314,1.248,318,1.015,319,1.178,325,2.969,327,3.514,343,2.337,354,1.548,356,1.426,378,3.835,385,3.057,445,1.426,505,2.239,545,2.177,547,1.426,550,1.248,551,1.548,557,3.433,562,0.714,583,2.113,587,3.222,593,1.406,606,1.426,609,1.831,618,2.766,655,1.248,697,1.831,707,2.177,731,1.711,741,1.329,746,1.711,757,1.711,768,1.711,774,1.711,777,2.368,781,5.156,807,4.112,862,2.337,883,1.015,885,1.353,902,0.645,974,1.178,1105,1.548,1111,5.312,1112,6.797,1113,3.788,1115,1.711,1116,1.711,1117,1.711,1118,1.548,1119,4.296,1120,3.314,1130,1.548,1138,5.186,1142,1.063,1144,2.537,1202,1.711,1205,3.562,1248,1.426,1291,1.329,1310,1.548,1363,2.804,1366,2.804,1370,1.548,1377,3.361,1379,3.726,1416,3.562,1434,1.329,1462,1.426,1657,1.711,1658,5.571,1659,2.804,1660,1.548,1673,1.711,1717,1.548,1846,1.711,1920,4.119,1932,2.804,2040,2.804,2041,1.711,2042,1.711,2054,1.711,2057,1.711,2078,1.548,2079,5.872,2080,1.711,2128,1.711,2153,4.716,2154,5.59,2155,3.21,2156,1.959,2157,5.204,2158,5.204,2159,3.21,2160,4.078,2161,3.21,2162,3.21,2163,4.078,2164,1.959,2165,1.959,2166,3.21,2167,3.21,2168,6.722,2169,4.716,2170,5.204,2171,3.21,2172,3.21,2173,3.21,2174,4.078,2175,5.59,2176,4.078,2177,6.861,2178,1.959,2179,1.959,2180,3.21,2181,1.959,2182,1.959,2183,3.21,2184,5.204,2185,1.959,2186,6.722,2187,4.078,2188,4.716,2189,1.959,2190,1.959,2191,4.716,2192,1.959,2193,1.959,2194,4.078,2195,1.959,2196,3.21,2197,4.078,2198,4.716,2199,1.959,2200,1.959,2201,4.078,2202,3.21,2203,1.959,2204,1.959,2205,1.959,2206,1.959,2207,1.959,2208,1.959,2209,1.959,2210,1.959,2211,5.902,2212,1.959,2213,1.959,2214,1.959,2215,1.959,2216,1.959,2217,1.959,2218,3.21,2219,3.21,2220,1.959,2221,3.21,2222,1.959,2223,3.21,2224,1.959,2225,3.21,2226,3.21,2227,1.959,2228,1.959,2229,3.21,2230,4.078,2231,3.21,2232,1.959,2233,1.959,2234,3.21,2235,4.078,2236,3.21,2237,1.959,2238,1.959,2239,1.959,2240,4.078,2241,1.959,2242,1.959,2243,1.959,2244,1.959,2245,1.959,2246,1.959,2247,1.959,2248,1.959,2249,1.959,2250,1.959,2251,1.959,2252,1.959,2253,1.959,2254,1.959,2255,1.959,2256,3.21,2257,3.21,2258,1.959,2259,1.959,2260,4.716,2261,1.959,2262,1.959,2263,1.959,2264,1.959,2265,1.959,2266,1.959,2267,1.959,2268,3.21,2269,5.204,2270,3.21,2271,1.959,2272,1.959,2273,5.902,2274,1.959,2275,1.959,2276,3.21,2277,4.716,2278,3.21,2279,3.21,2280,1.959,2281,5.59,2282,1.959,2283,1.959,2284,1.959,2285,1.959,2286,4.078,2287,1.959,2288,3.21,2289,1.959,2290,1.959,2291,2.804,2292,1.959,2293,1.959,2294,1.959,2295,1.959,2296,7.489,2297,5.902,2298,1.959,2299,3.21,2300,1.959,2301,3.21,2302,1.959,2303,4.716,2304,1.959,2305,1.959,2306,1.959,2307,1.959,2308,1.959,2309,1.959,2310,1.959,2311,1.959,2312,3.21,2313,1.959,2314,4.078,2315,4.078,2316,1.959,2317,5.204,2318,1.959,2319,3.21,2320,1.959,2321,1.959,2322,3.21,2323,1.959,2324,1.959,2325,1.959,2326,4.078,2327,1.959,2328,4.078,2329,1.959,2330,1.959,2331,3.21,2332,1.959,2333,1.959,2334,1.959,2335,1.959,2336,1.959,2337,1.959,2338,1.959,2339,1.959,2340,1.959,2341,1.959,2342,1.959,2343,1.959,2344,1.959,2345,1.959,2346,1.959,2347,1.711,2348,1.959,2349,1.959,2350,1.959,2351,1.959,2352,1.959,2353,1.959,2354,1.959,2355,1.959,2356,1.959,2357,1.959,2358,3.21,2359,1.959,2360,3.21,2361,1.959,2362,1.959,2363,1.959,2364,1.959,2365,1.959,2366,1.959,2367,4.078,2368,1.959,2369,1.959,2370,1.711,2371,1.959,2372,1.959,2373,1.959,2374,1.959,2375,3.21,2376,1.959,2377,1.959,2378,1.959,2379,1.959,2380,1.959,2381,1.959,2382,1.959,2383,1.959,2384,1.959,2385,1.959,2386,1.959,2387,1.959,2388,1.959,2389,1.959,2390,1.959]],["title/modules.html",[30,2.194]],["body/modules.html",[11,0.01,26,0.01,27,0.01,29,3.831,30,2.211,40,3.597,41,3.597,42,3.597,43,3.831,44,3.597,45,2.799,46,3.397,47,3.222,48,3.397,49,3.397,50,3.597,720,4.112,2347,7.431,2391,8.507,2392,8.507,2393,8.507]],["title/overview.html",[2394,4.896]],["body/overview.html",[2,1.215,11,0.013,18,3.416,26,0.007,27,0.007,28,0.81,29,5.795,30,1.172,31,1.172,32,1.311,33,1.311,34,1.215,35,1.262,36,1.311,37,2.614,38,2.614,39,2.614,40,4.726,41,5.149,42,4.798,43,4.943,44,4.959,45,3.733,46,4.169,47,4.297,48,4.169,49,4.683,50,4.959,51,4.287,52,3.395,53,4.287,54,3.638,55,3.58,56,2.614,57,3.382,58,2.564,59,3.791,60,4.169,61,3.58,62,4.539,63,1.961,64,1.172,65,1.311,121,0.76,239,2.614,240,2.614,330,2.614,405,4.415,436,2.614,438,2.614,439,2.614,440,2.911,441,3.638,442,3.416,564,1.624,720,5.046,721,2.614,723,2.614,724,2.614,725,4.702,789,3.638,848,1.054,1083,3.638,1398,4.415,1470,2.614,1471,2.614,1472,2.614,1474,3.416,1475,3.416,1638,2.614,1640,2.614,1666,2.614,1668,2.614,1721,2.614,1796,2.614,1797,2.614,1901,2.614,1902,2.614,1903,2.614,2028,2.614,2029,2.614,2394,2.614,2395,2.993,2396,2.993,2397,2.993]],["title/properties.html",[83,2.696,567,1.101]],["body/properties.html",[11,0.012,26,0.011,27,0.011,142,1.941,567,1.454,606,4.739,2398,6.51,2399,6.51,2400,6.51,2401,6.51]],["title/miscellaneous/variables.html",[1120,3.139,2144,2.483]],["body/miscellaneous/variables.html",[7,0.193,11,0.013,15,0.726,24,1.26,26,0.006,27,0.006,56,0.995,58,0.93,94,1.147,112,1.341,116,0.498,127,2.444,128,1.698,130,3.228,136,3.106,141,1.533,145,1.698,156,1.61,157,1.61,158,2.577,174,1.51,188,1.03,210,2.729,214,1.877,226,0.764,251,1.287,254,2.566,257,2.103,309,1.19,345,3.777,364,2.055,369,1.067,390,1.698,391,1.798,425,2.231,440,1.533,447,1.798,476,1.533,498,2.729,510,2.231,569,4.329,583,1.463,593,1.237,609,1.61,610,1.915,611,2.055,619,2.055,628,2.729,644,2.466,647,2.231,652,1.915,653,3.386,654,4.092,657,3.119,658,2.466,659,3.386,660,3.681,661,2.466,679,3.386,682,3.119,683,1.915,692,2.729,743,3.62,780,3.119,785,2.231,787,2.466,788,2.466,823,2.906,855,1.806,872,1.915,885,3.214,929,2.055,1120,1.798,1195,2.906,1253,2.055,1260,3.119,1292,3.386,1294,2.466,1340,1.798,1374,3.119,1375,3.119,1411,2.231,1462,2.055,1537,2.466,1601,2.231,1660,2.231,1744,5.778,1745,5.778,1747,2.466,1748,2.466,1749,2.466,1750,2.466,1751,2.466,1752,2.466,1753,2.466,1758,2.466,1759,2.466,1762,3.743,1763,2.466,1766,3.743,1769,2.466,1770,2.466,1777,2.466,1780,2.466,1783,2.466,1786,2.466,1787,3.386,1788,2.466,1789,3.743,1790,2.466,1791,3.743,1792,2.466,1793,2.466,1794,2.466,1795,2.466,1803,2.231,2094,4.523,2095,3.743,2096,2.466,2105,2.466,2106,3.743,2107,3.743,2108,2.466,2109,3.743,2110,2.466,2111,3.743,2144,2.055,2291,2.466,2370,4.523,2402,5.781,2403,4.285,2404,2.824,2405,2.824,2406,2.824,2407,2.824,2408,4.285,2409,2.824,2410,2.824,2411,2.824,2412,4.285,2413,2.824,2414,2.824,2415,2.824,2416,2.824,2417,6.798,2418,8.469,2419,6.798,2420,6.542,2421,2.824,2422,2.824,2423,2.824,2424,2.824,2425,2.824,2426,2.824,2427,2.824,2428,4.285,2429,7.313,2430,2.824,2431,6.542,2432,2.824,2433,2.824]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":784,"title":{},"body":{"injectables/CacheService.html":{},"injectables/ExceptionService.html":{},"injectables/PaymentService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2399,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":2130,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2140,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2129,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2093,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2084,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2112,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2085,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2082,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2089,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2088,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2090,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2087,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2097,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2086,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2083,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1038,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["01t00:00:00.000z",{"_index":1039,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["04",{"_index":853,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["06",{"_index":875,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["1",{"_index":749,"title":{"classes/ParamUserIdDto-1.html":{}},"body":{"injectables/CacheService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/StripeService.html":{}}}],["1.4.5",{"_index":2136,"title":{},"body":{"dependencies.html":{}}}],["1.6.7",{"_index":2126,"title":{},"body":{"dependencies.html":{}}}],["1/7",{"_index":2104,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":333,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"classes/CreateAppointmentDto.html":{},"injectables/EvolutionApiService.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{}}}],["100",{"_index":1613,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["1000",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["1024",{"_index":1060,"title":{},"body":{"injectables/DocumentService.html":{}}}],["10})@isstring()@length(4",{"_index":2056,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["11.0.0",{"_index":2119,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":2116,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":2120,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":2121,"title":{},"body":{"dependencies.html":{}}}],["11.1.5",{"_index":2123,"title":{},"body":{"dependencies.html":{}}}],["123",{"_index":861,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["123456",{"_index":1740,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/VerifyOtpDto.html":{}}}],["123456'})@isstring()@isnotempty",{"_index":1735,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["1234567890",{"_index":928,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["1234567890ef",{"_index":2068,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["1234567890ef'})@isstring()@exists('user",{"_index":2065,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["123e4567",{"_index":1031,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["12d3",{"_index":1033,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["13",{"_index":2395,"title":{},"body":{"overview.html":{}}}],["13.3.0",{"_index":2133,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":2103,"title":{},"body":{"coverage.html":{}}}],["14155552671",{"_index":990,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["15m",{"_index":464,"title":{},"body":{"modules/AuthModule.html":{}}}],["15t14:00:00",{"_index":876,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["18.1.0",{"_index":2142,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":2397,"title":{},"body":{"overview.html":{}}}],["1hgcm82633a123456",{"_index":892,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["2",{"_index":1600,"title":{},"body":{"injectables/PaymentService.html":{}}}],["2.0.2",{"_index":2115,"title":{},"body":{"dependencies.html":{}}}],["2.6.0",{"_index":2131,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":141,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["201",{"_index":156,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["2023",{"_index":874,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/DocumentResponseDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["2025",{"_index":852,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["29",{"_index":2396,"title":{},"body":{"overview.html":{}}}],["3",{"_index":1614,"title":{},"body":{"injectables/PaymentService.html":{}}}],["3.0.1",{"_index":2118,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":2091,"title":{},"body":{"coverage.html":{}}}],["30.basil",{"_index":1597,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["3600",{"_index":745,"title":{},"body":{"injectables/CacheService.html":{}}}],["4",{"_index":1059,"title":{},"body":{"injectables/DocumentService.html":{},"injectables/PaymentService.html":{},"classes/VerifyOtpDto.html":{}}}],["4.0.1",{"_index":2138,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":2117,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2132,"title":{},"body":{"dependencies.html":{}}}],["4/8",{"_index":2102,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":158,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["401",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["403",{"_index":1786,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["404",{"_index":145,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["409",{"_index":1788,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["426614174000",{"_index":1035,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["5",{"_index":1626,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["5.1.1",{"_index":2127,"title":{},"body":{"dependencies.html":{}}}],["5.5.2",{"_index":2143,"title":{},"body":{"dependencies.html":{}}}],["5.6.1",{"_index":2134,"title":{},"body":{"dependencies.html":{}}}],["5/7",{"_index":2100,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2101,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":1787,"title":{},"body":{"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":1125,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/PaymentService.html":{},"injectables/WhatsAppService.html":{}}}],["6.6.0",{"_index":2125,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":773,"title":{},"body":{"injectables/CacheService.html":{},"injectables/EvolutionApiService.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{}}}],["7",{"_index":1721,"title":{},"body":{"injectables/RefreshTokenService.html":{},"overview.html":{}}}],["7.8.1",{"_index":2141,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":2099,"title":{},"body":{"coverage.html":{}}}],["7890",{"_index":2063,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["8",{"_index":330,"title":{},"body":{"injectables/AppointmentService.html":{},"overview.html":{}}}],["900000).tostring",{"_index":1129,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["a1b2c3d4",{"_index":2061,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["a456",{"_index":1034,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["abc123456",{"_index":880,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["abcd",{"_index":2064,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["ability",{"_index":2345,"title":{},"body":{"index.html":{}}}],["access",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/RedisService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["accessible",{"_index":2041,"title":{},"body":{"injectables/ValidationService.html":{},"index.html":{}}}],["accessing",{"_index":2340,"title":{},"body":{"index.html":{}}}],["account",{"_index":2233,"title":{},"body":{"index.html":{}}}],["account.json",{"_index":1272,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["accountsid",{"_index":1856,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["accès",{"_index":1769,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["activ",{"_index":1794,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["activate",{"_index":1980,"title":{},"body":{"controllers/UserController.html":{}}}],["actually",{"_index":1143,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["add",{"_index":2370,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["adddays",{"_index":1716,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["adddays(new",{"_index":1723,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["adding",{"_index":2366,"title":{},"body":{"index.html":{}}}],["admin",{"_index":1269,"title":{},"body":{"injectables/FirebaseAdminService.html":{},"dependencies.html":{}}}],["admin.apps.length",{"_index":1275,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["admin.auth().verifyidtoken(idtoken",{"_index":1280,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["admin.credential.cert",{"_index":1278,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["admin.initializeapp",{"_index":1276,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["admin.service",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["admin.service.ts",{"_index":1262,"title":{},"body":{"injectables/FirebaseAdminService.html":{},"coverage.html":{}}}],["admin.service.ts:18",{"_index":1267,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["admin.service.ts:8",{"_index":1265,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["admin.serviceaccount",{"_index":1279,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["admin/firebase",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"injectables/FirebaseAdminService.html":{},"coverage.html":{}}}],["administrators",{"_index":2166,"title":{},"body":{"index.html":{}}}],["adresse",{"_index":980,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ajout",{"_index":2003,"title":{},"body":{"modules/UserModule.html":{}}}],["allows",{"_index":2161,"title":{},"body":{"index.html":{}}}],["already",{"_index":319,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"injectables/PaymentService.html":{},"injectables/UniqueConstraint.html":{},"index.html":{}}}],["alreadyblacklisted",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["alternative",{"_index":2249,"title":{},"body":{"index.html":{}}}],["amount",{"_index":1493,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["amounts",{"_index":940,"title":{},"body":{"classes/CreatePaymentDto.html":{},"injectables/PaymentService.html":{}}}],["amounts.length",{"_index":1630,"title":{},"body":{"injectables/PaymentService.html":{}}}],["amounts[idx",{"_index":1632,"title":{},"body":{"injectables/PaymentService.html":{}}}],["anti",{"_index":1618,"title":{},"body":{"injectables/PaymentService.html":{}}}],["api",{"_index":1112,"title":{},"body":{"injectables/EvolutionApiService.html":{},"index.html":{}}}],["api.service",{"_index":1802,"title":{},"body":{"modules/SmsModule.html":{}}}],["api.service.ts",{"_index":1086,"title":{},"body":{"injectables/EvolutionApiService.html":{},"coverage.html":{}}}],["api.service.ts:10",{"_index":1103,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["api.service.ts:11",{"_index":1100,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["api.service.ts:12",{"_index":1102,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["api.service.ts:13",{"_index":1095,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["api.service.ts:36",{"_index":1097,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["api.service.ts:9",{"_index":1101,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["api.service.ts:91",{"_index":1099,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["api/evolution",{"_index":1085,"title":{},"body":{"injectables/EvolutionApiService.html":{},"modules/SmsModule.html":{},"coverage.html":{}}}],["api_key",{"_index":814,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["api_secret",{"_index":816,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["apibearerauth",{"_index":201,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{}}}],["apibearerauth('access",{"_index":213,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{}}}],["apibody",{"_index":577,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/UserController.html":{}}}],["apiconsumes",{"_index":578,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["apiconsumes('multipart/form",{"_index":601,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["apikey",{"_index":1087,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["apioperation",{"_index":198,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["apiparam",{"_index":1401,"title":{},"body":{"controllers/PaymentController.html":{}}}],["apiproperty",{"_index":897,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"classes/DocumentResponseDto.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/VerifyOtpDto.html":{}}}],["apiproperty({description",{"_index":944,"title":{},"body":{"classes/CreatePaymentDto.html":{},"classes/VerifyOtpDto.html":{}}}],["apiproperty({enum",{"_index":910,"title":{},"body":{"classes/CreateDocumentDto.html":{},"classes/DocumentResponseDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{}}}],["apiproperty({example",{"_index":860,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"classes/DocumentResponseDto.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["apiresponse",{"_index":199,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":200,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["apitags('appointments",{"_index":212,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["apitags('auth",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('documents",{"_index":595,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["apitags('payment",{"_index":1441,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["apitags('payments",{"_index":1402,"title":{},"body":{"controllers/PaymentController.html":{}}}],["apitags('users",{"_index":1985,"title":{},"body":{"controllers/UserController.html":{}}}],["apiversion",{"_index":1596,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["app",{"_index":2302,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":455,"title":{},"body":{"modules/AuthModule.html":{}}}],["appbuilding",{"_index":2324,"title":{},"body":{"index.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":2177,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":1160,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["applications",{"_index":2254,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["appointment",{"_index":128,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/ParamAppointmentIdDto.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["appointment'})@apiresponse({status",{"_index":140,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment.controller",{"_index":244,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["appointment.dto",{"_index":205,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["appointment.dto.ts",{"_index":850,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["appointment.dto.ts:10",{"_index":888,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:13",{"_index":926,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:14",{"_index":1885,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts:18",{"_index":896,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:19",{"_index":1884,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts:23",{"_index":891,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:24",{"_index":1879,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts:28",{"_index":882,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:29",{"_index":1880,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts:33",{"_index":933,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:34",{"_index":1878,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts:37",{"_index":873,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:38",{"_index":932,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:39",{"_index":1883,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts:43",{"_index":930,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:46",{"_index":879,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:48",{"_index":931,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:53",{"_index":927,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:54",{"_index":923,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:55",{"_index":870,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:63",{"_index":859,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:8",{"_index":922,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:9",{"_index":1886,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.id",{"_index":1555,"title":{},"body":{"injectables/PaymentService.html":{}}}],["appointment.service",{"_index":203,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{}}}],["appointment/appointment.controller",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["appointment/appointment.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["appointment/appointment.service",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["appointmentcontroller",{"_index":68,"title":{"controllers/AppointmentController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"coverage.html":{}}}],["appointmentid",{"_index":1554,"title":{},"body":{"injectables/PaymentService.html":{}}}],["appointmentids",{"_index":941,"title":{},"body":{"classes/CreatePaymentDto.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["appointmentids.length",{"_index":1631,"title":{},"body":{"injectables/PaymentService.html":{}}}],["appointmentids.map(async",{"_index":1628,"title":{},"body":{"injectables/PaymentService.html":{}}}],["appointmentmodule",{"_index":40,"title":{"modules/AppointmentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["appointments",{"_index":169,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"index.html":{}}}],["appointments'})@apiresponse({status",{"_index":168,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/PaymentController.html":{}}}],["appointments.length",{"_index":1549,"title":{},"body":{"injectables/PaymentService.html":{}}}],["appointmentservice",{"_index":51,"title":{"injectables/AppointmentService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"coverage.html":{},"overview.html":{}}}],["appointmentstatus",{"_index":269,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/PaymentService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["appointmentstatus.canceled",{"_index":312,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.confirmed",{"_index":1887,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointmentstatus.pending",{"_index":293,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/PaymentService.html":{}}}],["appropriate",{"_index":2306,"title":{},"body":{"index.html":{}}}],["approved",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["après",{"_index":1538,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["architecture",{"_index":2176,"title":{},"body":{"index.html":{}}}],["arg0",{"_index":1185,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["args",{"_index":1229,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["args.constraints",{"_index":1243,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["argument,@typescript",{"_index":1945,"title":{},"body":{"injectables/UploadService.html":{}}}],["arraynotempty",{"_index":960,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["assignment",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentService.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UserService.html":{}}}],["assignment,@typescript",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UserService.html":{}}}],["associ",{"_index":350,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["async",{"_index":246,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{}}}],["attention",{"_index":1409,"title":{},"body":{"controllers/PaymentController.html":{}}}],["aucun",{"_index":348,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["auth",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["auth)'})@apiconsumes('multipart/form",{"_index":1015,"title":{},"body":{"controllers/DocumentController.html":{}}}],["auth.controller",{"_index":451,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":454,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":1283,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":1334,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{}}}],["auth.guard.ts:14",{"_index":1287,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:23",{"_index":1289,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:6",{"_index":1333,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{}}}],["auth.service",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":453,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth/login",{"_index":2212,"title":{},"body":{"index.html":{}}}],["auth/logout",{"_index":2215,"title":{},"body":{"index.html":{}}}],["auth/optional",{"_index":1332,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{}}}],["auth/refresh",{"_index":2217,"title":{},"body":{"index.html":{}}}],["auth/request",{"_index":2218,"title":{},"body":{"index.html":{}}}],["auth/reset",{"_index":2219,"title":{},"body":{"index.html":{}}}],["authcontroller",{"_index":351,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":2213,"title":{},"body":{"index.html":{}}}],["authenticated",{"_index":589,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["authenticatedrequest",{"_index":563,"title":{"interfaces/AuthenticatedRequest.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"coverage.html":{}}}],["authentication",{"_index":2168,"title":{},"body":{"index.html":{}}}],["authentifi",{"_index":1341,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{}}}],["authguard",{"_index":1290,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1284,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["authheader",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.replace('bearer",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":41,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2401,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":2169,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":405,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtoken",{"_index":1858,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["autoris",{"_index":1783,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["autoriser",{"_index":1335,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{}}}],["available",{"_index":1659,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["avant",{"_index":1412,"title":{},"body":{"controllers/PaymentController.html":{}}}],["avec",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":276,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{}}}],["aws",{"_index":2380,"title":{},"body":{"index.html":{}}}],["axios",{"_index":1105,"title":{},"body":{"injectables/EvolutionApiService.html":{},"dependencies.html":{},"index.html":{}}}],["axios.post",{"_index":1156,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["backend",{"_index":1416,"title":{},"body":{"controllers/PaymentController.html":{},"index.html":{}}}],["backups",{"_index":2385,"title":{},"body":{"index.html":{}}}],["bad",{"_index":159,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/PaymentController.html":{}}}],["badrequest",{"_index":1747,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["badrequest(errors",{"_index":1754,"title":{},"body":{"injectables/ResponseService.html":{}}}],["badrequestexception",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('token",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{}}}],["bancaire",{"_index":971,"title":{},"body":{"classes/CreatePaymentModeDto.html":{}}}],["base",{"_index":1526,"title":{},"body":{"injectables/PaymentService.html":{}}}],["based",{"_index":2180,"title":{},"body":{"index.html":{}}}],["basedir",{"_index":1907,"title":{},"body":{"injectables/UploadService.html":{}}}],["baseurl",{"_index":1088,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["batch",{"_index":1955,"title":{},"body":{"injectables/UploadService.html":{}}}],["bcrypt",{"_index":271,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["bcrypt.compare(password",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(data.password",{"_index":2019,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(newpassword",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(temppassword",{"_index":332,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bearer",{"_index":2352,"title":{},"body":{"index.html":{}}}],["being",{"_index":2246,"title":{},"body":{"index.html":{}}}],["best",{"_index":2181,"title":{},"body":{"index.html":{}}}],["between",{"_index":2057,"title":{},"body":{"classes/VerifyOtpDto.html":{},"index.html":{}}}],["binary",{"_index":604,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["blacklist",{"_index":447,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["blacklist(token",{"_index":646,"title":{},"body":{"injectables/BlacklistTokenService.html":{}}}],["blacklisted",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["blacklistedtoken",{"_index":2423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blacklistservice",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["blacklisttokenservice",{"_index":440,"title":{"injectables/BlacklistTokenService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":194,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/EvolutionApiService.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{},"injectables/WhatsAppService.html":{}}}],["body.type",{"_index":615,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["boolean",{"_index":590,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":2393,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2347,"title":{},"body":{"index.html":{},"modules.html":{}}}],["build",{"_index":2326,"title":{},"body":{"index.html":{}}}],["building",{"_index":2252,"title":{},"body":{"index.html":{}}}],["built",{"_index":2156,"title":{},"body":{"index.html":{}}}],["business",{"_index":2240,"title":{},"body":{"index.html":{}}}],["c'est",{"_index":1541,"title":{},"body":{"injectables/PaymentService.html":{}}}],["cache",{"_index":707,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["cache.service",{"_index":727,"title":{},"body":{"modules/CacheModule.html":{}}}],["cache_evict_key",{"_index":657,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cache_evict_metadata",{"_index":658,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"miscellaneous/variables.html":{}}}],["cache_prefix_key",{"_index":679,"title":{},"body":{"injectables/CacheInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cache_prefix_metadata",{"_index":2410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cacheable",{"_index":692,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/RedisService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cacheable(key",{"_index":1676,"title":{},"body":{"injectables/RedisService.html":{}}}],["cacheable.key",{"_index":708,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["cacheable.key(params",{"_index":709,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["cacheable.ttl",{"_index":717,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["cacheable_key",{"_index":682,"title":{},"body":{"injectables/CacheInterceptor.html":{},"interfaces/CacheableOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cacheable_metadata",{"_index":787,"title":{},"body":{"interfaces/CacheableOptions.html":{},"miscellaneous/variables.html":{}}}],["cacheableoptions",{"_index":683,"title":{"interfaces/CacheableOptions.html":{}},"body":{"injectables/CacheInterceptor.html":{},"interfaces/CacheableOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cached",{"_index":712,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/RedisService.html":{}}}],["cachedvalue",{"_index":761,"title":{},"body":{"injectables/CacheService.html":{}}}],["cacheevict",{"_index":659,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cacheevictoptions",{"_index":652,"title":{"interfaces/CacheEvictOptions.html":{}},"body":{"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cacheinterceptor",{"_index":662,"title":{"injectables/CacheInterceptor.html":{}},"body":{"injectables/CacheInterceptor.html":{},"coverage.html":{}}}],["cachemodule",{"_index":720,"title":{"modules/CacheModule.html":{}},"body":{"modules/CacheModule.html":{},"modules.html":{},"overview.html":{}}}],["cacheprefix",{"_index":2095,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cacheservice",{"_index":725,"title":{"injectables/CacheService.html":{}},"body":{"modules/CacheModule.html":{},"injectables/CacheService.html":{},"coverage.html":{},"overview.html":{}}}],["caching",{"_index":2174,"title":{},"body":{"index.html":{}}}],["call",{"_index":1311,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{}}}],["call,@typescript",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/RedisService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UserService.html":{}}}],["callback",{"_index":1537,"title":{},"body":{"injectables/PaymentService.html":{},"miscellaneous/variables.html":{}}}],["callhandler",{"_index":670,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["canactivate",{"_index":1285,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["canactivate(context",{"_index":1288,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["cancel",{"_index":129,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["cancel(@param",{"_index":233,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["cancel(id",{"_index":252,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["cancel(params",{"_index":137,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["cancel.html",{"_index":1424,"title":{},"body":{"controllers/PaymentController.html":{}}}],["cancel_url",{"_index":1845,"title":{},"body":{"injectables/StripeService.html":{}}}],["canceled",{"_index":143,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["cancelurl",{"_index":1496,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["capabilities",{"_index":2189,"title":{},"body":{"index.html":{}}}],["card",{"_index":1836,"title":{},"body":{"injectables/StripeService.html":{}}}],["carte",{"_index":970,"title":{},"body":{"classes/CreatePaymentModeDto.html":{}}}],["case",{"_index":1513,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["catch",{"_index":844,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/EvolutionApiService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/PrismaService.html":{},"injectables/StripeService.html":{},"injectables/UploadService.html":{}}}],["ce",{"_index":1319,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PaymentService.html":{}}}],["centimes",{"_index":1833,"title":{},"body":{"injectables/StripeService.html":{}}}],["chambres",{"_index":1923,"title":{},"body":{"injectables/UploadService.html":{}}}],["channel",{"_index":1870,"title":{},"body":{"injectables/TwilioService.html":{}}}],["characters",{"_index":2058,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["charge",{"_index":1486,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["charge(amount",{"_index":1490,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["check",{"_index":314,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/PaymentService.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["checkout",{"_index":1522,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["checkouturl",{"_index":1576,"title":{},"body":{"injectables/PaymentService.html":{}}}],["chemin",{"_index":1273,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["chmod",{"_index":2332,"title":{},"body":{"index.html":{}}}],["choose",{"_index":1482,"title":{},"body":{"modules/PaymentModule.html":{}}}],["chouée",{"_index":847,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["ci/cd",{"_index":2376,"title":{},"body":{"index.html":{}}}],["city",{"_index":864,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["class",{"_index":21,"title":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"classes/DocumentResponseDto.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":848,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"classes/DocumentResponseDto.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{},"overview.html":{}}}],["clear",{"_index":1170,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["client",{"_index":935,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["client'})@isemail()@isnotempty",{"_index":918,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["client'})@isstring()@isnotempty",{"_index":921,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["cloud",{"_index":2262,"title":{},"body":{"index.html":{}}}],["cloud_name",{"_index":812,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary",{"_index":807,"title":{},"body":{"injectables/CloudinaryService.html":{},"dependencies.html":{},"index.html":{}}}],["cloudinary.config",{"_index":811,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary.uploader.destroy(fileid",{"_index":840,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary.uploader.upload_stream",{"_index":821,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary/cloudinary.service",{"_index":1905,"title":{},"body":{"modules/UploadModule.html":{}}}],["cloudinaryservice",{"_index":789,"title":{"injectables/CloudinaryService.html":{}},"body":{"injectables/CloudinaryService.html":{},"modules/UploadModule.html":{},"coverage.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule",{"_index":239,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_exports",{"_index":240,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_imports",{"_index":241,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["cluster_appointmentmodule_providers",{"_index":242,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["cluster_authmodule",{"_index":436,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":439,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":437,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":438,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cachemodule",{"_index":721,"title":{},"body":{"modules/CacheModule.html":{},"overview.html":{}}}],["cluster_cachemodule_exports",{"_index":723,"title":{},"body":{"modules/CacheModule.html":{},"overview.html":{}}}],["cluster_cachemodule_imports",{"_index":722,"title":{},"body":{"modules/CacheModule.html":{}}}],["cluster_cachemodule_providers",{"_index":724,"title":{},"body":{"modules/CacheModule.html":{},"overview.html":{}}}],["cluster_documentmodule",{"_index":1019,"title":{},"body":{"modules/DocumentModule.html":{}}}],["cluster_documentmodule_imports",{"_index":1020,"title":{},"body":{"modules/DocumentModule.html":{}}}],["cluster_documentmodule_providers",{"_index":1021,"title":{},"body":{"modules/DocumentModule.html":{}}}],["cluster_paymentmodemodule",{"_index":1451,"title":{},"body":{"modules/PaymentModeModule.html":{}}}],["cluster_paymentmodemodule_imports",{"_index":1452,"title":{},"body":{"modules/PaymentModeModule.html":{}}}],["cluster_paymentmodemodule_providers",{"_index":1453,"title":{},"body":{"modules/PaymentModeModule.html":{}}}],["cluster_paymentmodule",{"_index":1470,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_paymentmodule_exports",{"_index":1471,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_paymentmodule_imports",{"_index":1473,"title":{},"body":{"modules/PaymentModule.html":{}}}],["cluster_paymentmodule_providers",{"_index":1472,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1638,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1640,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1639,"title":{},"body":{"modules/PrismaModule.html":{}}}],["cluster_redismodule",{"_index":1666,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_exports",{"_index":1668,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_providers",{"_index":1667,"title":{},"body":{"modules/RedisModule.html":{}}}],["cluster_smsmodule",{"_index":1796,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_smsmodule_providers",{"_index":1797,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_uploadmodule",{"_index":1901,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_uploadmodule_exports",{"_index":1903,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_uploadmodule_providers",{"_index":1902,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1998,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_imports",{"_index":2000,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1999,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_validationmodule",{"_index":2028,"title":{},"body":{"modules/ValidationModule.html":{},"overview.html":{}}}],["cluster_validationmodule_exports",{"_index":2029,"title":{},"body":{"modules/ValidationModule.html":{},"overview.html":{}}}],["cluster_validationmodule_providers",{"_index":2030,"title":{},"body":{"modules/ValidationModule.html":{}}}],["code",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"classes/ResetPasswordDto.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/TwilioService.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["codeotp",{"_index":591,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["codes",{"_index":2227,"title":{},"body":{"index.html":{}}}],["command",{"_index":776,"title":{},"body":{"injectables/CacheService.html":{}}}],["comme",{"_index":1825,"title":{},"body":{"injectables/StripeService.html":{}}}],["commercial",{"_index":2250,"title":{},"body":{"index.html":{}}}],["common/decorator/public.decorator",{"_index":211,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/UserController.html":{}}}],["common/decorator/validators/exists.decorator",{"_index":903,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/VerifyOtpDto.html":{}}}],["common/decorator/validators/unique.decorator",{"_index":975,"title":{},"body":{"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{}}}],["communicate",{"_index":2165,"title":{},"body":{"index.html":{}}}],["communication",{"_index":2210,"title":{},"body":{"index.html":{}}}],["compose",{"_index":2297,"title":{},"body":{"index.html":{}}}],["comprehensive",{"_index":2155,"title":{},"body":{"index.html":{}}}],["compte",{"_index":1789,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["config",{"_index":458,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["config.get('jwt_expires_in",{"_index":463,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_secret",{"_index":460,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SmsModule.html":{},"index.html":{}}}],["configmodule.forroot",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["configservice.get('redis_url",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":1113,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["configured",{"_index":2305,"title":{},"body":{"index.html":{}}}],["configuring",{"_index":2386,"title":{},"body":{"index.html":{}}}],["conflict",{"_index":1748,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["conflict(message",{"_index":1756,"title":{},"body":{"injectables/ResponseService.html":{}}}],["conflictexception",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflit",{"_index":1758,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["connect",{"_index":619,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["connect/disconnect",{"_index":2425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connected",{"_index":1657,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["connection",{"_index":2312,"title":{},"body":{"index.html":{}}}],["connecté'})@apiresponse({status",{"_index":1001,"title":{},"body":{"controllers/DocumentController.html":{}}}],["connexion",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["consider",{"_index":2374,"title":{},"body":{"index.html":{}}}],["consists",{"_index":2300,"title":{},"body":{"index.html":{}}}],["console.error",{"_index":1662,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.error('error",{"_index":1164,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["console.error(`model",{"_index":1245,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["console.log",{"_index":1656,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RedisService.html":{}}}],["console.log('toutes",{"_index":1587,"title":{},"body":{"injectables/PaymentService.html":{}}}],["console.log('transaction",{"_index":1585,"title":{},"body":{"injectables/PaymentService.html":{}}}],["console.log(`cannot",{"_index":1137,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["const",{"_index":275,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{}}}],["constraints",{"_index":1252,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["constructor",{"_index":248,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{}}}],["constructor(@injectredis",{"_index":1694,"title":{},"body":{"injectables/RedisService.html":{}}}],["constructor(blacklistservice",{"_index":1286,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["constructor(config",{"_index":1094,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/JwtStrategy.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["constructor(exceptionservice",{"_index":2037,"title":{},"body":{"injectables/ValidationService.html":{}}}],["constructor(httpresponseservice",{"_index":1180,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["constructor(prisma",{"_index":249,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/DocumentService.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/CacheService.html":{},"controllers/DocumentController.html":{},"injectables/ExceptionService.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/TwilioService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["constructor(redis",{"_index":1674,"title":{},"body":{"injectables/RedisService.html":{}}}],["constructor(redisservice",{"_index":733,"title":{},"body":{"injectables/CacheService.html":{}}}],["constructor(reflector",{"_index":665,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["constructor(stripeservice",{"_index":1505,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["contain",{"_index":2357,"title":{},"body":{"index.html":{}}}],["container",{"_index":2303,"title":{},"body":{"index.html":{}}}],["containerized",{"_index":2295,"title":{},"body":{"index.html":{}}}],["containers",{"_index":2317,"title":{},"body":{"index.html":{}}}],["content",{"_index":1159,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["context",{"_index":672,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["context.getclass",{"_index":690,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":688,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/JwtAuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":695,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{},"coverage.html":{},"index.html":{}}}],["controller('appointment",{"_index":215,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["controller('auth",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('documents",{"_index":596,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["controller('payment",{"_index":1442,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["controller('payments",{"_index":1403,"title":{},"body":{"controllers/PaymentController.html":{}}}],["controller('users",{"_index":1986,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["copy",{"_index":2309,"title":{},"body":{"index.html":{}}}],["core",{"_index":2183,"title":{},"body":{"index.html":{}}}],["correct",{"_index":1274,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["correctly",{"_index":2331,"title":{},"body":{"index.html":{}}}],["cost",{"_index":2247,"title":{},"body":{"index.html":{}}}],["count",{"_index":2421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coverage",{"_index":2078,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cp",{"_index":2278,"title":{},"body":{"index.html":{}}}],["create",{"_index":130,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"injectables/RefreshTokenService.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":219,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["create(createappointmentdto",{"_index":152,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["create(createpaymentmodedto",{"_index":1430,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["create(createuserdto",{"_index":1962,"title":{},"body":{"controllers/UserController.html":{}}}],["create(data",{"_index":255,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/PaymentModeService.html":{},"injectables/UserService.html":{}}}],["create(userid",{"_index":1708,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["createappointmentdto",{"_index":153,"title":{"classes/CreateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"coverage.html":{}}}],["createasguest",{"_index":131,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["createasguest(@body",{"_index":222,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["createasguest(createguestappointmentdto",{"_index":162,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["createasguest(data",{"_index":258,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["createbadrequestexception",{"_index":1174,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createbadrequestexception(arg0",{"_index":1183,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createcheckoutsession",{"_index":1487,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["createcheckoutsession(amount",{"_index":1494,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["created",{"_index":157,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["created(data",{"_index":1760,"title":{},"body":{"injectables/ResponseService.html":{}}}],["createdat",{"_index":592,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["createdocumentdto",{"_index":579,"title":{"classes/CreateDocumentDto.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/CreateDocumentDto.html":{},"controllers/DocumentController.html":{},"coverage.html":{}}}],["createdpaymentgroup",{"_index":1624,"title":{},"body":{"injectables/PaymentService.html":{}}}],["createdpaymentgroup.id",{"_index":1635,"title":{},"body":{"injectables/PaymentService.html":{}}}],["createforbiddenexception",{"_index":1175,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createforbiddenexception(message",{"_index":1186,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createguestappointmentdto",{"_index":163,"title":{"classes/CreateGuestAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateGuestAppointmentDto.html":{},"coverage.html":{}}}],["createinternalserverexception",{"_index":1176,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createinternalserverexception(message",{"_index":1188,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createmockblacklisttokenservice",{"_index":2107,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createmockprismaservice",{"_index":2109,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createmockresponseservice",{"_index":2111,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createnotfoundexception",{"_index":1177,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createnotfoundexception(message",{"_index":1190,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createpayment",{"_index":1354,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["createpayment(@body",{"_index":1404,"title":{},"body":{"controllers/PaymentController.html":{}}}],["createpayment(dto",{"_index":1360,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["createpaymentdto",{"_index":937,"title":{"classes/CreatePaymentDto.html":{}},"body":{"classes/CreatePaymentDto.html":{},"controllers/PaymentController.html":{},"coverage.html":{}}}],["createpaymentmodedto",{"_index":966,"title":{"classes/CreatePaymentModeDto.html":{}},"body":{"classes/CreatePaymentModeDto.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"classes/UpdatePaymentModeDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":977,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createvalidationexception",{"_index":1178,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createvalidationexception(errors",{"_index":1192,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["credential",{"_index":1277,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["credentials",{"_index":2313,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":1929,"title":{},"body":{"injectables/UploadService.html":{}}}],["crypto.randombytes(8).tostring('hex",{"_index":1939,"title":{},"body":{"injectables/UploadService.html":{}}}],["création",{"_index":1567,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["crée",{"_index":1520,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["créer",{"_index":1621,"title":{},"body":{"injectables/PaymentService.html":{}}}],["créée",{"_index":1763,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["cs_",{"_index":1384,"title":{},"body":{"controllers/PaymentController.html":{}}}],["cs_test_xxx",{"_index":1385,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/StripeService.html":{}}}],["currency",{"_index":942,"title":{},"body":{"classes/CreatePaymentDto.html":{},"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["current",{"_index":2216,"title":{},"body":{"index.html":{}}}],["custom",{"_index":588,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["d'identification",{"_index":893,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["d'une",{"_index":1680,"title":{},"body":{"injectables/RedisService.html":{},"injectables/StripeService.html":{}}}],["d'upload",{"_index":1040,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["d\\'identification",{"_index":936,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["d\\'upload",{"_index":1044,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["dans",{"_index":1322,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["data",{"_index":257,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data')@apibody({schema",{"_index":1016,"title":{},"body":{"controllers/DocumentController.html":{}}}],["data.'})@apibody({type",{"_index":1367,"title":{},"body":{"controllers/PaymentController.html":{}}}],["data.email",{"_index":321,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.firstname",{"_index":336,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.issuesdate",{"_index":292,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.lastname",{"_index":338,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.location",{"_index":290,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.password",{"_index":2027,"title":{},"body":{"injectables/UserService.html":{}}}],["data.phone",{"_index":340,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.receiptnumber",{"_index":286,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.scheduledat",{"_index":288,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.titlenumber",{"_index":284,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.userid",{"_index":278,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.vehicletype",{"_index":282,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.vin",{"_index":280,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["database",{"_index":1658,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["database_connection",{"_index":1260,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":593,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/PaymentModeService.html":{},"injectables/RefreshTokenService.html":{},"classes/UpdateAppointmentDto.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":1785,"title":{},"body":{"injectables/ResponseService.html":{}}}],["date(decoded.exp",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{}}}],["days",{"_index":1718,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["de",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/ExceptionService.html":{},"classes/ParamUserIdDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"classes/UpdateAppointmentDto.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["debug",{"_index":1583,"title":{},"body":{"injectables/PaymentService.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["decoded",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoded.exp",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorator/cache/cache",{"_index":680,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["decorator/cache/cacheable.decorator",{"_index":684,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"controllers/UserController.html":{},"classes/VerifyOtpDto.html":{}}}],["default",{"_index":345,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/EvolutionApiService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/UploadService.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":1223,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["defaultmessage(args",{"_index":1226,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["define",{"_index":587,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"index.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{}}}],["defines",{"_index":2209,"title":{},"body":{"index.html":{}}}],["del",{"_index":1672,"title":{},"body":{"injectables/RedisService.html":{}}}],["del(key",{"_index":1684,"title":{},"body":{"injectables/RedisService.html":{}}}],["delete",{"_index":569,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/CacheService.html":{},"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["delete(':id",{"_index":636,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":1006,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["delete)'})@apiresponse({status",{"_index":1007,"title":{},"body":{"controllers/DocumentController.html":{}}}],["deleted",{"_index":1318,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deletedat",{"_index":296,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["deletefile",{"_index":792,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"injectables/UploadService.html":{}}}],["deletefile(fileid",{"_index":796,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["deletefile(filepath",{"_index":1254,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["deletemany",{"_index":2422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delivered",{"_index":1147,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["demander",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{}}}],["demonstration",{"_index":769,"title":{},"body":{"injectables/CacheService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployed",{"_index":2371,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":2299,"title":{},"body":{"index.html":{}}}],["deployments",{"_index":2373,"title":{},"body":{"index.html":{}}}],["des",{"_index":621,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/CreatePaymentDto.html":{},"controllers/DocumentController.html":{}}}],["description",{"_index":142,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/CacheService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/StripeService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"controllers/UserController.html":{},"classes/VerifyOtpDto.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":1379,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"index.html":{}}}],["development",{"_index":2286,"title":{},"body":{"index.html":{}}}],["devise",{"_index":952,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["devrunning",{"_index":2285,"title":{},"body":{"index.html":{}}}],["digit",{"_index":1126,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["direct",{"_index":1810,"title":{},"body":{"injectables/StripeService.html":{}}}],["directly",{"_index":2346,"title":{},"body":{"index.html":{}}}],["dirpath",{"_index":1933,"title":{},"body":{"injectables/UploadService.html":{}}}],["disable",{"_index":303,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["disabled",{"_index":1823,"title":{},"body":{"injectables/StripeService.html":{}}}],["disconnect",{"_index":2427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doc",{"_index":1068,"title":{},"body":{"injectables/DocumentService.html":{}}}],["docker",{"_index":2296,"title":{},"body":{"index.html":{}}}],["docker.sh",{"_index":2334,"title":{},"body":{"index.html":{}}}],["docker.shthis",{"_index":2336,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1073,"title":{},"body":{"injectables/DocumentService.html":{}}}],["docs.map(doc",{"_index":1076,"title":{},"body":{"injectables/DocumentService.html":{}}}],["document",{"_index":583,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/CreateDocumentDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"classes/ParamDocumentIdDto.html":{},"classes/UpdateDocumentDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["document'})@apibody({type",{"_index":1010,"title":{},"body":{"controllers/DocumentController.html":{}}}],["document'})@isnotempty()@isenum(documenttype",{"_index":912,"title":{},"body":{"classes/CreateDocumentDto.html":{},"classes/UpdateDocumentDto.html":{}}}],["document'})@isuuid()@isnotempty()@exists('document",{"_index":1348,"title":{},"body":{"classes/ParamDocumentIdDto.html":{}}}],["document.controller",{"_index":1023,"title":{},"body":{"modules/DocumentModule.html":{}}}],["document.dto",{"_index":580,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["document.dto.ts",{"_index":908,"title":{},"body":{"classes/CreateDocumentDto.html":{},"classes/UpdateDocumentDto.html":{},"coverage.html":{}}}],["document.dto.ts:13",{"_index":913,"title":{},"body":{"classes/CreateDocumentDto.html":{},"classes/UpdateDocumentDto.html":{}}}],["document.service",{"_index":573,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{}}}],["document/document.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["document/document.service",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":2079,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentcontroller",{"_index":597,"title":{"controllers/DocumentController.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"coverage.html":{}}}],["documented",{"_index":2337,"title":{},"body":{"index.html":{}}}],["documentmodule",{"_index":42,"title":{"modules/DocumentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DocumentModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["documentresponsedto",{"_index":584,"title":{"classes/DocumentResponseDto.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"coverage.html":{}}}],["documentresponsedto})@apiresponse({status",{"_index":1003,"title":{},"body":{"controllers/DocumentController.html":{}}}],["documents",{"_index":618,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"index.html":{}}}],["documentservice",{"_index":52,"title":{"injectables/DocumentService.html":{}},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"coverage.html":{},"overview.html":{}}}],["documenttype",{"_index":909,"title":{},"body":{"classes/CreateDocumentDto.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"classes/UpdateDocumentDto.html":{}}}],["documenttype.license",{"_index":915,"title":{},"body":{"classes/CreateDocumentDto.html":{},"classes/DocumentResponseDto.html":{}}}],["documenttype.receipt",{"_index":1891,"title":{},"body":{"classes/UpdateDocumentDto.html":{}}}],["doe",{"_index":924,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{}}}],["doesn't",{"_index":322,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/CacheService.html":{}}}],["double",{"_index":1619,"title":{},"body":{"injectables/PaymentService.html":{}}}],["downto",{"_index":2320,"title":{},"body":{"index.html":{}}}],["dthis",{"_index":2316,"title":{},"body":{"index.html":{}}}],["dto",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto.amounts.join",{"_index":1573,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dto.amounts.length",{"_index":1546,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dto.amounts.reduce((sum",{"_index":1562,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dto.appointmentids",{"_index":1548,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dto.appointmentids.join",{"_index":1572,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dto.appointmentids.length",{"_index":1545,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dto.code",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["dto.currency",{"_index":1568,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dto.newpassword",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto.paymentmodeid",{"_index":1558,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dto.userid",{"_index":1571,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["dto/create",{"_index":204,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/document",{"_index":585,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{}}}],["dto/login.dto",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/param",{"_index":207,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["dto/request",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/reset",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":209,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/verify",{"_index":1983,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos",{"_index":2360,"title":{},"body":{"index.html":{}}}],["du",{"_index":855,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/DocumentResponseDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["déconnexion",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["déj",{"_index":1616,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/RedisService.html":{}}}],["détail",{"_index":1533,"title":{},"body":{"injectables/PaymentService.html":{}}}],["détect",{"_index":1759,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["d’un",{"_index":633,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["d’émission",{"_index":854,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["e.g",{"_index":760,"title":{},"body":{"injectables/CacheService.html":{}}}],["e2e",{"_index":2292,"title":{},"body":{"index.html":{}}}],["e5f6",{"_index":2062,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["e89b",{"_index":1032,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["each",{"_index":782,"title":{},"body":{"injectables/CacheService.html":{},"classes/CreatePaymentDto.html":{}}}],["easy",{"_index":2298,"title":{},"body":{"index.html":{}}}],["ecs",{"_index":2381,"title":{},"body":{"index.html":{}}}],["edit",{"_index":2280,"title":{},"body":{"index.html":{}}}],["effective",{"_index":2248,"title":{},"body":{"index.html":{}}}],["email",{"_index":318,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/LoginDto.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"index.html":{}}}],["email'})@isemail()@isnotempty()@unique('user",{"_index":981,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["emitter",{"_index":1651,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{}}}],["en",{"_index":1525,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/StripeService.html":{}}}],["enableimplicitconversion",{"_index":2047,"title":{},"body":{"injectables/ValidationService.html":{}}}],["encore",{"_index":1793,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":2211,"title":{},"body":{"index.html":{}}}],["enregistr",{"_index":1620,"title":{},"body":{"injectables/PaymentService.html":{}}}],["ensuredirectory",{"_index":1908,"title":{},"body":{"injectables/UploadService.html":{}}}],["ensuredirectory(folder",{"_index":1913,"title":{},"body":{"injectables/UploadService.html":{}}}],["entities",{"_index":2201,"title":{},"body":{"index.html":{}}}],["enum",{"_index":605,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/CreateDocumentDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{}}}],["env",{"_index":2235,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":2279,"title":{},"body":{"index.html":{}}}],["environment",{"_index":1119,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["envoy",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["envrequired",{"_index":2311,"title":{},"body":{"index.html":{}}}],["erreur",{"_index":823,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":309,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/PaymentModeService.html":{},"injectables/PrismaService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["error('charge",{"_index":1822,"title":{},"body":{"injectables/StripeService.html":{}}}],["error('firebase",{"_index":1281,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["error('method",{"_index":1200,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{}}}],["error('stripe_secret_key",{"_index":1594,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["error('upload",{"_index":827,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["error(`failed",{"_index":1165,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["error(`unsupported",{"_index":1515,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["error(message",{"_index":1764,"title":{},"body":{"injectables/ResponseService.html":{}}}],["error.children",{"_index":1218,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["error.children.length",{"_index":1219,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["error.constraints",{"_index":1215,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["error.message",{"_index":1166,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/StripeService.html":{},"injectables/UploadService.html":{}}}],["error.nmessage",{"_index":1956,"title":{},"body":{"injectables/UploadService.html":{}}}],["errors",{"_index":1195,"title":{},"body":{"injectables/ExceptionService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["errors.foreach((error",{"_index":1214,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["eslint",{"_index":302,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["eslint/no",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["eslint/only",{"_index":307,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/DocumentService.html":{},"injectables/PaymentModeService.html":{},"injectables/UserService.html":{}}}],["et",{"_index":877,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"injectables/PaymentService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["etc",{"_index":1846,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["eventemitter2",{"_index":1649,"title":{},"body":{"injectables/PrismaService.html":{}}}],["evict",{"_index":694,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["evict.decorator",{"_index":685,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["evict.decorator.ts",{"_index":654,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["evict.key",{"_index":698,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["evict.key(params",{"_index":700,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["evolution",{"_index":1111,"title":{},"body":{"injectables/EvolutionApiService.html":{},"modules/SmsModule.html":{},"index.html":{}}}],["evolution_api_base_url",{"_index":1115,"title":{},"body":{"injectables/EvolutionApiService.html":{},"index.html":{}}}],["evolution_api_instance",{"_index":1116,"title":{},"body":{"injectables/EvolutionApiService.html":{},"index.html":{}}}],["evolution_api_key",{"_index":1117,"title":{},"body":{"injectables/EvolutionApiService.html":{},"index.html":{}}}],["evolutionapiservice",{"_index":1083,"title":{"injectables/EvolutionApiService.html":{}},"body":{"injectables/EvolutionApiService.html":{},"modules/SmsModule.html":{},"coverage.html":{},"overview.html":{}}}],["ex",{"_index":1700,"title":{},"body":{"injectables/RedisService.html":{},"injectables/StripeService.html":{}}}],["example",{"_index":777,"title":{},"body":{"injectables/CacheService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"classes/DocumentResponseDto.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["exception/exception.service",{"_index":2033,"title":{},"body":{"modules/ValidationModule.html":{},"injectables/ValidationService.html":{}}}],["exception/response/response.service",{"_index":2034,"title":{},"body":{"modules/ValidationModule.html":{}}}],["exceptionfactory",{"_index":2048,"title":{},"body":{"injectables/ValidationService.html":{}}}],["exceptionservice",{"_index":53,"title":{"injectables/ExceptionService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ExceptionService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"overview.html":{}}}],["executable",{"_index":2335,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":669,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["exige",{"_index":1832,"title":{},"body":{"injectables/StripeService.html":{}}}],["exist",{"_index":323,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/CacheService.html":{},"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{},"classes/VerifyOtpDto.html":{}}}],["existe",{"_index":1615,"title":{},"body":{"injectables/PaymentService.html":{}}}],["existing",{"_index":1727,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["existing.expiresat",{"_index":1729,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["existing.revoked",{"_index":1728,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["existingappointment",{"_index":316,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingpayment",{"_index":1552,"title":{},"body":{"injectables/PaymentService.html":{}}}],["exists",{"_index":315,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExistsConstraint.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"injectables/RedisService.html":{},"injectables/UniqueConstraint.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["exists('appointment",{"_index":1346,"title":{},"body":{"classes/ParamAppointmentIdDto.html":{}}}],["exists('document",{"_index":1350,"title":{},"body":{"classes/ParamDocumentIdDto.html":{}}}],["exists('user",{"_index":905,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/VerifyOtpDto.html":{}}}],["exists(key",{"_index":1686,"title":{},"body":{"injectables/RedisService.html":{}}}],["exists(model",{"_index":2149,"title":{},"body":{"miscellaneous/functions.html":{}}}],["existsconstraint",{"_index":1221,"title":{"injectables/ExistsConstraint.html":{}},"body":{"injectables/ExistsConstraint.html":{},"coverage.html":{}}}],["expect.any(string",{"_index":2429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiration",{"_index":1131,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["expiresat",{"_index":647,"title":{},"body":{"injectables/BlacklistTokenService.html":{},"injectables/RefreshTokenService.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":462,"title":{},"body":{"modules/AuthModule.html":{}}}],["explore",{"_index":2339,"title":{},"body":{"index.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["expose",{"_index":2369,"title":{},"body":{"index.html":{}}}],["express",{"_index":576,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":612,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["ext",{"_index":1937,"title":{},"body":{"injectables/UploadService.html":{}}}],["extends",{"_index":566,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PrismaService.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"injectables/ValidationService.html":{}}}],["external",{"_index":2259,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":1308,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1313,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["f",{"_index":2323,"title":{},"body":{"index.html":{}}}],["factory",{"_index":1481,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/PaymentService.html":{}}}],["failed",{"_index":1663,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/StripeService.html":{}}}],["false",{"_index":342,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/DocumentResponseDto.html":{},"injectables/ExistsConstraint.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["false})@isenum(appointmentstatus)@isoptional",{"_index":1882,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["false})@isstring()@isoptional",{"_index":869,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["famille",{"_index":996,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["famille'})@isstring()@isnotempty",{"_index":985,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["feature",{"_index":2191,"title":{},"body":{"index.html":{}}}],["features",{"_index":2167,"title":{},"body":{"index.html":{}}}],["fetcher",{"_index":736,"title":{},"body":{"injectables/CacheService.html":{},"injectables/RedisService.html":{}}}],["fichier",{"_index":841,"title":{},"body":{"injectables/CloudinaryService.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"controllers/PaymentController.html":{},"injectables/UploadService.html":{}}}],["field",{"_index":1249,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{},"miscellaneous/functions.html":{}}}],["fieldname",{"_index":1242,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"index.html":{}}}],["file.buffer",{"_index":1947,"title":{},"body":{"injectables/UploadService.html":{}}}],["file.size",{"_index":1061,"title":{},"body":{"injectables/DocumentService.html":{}}}],["fileid",{"_index":798,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["fileinterceptor",{"_index":574,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["filename",{"_index":1942,"title":{},"body":{"injectables/UploadService.html":{}}}],["filepath",{"_index":1256,"title":{},"body":{"interfaces/FileStorageService.html":{},"injectables/UploadService.html":{}}}],["files",{"_index":802,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["files.map((file",{"_index":837,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["files?.length",{"_index":835,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["filestorageservice",{"_index":808,"title":{"interfaces/FileStorageService.html":{}},"body":{"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["fileuploadresult",{"_index":809,"title":{"interfaces/FileUploadResult.html":{}},"body":{"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["fileurl",{"_index":1026,"title":{},"body":{"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{}}}],["findall",{"_index":132,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(@req",{"_index":623,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["findall(req",{"_index":1000,"title":{},"body":{"controllers/DocumentController.html":{}}}],["findall(userid",{"_index":1047,"title":{},"body":{"injectables/DocumentService.html":{}}}],["findbyuserid",{"_index":133,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyuserid(@param",{"_index":230,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findbyuserid(params",{"_index":171,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findbyuserid(userid",{"_index":261,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findfirst",{"_index":2419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findmany",{"_index":2420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findone",{"_index":134,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param",{"_index":227,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["findone(@param('id",{"_index":1445,"title":{},"body":{"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":263,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/DocumentService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(params",{"_index":177,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentController.html":{}}}],["findpendingappointmentswithoutpayment",{"_index":247,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findpendingappointmentswithoutpayment(userid",{"_index":265,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findunique",{"_index":2417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["firebase",{"_index":1270,"title":{},"body":{"injectables/FirebaseAdminService.html":{},"dependencies.html":{}}}],["firebase/firebase",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["firebaseadminservice",{"_index":54,"title":{"injectables/FirebaseAdminService.html":{}},"body":{"modules/AppModule.html":{},"injectables/FirebaseAdminService.html":{},"coverage.html":{},"overview.html":{}}}],["firstname",{"_index":335,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{}}}],["flow",{"_index":2220,"title":{},"body":{"index.html":{}}}],["fns",{"_index":1717,"title":{},"body":{"injectables/RefreshTokenService.html":{},"dependencies.html":{},"index.html":{}}}],["folder",{"_index":800,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["following",{"_index":2200,"title":{},"body":{"index.html":{}}}],["follows",{"_index":2178,"title":{},"body":{"index.html":{}}}],["fonction",{"_index":1681,"title":{},"body":{"injectables/RedisService.html":{}}}],["forbidden",{"_index":1749,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["forbidden(message",{"_index":1767,"title":{},"body":{"injectables/ResponseService.html":{}}}],["forbidnonwhitelisted",{"_index":2045,"title":{},"body":{"injectables/ValidationService.html":{}}}],["format",{"_index":603,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/EvolutionApiService.html":{}}}],["formaterrors",{"_index":1179,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["formaterrors(errors",{"_index":1196,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["formattedfromnumber",{"_index":1150,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["formattedtonumber",{"_index":1153,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["found",{"_index":146,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/JwtStrategy.html":{},"controllers/PaymentController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["found.'})@apiparam({name",{"_index":1381,"title":{},"body":{"controllers/PaymentController.html":{}}}],["fourni",{"_index":857,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"injectables/DocumentService.html":{},"injectables/JwtAuthGuard.html":{}}}],["framework",{"_index":2251,"title":{},"body":{"index.html":{}}}],["from([cached",{"_index":713,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["from(this.redisservice.get(fullkey)).pipe",{"_index":710,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["fromnumber",{"_index":1089,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["front",{"_index":1540,"title":{},"body":{"injectables/PaymentService.html":{}}}],["fs",{"_index":1927,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs.mkdir(dirpath",{"_index":1935,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs.unlink(fullpath",{"_index":1958,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs.writefile(filepath",{"_index":1946,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs/promises",{"_index":1928,"title":{},"body":{"injectables/UploadService.html":{}}}],["fullkey",{"_index":701,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["fullpath",{"_index":1957,"title":{},"body":{"injectables/UploadService.html":{}}}],["function",{"_index":699,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/ExistsConstraint.html":{},"injectables/RedisService.html":{},"injectables/UniqueConstraint.html":{},"coverage.html":{}}}],["functionality",{"_index":2365,"title":{},"body":{"index.html":{}}}],["functions",{"_index":2145,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":325,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["generatefilename",{"_index":1909,"title":{},"body":{"injectables/UploadService.html":{}}}],["generatefilename(originalname",{"_index":1915,"title":{},"body":{"injectables/UploadService.html":{}}}],["generatetoken",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken(userid",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["generation",{"_index":2267,"title":{},"body":{"index.html":{}}}],["get('/cancel",{"_index":1390,"title":{},"body":{"controllers/PaymentController.html":{}}}],["get('/success",{"_index":1394,"title":{},"body":{"controllers/PaymentController.html":{}}}],["get(':id",{"_index":225,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["get(':id')@apioperation({summary",{"_index":178,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["get(':transactionid",{"_index":1425,"title":{},"body":{"controllers/PaymentController.html":{}}}],["get(':transactionid')@apioperation({summary",{"_index":1373,"title":{},"body":{"controllers/PaymentController.html":{}}}],["get('user/:userid",{"_index":229,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/PaymentController.html":{}}}],["get('user/:userid')@apioperation({summary",{"_index":173,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/PaymentController.html":{}}}],["get('user/:userid/pending/no",{"_index":181,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get()@apioperation({summary",{"_index":167,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["get(key",{"_index":1688,"title":{},"body":{"injectables/RedisService.html":{}}}],["getalltransactions",{"_index":1355,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["getfromcontainer",{"_index":1236,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["getfromcontainer(prismaservice",{"_index":1238,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getorset",{"_index":730,"title":{},"body":{"injectables/CacheService.html":{}}}],["getorset(key",{"_index":735,"title":{},"body":{"injectables/CacheService.html":{}}}],["getpendingappointmentswithoutpayment",{"_index":135,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getpendingappointmentswithoutpayment(@param('userid",{"_index":237,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getpendingappointmentswithoutpayment(userid",{"_index":180,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getprocessor",{"_index":1504,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["getprocessor(provider",{"_index":1507,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["gets",{"_index":742,"title":{},"body":{"injectables/CacheService.html":{}}}],["getting",{"_index":2151,"title":{"index.html":{}},"body":{}}],["gettransaction",{"_index":1356,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["gettransaction(@param('transactionid",{"_index":1426,"title":{},"body":{"controllers/PaymentController.html":{}}}],["gettransaction(transactionid",{"_index":1372,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["gettransactiondetails",{"_index":1488,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["gettransactiondetails(transactionid",{"_index":1499,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["gettransactionsbyuser",{"_index":1357,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["gettransactionsbyuser(@param('userid",{"_index":1407,"title":{},"body":{"controllers/PaymentController.html":{}}}],["gettransactionsbyuser(userid",{"_index":1387,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["global",{"_index":468,"title":{},"body":{"modules/AuthModule.html":{},"modules/UploadModule.html":{},"modules/ValidationModule.html":{}}}],["group",{"_index":1363,"title":{},"body":{"controllers/PaymentController.html":{},"index.html":{}}}],["guard",{"_index":467,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["guest",{"_index":206,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateGuestAppointmentDto.html":{},"coverage.html":{}}}],["guest'})@apiresponse({status",{"_index":165,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["guidelines",{"_index":2353,"title":{},"body":{"index.html":{}}}],["handle",{"_index":2355,"title":{},"body":{"index.html":{}}}],["handlecancel",{"_index":1358,"title":{},"body":{"controllers/PaymentController.html":{}}}],["handlecancel(@res",{"_index":1423,"title":{},"body":{"controllers/PaymentController.html":{}}}],["handlecancel(res",{"_index":1389,"title":{},"body":{"controllers/PaymentController.html":{}}}],["handler",{"_index":687,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["handles",{"_index":2184,"title":{},"body":{"index.html":{}}}],["handlestripesuccess",{"_index":1517,"title":{},"body":{"injectables/PaymentService.html":{}}}],["handlestripesuccess(sessionid",{"_index":1535,"title":{},"body":{"injectables/PaymentService.html":{}}}],["handlesuccess",{"_index":1359,"title":{},"body":{"controllers/PaymentController.html":{}}}],["handlesuccess(sessionid",{"_index":1393,"title":{},"body":{"controllers/PaymentController.html":{}}}],["handling",{"_index":2243,"title":{},"body":{"index.html":{}}}],["hash",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UploadService.html":{}}}],["hashedpassword",{"_index":331,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["hashing",{"_index":2264,"title":{},"body":{"index.html":{}}}],["hash}${ext",{"_index":1940,"title":{},"body":{"injectables/UploadService.html":{}}}],["header",{"_index":2350,"title":{},"body":{"index.html":{}}}],["headers",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EvolutionApiService.html":{}}}],["hello",{"_index":124,"title":{},"body":{"injectables/AppService.html":{}}}],["heure",{"_index":878,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["hosted",{"_index":2230,"title":{},"body":{"index.html":{}}}],["hotel",{"_index":1922,"title":{},"body":{"injectables/UploadService.html":{}}}],["hour",{"_index":750,"title":{},"body":{"injectables/CacheService.html":{}}}],["http",{"_index":2356,"title":{},"body":{"index.html":{}}}],["http://localhost:3000",{"_index":2318,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/apithe",{"_index":2341,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExceptionService.html":{}}}],["httpexception(response",{"_index":1206,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpresponseservice",{"_index":1182,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["https",{"_index":2387,"title":{},"body":{"index.html":{}}}],["https://example.com/documents/file.pdf",{"_index":1029,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["httpstatus",{"_index":1198,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.bad_request",{"_index":1207,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.forbidden",{"_index":1209,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.internal_server_error",{"_index":1213,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.not_found",{"_index":1211,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["ici",{"_index":469,"title":{},"body":{"modules/AuthModule.html":{},"injectables/PaymentService.html":{},"modules/UserModule.html":{}}}],["id",{"_index":226,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/JwtStrategy.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/variables.html":{}}}],["id'})@apiresponse({status",{"_index":175,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["id.dto",{"_index":208,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["id.dto.ts",{"_index":1343,"title":{},"body":{"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"coverage.html":{}}}],["id.dto.ts:10",{"_index":1345,"title":{},"body":{"classes/ParamAppointmentIdDto.html":{},"classes/ParamUserIdDto.html":{}}}],["id.dto.ts:11",{"_index":1349,"title":{},"body":{"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto-1.html":{}}}],["identifier",{"_index":2080,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["ids",{"_index":949,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["idtoken",{"_index":1268,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["idx",{"_index":1629,"title":{},"body":{"injectables/PaymentService.html":{}}}],["ignore",{"_index":274,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreatePaymentModeDto.html":{},"injectables/PaymentProcessorFactory.html":{}}}],["image",{"_index":1920,"title":{},"body":{"injectables/UploadService.html":{},"index.html":{}}}],["images",{"_index":2244,"title":{},"body":{"index.html":{}}}],["implement",{"_index":2368,"title":{},"body":{"index.html":{}}}],["implementation",{"_index":768,"title":{},"body":{"injectables/CacheService.html":{},"index.html":{}}}],["implementations",{"_index":2415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implemented",{"_index":1201,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{}}}],["implementing",{"_index":2382,"title":{},"body":{"index.html":{}}}],["implements",{"_index":686,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/PrismaService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/WhatsAppService.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{}}}],["importes",{"_index":2005,"title":{},"body":{"modules/UserModule.html":{}}}],["imports",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["impossible",{"_index":1959,"title":{},"body":{"injectables/UploadService.html":{}}}],["inactif",{"_index":1790,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["inactiveaccount",{"_index":1750,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["inactiveaccount(userid",{"_index":1771,"title":{},"body":{"injectables/ResponseService.html":{}}}],["include",{"_index":298,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/PaymentService.html":{},"index.html":{}}}],["includes",{"_index":2199,"title":{},"body":{"index.html":{}}}],["incomplète",{"_index":1608,"title":{},"body":{"injectables/PaymentService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["individuels",{"_index":1627,"title":{},"body":{"injectables/PaymentService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{}}}],["information",{"_index":2203,"title":{},"body":{"index.html":{}}}],["inject",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DocumentService.html":{},"modules/PaymentModule.html":{},"injectables/UserService.html":{}}}],["inject('uploadservice",{"_index":1056,"title":{},"body":{"injectables/DocumentService.html":{}}}],["inject(sms_service",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":120,"title":{"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{}}}],["injectables",{"_index":121,"title":{},"body":{"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{},"overview.html":{}}}],["injecte",{"_index":1321,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["injection",{"_index":1239,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["injectredis",{"_index":1692,"title":{},"body":{"injectables/RedisService.html":{}}}],["input",{"_index":1366,"title":{},"body":{"controllers/PaymentController.html":{},"index.html":{}}}],["inspection",{"_index":2154,"title":{},"body":{"index.html":{}}}],["inspections",{"_index":2159,"title":{},"body":{"index.html":{}}}],["install",{"_index":2276,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2275,"title":{},"body":{"index.html":{}}}],["instance",{"_index":2232,"title":{},"body":{"index.html":{}}}],["instancename",{"_index":1090,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["integration",{"_index":2226,"title":{},"body":{"index.html":{}}}],["interact",{"_index":2359,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":2338,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":664,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["intercept(context",{"_index":668,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["interdit",{"_index":1770,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["interface",{"_index":562,"title":{"interfaces/AuthenticatedRequest.html":{},"interfaces/CacheEvictOptions.html":{},"interfaces/CacheableOptions.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/PaymentProcessor.html":{},"interfaces/Response.html":{},"interfaces/SmsServiceInterface.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"interfaces/CacheEvictOptions.html":{},"interfaces/CacheableOptions.html":{},"controllers/DocumentController.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/PaymentProcessor.html":{},"interfaces/Response.html":{},"interfaces/SmsServiceInterface.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":564,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"interfaces/CacheEvictOptions.html":{},"interfaces/CacheableOptions.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/PaymentProcessor.html":{},"interfaces/Response.html":{},"interfaces/SmsServiceInterface.html":{},"overview.html":{}}}],["interfaces/upload.interface",{"_index":810,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["internalerror",{"_index":1751,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["internalerror(message",{"_index":1773,"title":{},"body":{"injectables/ResponseService.html":{}}}],["interne",{"_index":1375,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["introuvable",{"_index":887,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{}}}],["invalid",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FirebaseAdminService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["invalidate",{"_index":731,"title":{},"body":{"injectables/CacheService.html":{},"index.html":{}}}],["invalidate(key",{"_index":751,"title":{},"body":{"injectables/CacheService.html":{}}}],["invalidatepattern",{"_index":732,"title":{},"body":{"injectables/CacheService.html":{}}}],["invalidatepattern(pattern",{"_index":755,"title":{},"body":{"injectables/CacheService.html":{}}}],["invalidates",{"_index":753,"title":{},"body":{"injectables/CacheService.html":{}}}],["invalide",{"_index":611,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["invalider",{"_index":2020,"title":{},"body":{"injectables/UserService.html":{}}}],["invalides",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["ioredis",{"_index":1693,"title":{},"body":{"injectables/RedisService.html":{},"dependencies.html":{}}}],["is_public_key",{"_index":1292,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":959,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["isblacklisted",{"_index":644,"title":{},"body":{"injectables/BlacklistTokenService.html":{},"miscellaneous/variables.html":{}}}],["isblacklisted(token",{"_index":649,"title":{},"body":{"injectables/BlacklistTokenService.html":{}}}],["isemail",{"_index":934,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{}}}],["isenum",{"_index":914,"title":{},"body":{"classes/CreateDocumentDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{}}}],["isenum(appointmentstatus",{"_index":1888,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["isenum(documenttype",{"_index":916,"title":{},"body":{"classes/CreateDocumentDto.html":{},"classes/UpdateDocumentDto.html":{}}}],["isglobal",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":898,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateDocumentDto.html":{}}}],["isnumber",{"_index":961,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["isoptional",{"_index":901,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isoptional()@isstring()@apiproperty({example",{"_index":851,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isphonenumber",{"_index":994,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isphoneverified",{"_index":341,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/UserService.html":{}}}],["ispublic",{"_index":1294,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":899,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/VerifyOtpDto.html":{}}}],["issuesdate",{"_index":291,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{}}}],["isuuid",{"_index":900,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{}}}],["jest.fn",{"_index":2418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn((callback",{"_index":2424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockimplementation((data",{"_index":2428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockimplementation((errors",{"_index":2430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockimplementation((message",{"_index":2431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockimplementation((userid",{"_index":2432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockimplementation(async",{"_index":2412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["john",{"_index":919,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{}}}],["john.doe@example.com",{"_index":917,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{}}}],["jour",{"_index":632,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{}}}],["json",{"_index":2256,"title":{},"body":{"index.html":{}}}],["json.parse(data",{"_index":1696,"title":{},"body":{"injectables/RedisService.html":{}}}],["json.stringify(error",{"_index":824,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["json.stringify(value",{"_index":1698,"title":{},"body":{"injectables/RedisService.html":{}}}],["jwt",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["jwtauthguard",{"_index":452,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1312,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":444,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":457,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":441,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":655,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/RedisService.html":{},"index.html":{}}}],["keys",{"_index":757,"title":{},"body":{"injectables/CacheService.html":{},"index.html":{}}}],["keys.length",{"_index":783,"title":{},"body":{"injectables/CacheService.html":{}}}],["kubernetes",{"_index":2379,"title":{},"body":{"index.html":{}}}],["l'enregistrement",{"_index":1952,"title":{},"body":{"injectables/UploadService.html":{}}}],["l'id",{"_index":1816,"title":{},"body":{"injectables/StripeService.html":{}}}],["l'ordre",{"_index":1410,"title":{},"body":{"controllers/PaymentController.html":{}}}],["l'upload",{"_index":1954,"title":{},"body":{"injectables/UploadService.html":{}}}],["l'utilisateur",{"_index":904,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{}}}],["l'utilisateur'})@isuuid()@isnotempty()@exists('user",{"_index":884,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/ParamUserIdDto.html":{}}}],["l\\'utilisateur",{"_index":622,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"classes/ParamUserIdDto.html":{}}}],["la",{"_index":1336,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["lastname",{"_index":337,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{}}}],["le",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/JwtStrategy.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["length",{"_index":1547,"title":{},"body":{"injectables/PaymentService.html":{},"classes/VerifyOtpDto.html":{}}}],["length(4",{"_index":2067,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["les",{"_index":617,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["license",{"_index":606,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"index.html":{},"properties.html":{}}}],["licensed",{"_index":2390,"title":{},"body":{"index.html":{}}}],["licenses",{"_index":2204,"title":{},"body":{"index.html":{}}}],["lieu",{"_index":866,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["line",{"_index":305,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["line_items",{"_index":1837,"title":{},"body":{"injectables/StripeService.html":{}}}],["list",{"_index":1434,"title":{},"body":{"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["liste",{"_index":620,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/CreatePaymentDto.html":{},"controllers/DocumentController.html":{},"injectables/PaymentService.html":{}}}],["lister",{"_index":616,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["literal",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/JwtStrategy.html":{}}}],["live",{"_index":747,"title":{},"body":{"injectables/CacheService.html":{}}}],["location",{"_index":289,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["log",{"_index":1584,"title":{},"body":{"injectables/PaymentService.html":{}}}],["logger",{"_index":791,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/StripeService.html":{},"injectables/UploadService.html":{}}}],["logger(cloudinaryservice.name",{"_index":805,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["logger(stripeservice.name",{"_index":1818,"title":{},"body":{"injectables/StripeService.html":{}}}],["logger(uploadservice.name",{"_index":1925,"title":{},"body":{"injectables/UploadService.html":{}}}],["logging",{"_index":2384,"title":{},"body":{"index.html":{}}}],["loggingmiddleware",{"_index":1652,"title":{},"body":{"injectables/PrismaService.html":{}}}],["logic",{"_index":2358,"title":{},"body":{"index.html":{}}}],["login",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["login(@body",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(email",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(logindto",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":360,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.password",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{}}}],["logique",{"_index":1415,"title":{},"body":{"controllers/PaymentController.html":{}}}],["logout",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@headers('authorization",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(authheader",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(token",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["logs",{"_index":2322,"title":{},"body":{"index.html":{}}}],["lors",{"_index":1951,"title":{},"body":{"injectables/UploadService.html":{}}}],["lts.2",{"_index":2137,"title":{},"body":{"dependencies.html":{}}}],["l’instant",{"_index":1528,"title":{},"body":{"injectables/PaymentService.html":{}}}],["l’utilisateur",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreatePaymentDto.html":{},"controllers/DocumentController.html":{}}}],["main",{"_index":862,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"index.html":{}}}],["mais",{"_index":1339,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentService.html":{}}}],["make",{"_index":2040,"title":{},"body":{"injectables/ValidationService.html":{},"index.html":{}}}],["management",{"_index":2170,"title":{},"body":{"index.html":{}}}],["manages",{"_index":2157,"title":{},"body":{"index.html":{}}}],["manipulation",{"_index":2266,"title":{},"body":{"index.html":{}}}],["manquante",{"_index":1607,"title":{},"body":{"injectables/PaymentService.html":{}}}],["manuelle",{"_index":1240,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["map",{"_index":2364,"title":{},"body":{"index.html":{}}}],["mapping",{"_index":1574,"title":{},"body":{"injectables/PaymentService.html":{}}}],["match",{"_index":759,"title":{},"body":{"injectables/CacheService.html":{}}}],["matches",{"_index":1169,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor(100000",{"_index":1127,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["math.random",{"_index":1128,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["math.random().tostring(36).slice",{"_index":329,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["math.round(amount",{"_index":1840,"title":{},"body":{"injectables/StripeService.html":{}}}],["maxlength",{"_index":2055,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["maxsize",{"_index":1058,"title":{},"body":{"injectables/DocumentService.html":{}}}],["media",{"_index":2242,"title":{},"body":{"index.html":{}}}],["member",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/RedisService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["memory",{"_index":2255,"title":{},"body":{"index.html":{}}}],["message",{"_index":885,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":1202,"title":{},"body":{"injectables/ExceptionService.html":{},"index.html":{}}}],["messages.push(...this.formaterrors(error.children",{"_index":1220,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["messages.push(message",{"_index":1217,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["messaging",{"_index":2261,"title":{},"body":{"index.html":{}}}],["met",{"_index":1678,"title":{},"body":{"injectables/RedisService.html":{}}}],["metadata",{"_index":1497,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"dependencies.html":{}}}],["metadata.amounts",{"_index":1606,"title":{},"body":{"injectables/PaymentService.html":{}}}],["metadata.amounts.split(',').map((n",{"_index":1610,"title":{},"body":{"injectables/PaymentService.html":{}}}],["metadata.appointmentids",{"_index":1604,"title":{},"body":{"injectables/PaymentService.html":{}}}],["metadata.appointmentids.split",{"_index":1609,"title":{},"body":{"injectables/PaymentService.html":{}}}],["metadata.paymentmodeid",{"_index":1605,"title":{},"body":{"injectables/PaymentService.html":{}}}],["metadata.userid",{"_index":1603,"title":{},"body":{"injectables/PaymentService.html":{}}}],["method",{"_index":766,"title":{},"body":{"injectables/CacheService.html":{},"injectables/StripeService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["mettre",{"_index":631,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["middleware",{"_index":2258,"title":{},"body":{"index.html":{}}}],["migrate",{"_index":2284,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":2282,"title":{},"body":{"index.html":{}}}],["min",{"_index":962,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["min(0.01",{"_index":964,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["minlength",{"_index":993,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/ResetPasswordDto.html":{},"classes/VerifyOtpDto.html":{}}}],["minlength(6",{"_index":998,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/ResetPasswordDto.html":{}}}],["minutes",{"_index":1106,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["mis",{"_index":634,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{}}}],["miscellaneous",{"_index":2144,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["misused",{"_index":703,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["mit",{"_index":2389,"title":{},"body":{"index.html":{}}}],["mo",{"_index":1065,"title":{},"body":{"injectables/DocumentService.html":{}}}],["mock",{"_index":780,"title":{},"body":{"injectables/CacheService.html":{},"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/variables.html":{}}}],["mock_sid",{"_index":1146,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["mocks",{"_index":2426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":697,"title":{},"body":{"injectables/CacheInterceptor.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"index.html":{}}}],["mode'})@apiresponse({status",{"_index":1431,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["mode.controller",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModeModule.html":{}}}],["mode.controller.ts",{"_index":1428,"title":{},"body":{"controllers/PaymentModeController.html":{},"coverage.html":{}}}],["mode.controller.ts:29",{"_index":1432,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["mode.controller.ts:36",{"_index":1435,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["mode.controller.ts:43",{"_index":1436,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["mode.controller.ts:50",{"_index":1439,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["mode.controller.ts:60",{"_index":1437,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["mode.dto",{"_index":1440,"title":{},"body":{"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"classes/UpdatePaymentModeDto.html":{}}}],["mode.dto.ts",{"_index":969,"title":{},"body":{"classes/CreatePaymentModeDto.html":{},"classes/UpdatePaymentModeDto.html":{},"coverage.html":{}}}],["mode.dto.ts:16",{"_index":973,"title":{},"body":{"classes/CreatePaymentModeDto.html":{}}}],["mode.module",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["mode.module.ts",{"_index":1454,"title":{},"body":{"modules/PaymentModeModule.html":{}}}],["mode.service",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{}}}],["mode.service.ts",{"_index":1455,"title":{},"body":{"injectables/PaymentModeService.html":{},"coverage.html":{}}}],["mode.service.ts:14",{"_index":1457,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["mode.service.ts:25",{"_index":1458,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["mode.service.ts:36",{"_index":1459,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["mode.service.ts:49",{"_index":1461,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["mode.service.ts:61",{"_index":1460,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["mode.service.ts:8",{"_index":1456,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["mode/dto/create",{"_index":968,"title":{},"body":{"classes/CreatePaymentModeDto.html":{},"coverage.html":{}}}],["mode/dto/update",{"_index":1892,"title":{},"body":{"classes/UpdatePaymentModeDto.html":{},"coverage.html":{}}}],["mode/payment",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"coverage.html":{}}}],["model",{"_index":1248,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["modelname",{"_index":1241,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["models",{"_index":1660,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["modes",{"_index":1429,"title":{},"body":{"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{}}}],["modes'})@apiresponse({status",{"_index":1433,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["modular",{"_index":2179,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["modules/ioredis",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"injectables/RedisService.html":{},"dependencies.html":{},"index.html":{}}}],["monitoring",{"_index":2383,"title":{},"body":{"index.html":{}}}],["montant/rdv",{"_index":1575,"title":{},"body":{"injectables/PaymentService.html":{}}}],["montants",{"_index":945,"title":{},"body":{"classes/CreatePaymentDto.html":{},"injectables/StripeService.html":{}}}],["more",{"_index":1550,"title":{},"body":{"injectables/PaymentService.html":{}}}],["mot",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["multer",{"_index":2135,"title":{},"body":{"dependencies.html":{}}}],["multiple",{"_index":1362,"title":{},"body":{"controllers/PaymentController.html":{}}}],["même",{"_index":1337,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{}}}],["n'est",{"_index":1792,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":149,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"classes/CreatePaymentModeDto.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["ne",{"_index":1523,"title":{},"body":{"injectables/PaymentService.html":{}}}],["nest",{"_index":2367,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":674,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["nestjs",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"injectables/RedisService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":456,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CacheInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":1650,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":445,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/mapped",{"_index":1898,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["nestjs/passport",{"_index":1291,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/platform",{"_index":575,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":202,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"controllers/UserController.html":{},"classes/VerifyOtpDto.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/websockets",{"_index":2124,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":155,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"index.html":{}}}],["newpassword",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{}}}],["newrefresh",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{}}}],["newrefresh.token",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["newsecurepassword123",{"_index":1741,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["newsecurepassword123'})@isstring()@minlength(6",{"_index":1738,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["next",{"_index":304,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["next.handle",{"_index":719,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["next.handle().pipe",{"_index":714,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["next.handle().pipe(tap",{"_index":705,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["node.js",{"_index":2271,"title":{},"body":{"index.html":{}}}],["nom",{"_index":925,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{}}}],["non",{"_index":628,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["none",{"_index":347,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["notfound",{"_index":1752,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["notfound(message",{"_index":1775,"title":{},"body":{"injectables/ResponseService.html":{}}}],["notifications",{"_index":2173,"title":{},"body":{"index.html":{}}}],["nouveau",{"_index":1890,"title":{},"body":{"classes/UpdateDocumentDto.html":{}}}],["npm",{"_index":2273,"title":{},"body":{"index.html":{}}}],["npx",{"_index":2283,"title":{},"body":{"index.html":{}}}],["null",{"_index":297,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"classes/CreateGuestAppointmentDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{}}}],["number",{"_index":739,"title":{},"body":{"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"classes/CreatePaymentDto.html":{},"classes/CreateUserDto.html":{},"injectables/EvolutionApiService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"interfaces/Response.html":{},"injectables/StripeService.html":{},"injectables/WhatsAppService.html":{}}}],["numbers",{"_index":1148,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["numéro",{"_index":872,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"injectables/ResponseService.html":{},"classes/UpdateAppointmentDto.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["object.constructor",{"_index":1251,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["object.keys(this",{"_index":1661,"title":{},"body":{"injectables/PrismaService.html":{}}}],["object.values(error.constraints).foreach((message",{"_index":1216,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["objects",{"_index":2362,"title":{},"body":{"index.html":{}}}],["observable",{"_index":673,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["obtain",{"_index":2349,"title":{},"body":{"index.html":{}}}],["official",{"_index":2239,"title":{},"body":{"index.html":{}}}],["officiel",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["ok",{"_index":830,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["old",{"_index":2223,"title":{},"body":{"index.html":{}}}],["oldtoken",{"_index":1712,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["one",{"_index":1361,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["onmoduledestroy",{"_index":1645,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":1263,"title":{},"body":{"injectables/FirebaseAdminService.html":{},"injectables/PrismaService.html":{}}}],["open",{"_index":2236,"title":{},"body":{"index.html":{}}}],["operations",{"_index":2185,"title":{},"body":{"index.html":{}}}],["optional",{"_index":150,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/functions.html":{}}}],["optionaljwtauthguard",{"_index":1330,"title":{"injectables/OptionalJwtAuthGuard.html":{}},"body":{"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{}}}],["options",{"_index":660,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"interfaces/CacheableOptions.html":{},"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["opération",{"_index":1780,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["orchestration",{"_index":2378,"title":{},"body":{"index.html":{}}}],["originalname",{"_index":1917,"title":{},"body":{"injectables/UploadService.html":{}}}],["orm",{"_index":2187,"title":{},"body":{"index.html":{}}}],["otp",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{}}}],["otp')@apioperation({summary",{"_index":1972,"title":{},"body":{"controllers/UserController.html":{}}}],["otp.dto",{"_index":1984,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["otp.dto.ts",{"_index":2053,"title":{},"body":{"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["otp.dto.ts:14",{"_index":2059,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["otp.dto.ts:22",{"_index":2066,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["otp:${phone",{"_index":1133,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["otp_expiration_time",{"_index":1091,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["ou",{"_index":1376,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/StripeService.html":{}}}],["out",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["overview",{"_index":2394,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p.id",{"_index":1589,"title":{},"body":{"injectables/PaymentService.html":{}}}],["p.transactionid",{"_index":1590,"title":{},"body":{"injectables/PaymentService.html":{}}}],["package",{"_index":83,"title":{"dependencies.html":{},"properties.html":{}},"body":{"modules/AppModule.html":{}}}],["paid",{"_index":1551,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paiement",{"_index":349,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["paiement'})@isstring()@isnotempty()@unique('paymentmode",{"_index":972,"title":{},"body":{"classes/CreatePaymentModeDto.html":{}}}],["paiements",{"_index":1531,"title":{},"body":{"injectables/PaymentService.html":{}}}],["par",{"_index":626,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/CreatePaymentDto.html":{},"controllers/DocumentController.html":{},"injectables/PaymentService.html":{}}}],["param",{"_index":195,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/CacheService.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/StripeService.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":1447,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["paramappointmentiddto",{"_index":138,"title":{"classes/ParamAppointmentIdDto.html":{}},"body":{"controllers/AppointmentController.html":{},"classes/ParamAppointmentIdDto.html":{},"coverage.html":{}}}],["paramdocumentiddto",{"_index":582,"title":{"classes/ParamDocumentIdDto.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"classes/ParamDocumentIdDto.html":{},"coverage.html":{}}}],["parameters",{"_index":148,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":151,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"interfaces/CacheableOptions.html":{},"controllers/DocumentController.html":{}}}],["paramuseriddto",{"_index":172,"title":{"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{}},"body":{"controllers/AppointmentController.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"coverage.html":{}}}],["parsefloat(n",{"_index":1611,"title":{},"body":{"injectables/PaymentService.html":{}}}],["parseint",{"_index":1719,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["partialtype",{"_index":1894,"title":{},"body":{"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createpaymentmodedto",{"_index":1893,"title":{},"body":{"classes/UpdatePaymentModeDto.html":{}}}],["partialtype(createuserdto",{"_index":1897,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pas",{"_index":1340,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"miscellaneous/variables.html":{}}}],["passe",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["passe'})@apiresponse({status",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{}}}],["passport",{"_index":1310,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportstrategy",{"_index":1307,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1302,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passthrough",{"_index":718,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["password",{"_index":327,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/LoginDto.html":{},"classes/RequestPasswordResetDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["password')@apioperation({summary",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.dto",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.dto.ts",{"_index":1734,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:13",{"_index":1736,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:18",{"_index":1739,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:8",{"_index":1737,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["patch",{"_index":568,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":630,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":1009,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["path",{"_index":1743,"title":{},"body":{"interfaces/Response.html":{},"injectables/UploadService.html":{}}}],["path.extname(originalname",{"_index":1938,"title":{},"body":{"injectables/UploadService.html":{}}}],["path.join(dirpath",{"_index":1944,"title":{},"body":{"injectables/UploadService.html":{}}}],["path.join(folder",{"_index":1949,"title":{},"body":{"injectables/UploadService.html":{}}}],["path.join(this.basedir",{"_index":1934,"title":{},"body":{"injectables/UploadService.html":{}}}],["pattern",{"_index":758,"title":{},"body":{"injectables/CacheService.html":{}}}],["payer",{"_index":963,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["payer'})@isarray()@arraynotempty()@isstring({each",{"_index":950,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["payload",{"_index":1306,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1315,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payment",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"classes/UpdatePaymentModeDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["payment')@apioperation({summary",{"_index":182,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["payment.controller",{"_index":1478,"title":{},"body":{"modules/PaymentModule.html":{}}}],["payment.dto",{"_index":1400,"title":{},"body":{"controllers/PaymentController.html":{}}}],["payment.dto.ts",{"_index":939,"title":{},"body":{"classes/CreatePaymentDto.html":{},"coverage.html":{}}}],["payment.dto.ts:15",{"_index":958,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["payment.dto.ts:21",{"_index":951,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["payment.dto.ts:29",{"_index":957,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["payment.dto.ts:36",{"_index":948,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["payment.dto.ts:41",{"_index":955,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["payment.service",{"_index":1399,"title":{},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{}}}],["payment/payment.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["payment_intent",{"_index":1826,"title":{},"body":{"injectables/StripeService.html":{}}}],["payment_method_types",{"_index":1835,"title":{},"body":{"injectables/StripeService.html":{}}}],["paymentcontroller",{"_index":1352,"title":{"controllers/PaymentController.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"coverage.html":{}}}],["paymentdetails",{"_index":1491,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["paymentgroup",{"_index":1543,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentgroupid",{"_index":1634,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentgroupwithpayments",{"_index":1637,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentintent",{"_index":1817,"title":{},"body":{"injectables/StripeService.html":{}}}],["paymentmode",{"_index":1462,"title":{},"body":{"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["paymentmode.deletedat",{"_index":1559,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentmodecontroller",{"_index":67,"title":{"controllers/PaymentModeController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"coverage.html":{}}}],["paymentmodeid",{"_index":943,"title":{},"body":{"classes/CreatePaymentDto.html":{},"injectables/PaymentService.html":{}}}],["paymentmodemodule",{"_index":43,"title":{"modules/PaymentModeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModeModule.html":{},"modules.html":{},"overview.html":{}}}],["paymentmodes",{"_index":1464,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["paymentmodeservice",{"_index":55,"title":{"injectables/PaymentModeService.html":{}},"body":{"modules/AppModule.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"coverage.html":{},"overview.html":{}}}],["paymentmodule",{"_index":44,"title":{"modules/PaymentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["paymentprocessor",{"_index":1483,"title":{"interfaces/PaymentProcessor.html":{}},"body":{"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/StripeService.html":{},"coverage.html":{}}}],["paymentprocessorfactory",{"_index":1474,"title":{"injectables/PaymentProcessorFactory.html":{}},"body":{"modules/PaymentModule.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"overview.html":{}}}],["payments",{"_index":185,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"index.html":{}}}],["payments.map(p",{"_index":1588,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentservice",{"_index":1398,"title":{"injectables/PaymentService.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"overview.html":{}}}],["paymentstatus",{"_index":1544,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentstatus.paid",{"_index":1556,"title":{},"body":{"injectables/PaymentService.html":{}}}],["pending",{"_index":183,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/PaymentService.html":{}}}],["persistent",{"_index":2307,"title":{},"body":{"index.html":{}}}],["perso",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["phone",{"_index":339,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"injectables/EvolutionApiService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/TwilioService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{}}}],["phone'})@apiresponse({status",{"_index":1973,"title":{},"body":{"controllers/UserController.html":{}}}],["phone.startswith",{"_index":1154,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["phone.substring(1",{"_index":1155,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["pipeline",{"_index":2377,"title":{},"body":{"index.html":{}}}],["please",{"_index":1114,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["post",{"_index":196,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["post(':id/send",{"_index":1971,"title":{},"body":{"controllers/UserController.html":{}}}],["post('guest",{"_index":221,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["post('login",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@apioperation({summary",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('request",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('upload",{"_index":598,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["post('upload')@useinterceptors(undefined)@apioperation({summary",{"_index":1014,"title":{},"body":{"controllers/DocumentController.html":{}}}],["post('verify",{"_index":1979,"title":{},"body":{"controllers/UserController.html":{}}}],["post()@apioperation({summary",{"_index":154,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["postgres",{"_index":2304,"title":{},"body":{"index.html":{}}}],["postgresql",{"_index":2198,"title":{},"body":{"index.html":{}}}],["pour",{"_index":1527,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["practices",{"_index":2182,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":127,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/CacheInterceptor.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["prefix.decorator",{"_index":681,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["prefix.decorator.ts",{"_index":2094,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["prefix}:${key",{"_index":702,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["prerequisites",{"_index":2270,"title":{},"body":{"index.html":{}}}],["present",{"_index":1149,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["price_data",{"_index":1838,"title":{},"body":{"injectables/StripeService.html":{}}}],["prisma",{"_index":251,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/DocumentService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/RefreshTokenService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["prisma.middleware",{"_index":1653,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prisma.service",{"_index":1642,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":270,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateDocumentDto.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"dependencies.html":{},"index.html":{}}}],["prisma/prisma.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/UserModule.html":{}}}],["prisma/prisma.service",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/RefreshTokenService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{}}}],["prismaclient",{"_index":1644,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":45,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":56,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/RefreshTokenService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["private",{"_index":272,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{}}}],["process.cwd",{"_index":1422,"title":{},"body":{"controllers/PaymentController.html":{}}}],["process.env.cloudinary_api_key",{"_index":815,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.cloudinary_api_secret",{"_index":817,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.cloudinary_cloud_name",{"_index":813,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.stripe_cancel_url",{"_index":1570,"title":{},"body":{"injectables/PaymentService.html":{}}}],["process.env.stripe_secret_key",{"_index":1593,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["process.env.stripe_success_url",{"_index":1569,"title":{},"body":{"injectables/PaymentService.html":{}}}],["process.env.upload_dir",{"_index":1931,"title":{},"body":{"injectables/UploadService.html":{}}}],["process.exit(1",{"_index":1664,"title":{},"body":{"injectables/PrismaService.html":{}}}],["processed",{"_index":1364,"title":{},"body":{"controllers/PaymentController.html":{}}}],["processes",{"_index":2195,"title":{},"body":{"index.html":{}}}],["processing",{"_index":2172,"title":{},"body":{"index.html":{}}}],["processor",{"_index":1480,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/PaymentService.html":{}}}],["processor.createcheckoutsession",{"_index":1565,"title":{},"body":{"injectables/PaymentService.html":{}}}],["processor.factory",{"_index":1479,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/PaymentService.html":{}}}],["processor.factory.ts",{"_index":1503,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{},"coverage.html":{}}}],["processor.factory.ts:6",{"_index":1506,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["processor.factory.ts:9",{"_index":1508,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["processor.interface",{"_index":1510,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{},"injectables/StripeService.html":{}}}],["processor.interface.ts",{"_index":1485,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"coverage.html":{}}}],["processor.interface.ts:10",{"_index":1500,"title":{},"body":{"interfaces/PaymentProcessor.html":{}}}],["processor.interface.ts:12",{"_index":1498,"title":{},"body":{"interfaces/PaymentProcessor.html":{}}}],["processor.interface.ts:2",{"_index":1492,"title":{},"body":{"interfaces/PaymentProcessor.html":{}}}],["processor.interface.ts:8",{"_index":1502,"title":{},"body":{"interfaces/PaymentProcessor.html":{}}}],["product_data",{"_index":1841,"title":{},"body":{"injectables/StripeService.html":{}}}],["production",{"_index":2288,"title":{},"body":{"index.html":{}}}],["profiles",{"_index":2193,"title":{},"body":{"index.html":{}}}],["project",{"_index":2268,"title":{},"body":{"index.html":{}}}],["promise",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"interfaces/PaymentProcessor.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/WhatsAppService.html":{}}}],["promise((resolve",{"_index":818,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["promise.all",{"_index":836,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/PaymentService.html":{},"injectables/UploadService.html":{}}}],["promise.resolve",{"_index":2413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise.resolve(false",{"_index":2414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promises",{"_index":704,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["proper",{"_index":2234,"title":{},"body":{"index.html":{}}}],["properties",{"_index":567,"title":{"properties.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"interfaces/CacheEvictOptions.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileUploadResult.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"injectables/UploadService.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"properties.html":{}}}],["propertyname",{"_index":1250,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["propriétaire",{"_index":1042,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["protected",{"_index":2348,"title":{},"body":{"index.html":{}}}],["provide",{"_index":465,"title":{},"body":{"modules/AuthModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{}}}],["provided",{"_index":2329,"title":{},"body":{"index.html":{}}}],["provider",{"_index":1509,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["provider.tolowercase",{"_index":1512,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":2188,"title":{},"body":{"index.html":{}}}],["prénom",{"_index":920,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{}}}],["prénom'})@isstring()@isnotempty",{"_index":983,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["présent",{"_index":1683,"title":{},"body":{"injectables/RedisService.html":{}}}],["public",{"_index":210,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/PaymentController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('guest')@apioperation({summary",{"_index":164,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["public()@post('login')@apioperation({summary",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('refresh')@apioperation({summary",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('request",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('reset",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{}}}],["purposes",{"_index":770,"title":{},"body":{"injectables/CacheService.html":{}}}],["put",{"_index":197,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["put(':id",{"_index":235,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["put(':id')@apioperation({summary",{"_index":191,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["put(':id/cancel",{"_index":232,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["put(':id/cancel')@apioperation({summary",{"_index":139,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["qr",{"_index":2245,"title":{},"body":{"index.html":{}}}],["qu'on",{"_index":1542,"title":{},"body":{"injectables/PaymentService.html":{}}}],["quantity",{"_index":1842,"title":{},"body":{"injectables/StripeService.html":{}}}],["que",{"_index":1320,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["query",{"_index":1397,"title":{},"body":{"controllers/PaymentController.html":{}}}],["query('session_id",{"_index":1413,"title":{},"body":{"controllers/PaymentController.html":{}}}],["rafraîchi",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["rafraîchir",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{}}}],["random",{"_index":326,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{}}}],["real",{"_index":774,"title":{},"body":{"injectables/CacheService.html":{},"index.html":{}}}],["rec123456",{"_index":871,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["receipt",{"_index":608,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["receiptnumber",{"_index":285,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["receipts",{"_index":2206,"title":{},"body":{"index.html":{}}}],["receive",{"_index":2238,"title":{},"body":{"index.html":{}}}],["receiving",{"_index":2241,"title":{},"body":{"index.html":{}}}],["recharge",{"_index":1636,"title":{},"body":{"injectables/PaymentService.html":{}}}],["recherche",{"_index":1580,"title":{},"body":{"injectables/PaymentService.html":{}}}],["recherchée",{"_index":1586,"title":{},"body":{"injectables/PaymentService.html":{}}}],["record",{"_index":1246,"title":{},"body":{"injectables/ExistsConstraint.html":{},"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{}}}],["records",{"_index":2208,"title":{},"body":{"index.html":{}}}],["recursive",{"_index":1936,"title":{},"body":{"injectables/UploadService.html":{}}}],["redirection",{"_index":1539,"title":{},"body":{"injectables/PaymentService.html":{}}}],["redis",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/CacheService.html":{},"injectables/EvolutionApiService.html":{},"injectables/RedisService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["redis.service",{"_index":1670,"title":{},"body":{"modules/RedisModule.html":{}}}],["redis/redis.module",{"_index":728,"title":{},"body":{"modules/CacheModule.html":{}}}],["redis/redis.service",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/EvolutionApiService.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{}}}],["rediskey",{"_index":1132,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["redismodule",{"_index":46,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CacheModule.html":{},"modules/RedisModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["redismodule.forrootasync",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["redisservice",{"_index":57,"title":{"injectables/RedisService.html":{}},"body":{"modules/AppModule.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/EvolutionApiService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"overview.html":{}}}],["reflect",{"_index":2139,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":666,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/JwtAuthGuard.html":{}}}],["refresh",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["refresh(@body",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(body",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(refreshtoken",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken",{"_index":425,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["refreshtokenservice",{"_index":442,"title":{"injectables/RefreshTokenService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenService.html":{},"coverage.html":{},"overview.html":{}}}],["refund",{"_index":1489,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["refund(transactionid",{"_index":1501,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["refund.status",{"_index":1828,"title":{},"body":{"injectables/StripeService.html":{}}}],["register",{"_index":2162,"title":{},"body":{"index.html":{}}}],["registerdecorator",{"_index":1232,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["registration",{"_index":2192,"title":{},"body":{"index.html":{}}}],["reject",{"_index":819,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["reject(error",{"_index":825,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["reject(new",{"_index":826,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["rejected",{"_index":1172,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["related",{"_index":2163,"title":{},"body":{"index.html":{}}}],["relation",{"_index":1623,"title":{},"body":{"injectables/PaymentService.html":{}}}],["relativepath",{"_index":1948,"title":{},"body":{"injectables/UploadService.html":{}}}],["rely",{"_index":779,"title":{},"body":{"injectables/CacheService.html":{}}}],["remove",{"_index":999,"title":{},"body":{"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param",{"_index":640,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["remove(@param('id",{"_index":1449,"title":{},"body":{"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":1050,"title":{},"body":{"injectables/DocumentService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(params",{"_index":1005,"title":{},"body":{"controllers/DocumentController.html":{}}}],["rendez",{"_index":867,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/ParamAppointmentIdDto.html":{},"injectables/StripeService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["req",{"_index":572,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["req.headers.authorization?.replace('bearer",{"_index":1296,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["req.user",{"_index":1323,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["req.user.id",{"_index":613,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["request",{"_index":160,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/CacheInterceptor.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"index.html":{}}}],["request.params",{"_index":696,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["request/response",{"_index":2363,"title":{},"body":{"index.html":{}}}],["requestpasswordreset",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["requestpasswordreset(@body",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestpasswordreset(dto",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestpasswordreset(email",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["requestpasswordresetdto",{"_index":381,"title":{"classes/RequestPasswordResetDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RequestPasswordResetDto.html":{},"coverage.html":{}}}],["requests",{"_index":2221,"title":{},"body":{"index.html":{}}}],["requests:example",{"_index":2351,"title":{},"body":{"index.html":{}}}],["required",{"_index":858,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/DocumentResponseDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["requirements",{"_index":2344,"title":{},"body":{"index.html":{}}}],["requires",{"_index":2228,"title":{},"body":{"index.html":{}}}],["requête",{"_index":610,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":1392,"title":{},"body":{"controllers/PaymentController.html":{}}}],["res.sendfile('payment",{"_index":1419,"title":{},"body":{"controllers/PaymentController.html":{}}}],["reset",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"index.html":{},"overview.html":{}}}],["reset')@apioperation({summary",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset.dto",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset.dto.ts",{"_index":1731,"title":{},"body":{"classes/RequestPasswordResetDto.html":{},"coverage.html":{}}}],["reset.dto.ts:8",{"_index":1732,"title":{},"body":{"classes/RequestPasswordResetDto.html":{}}}],["resetpassword",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(@body",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(dto",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(email",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassworddto",{"_index":395,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["resolve",{"_index":832,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["resources",{"_index":2388,"title":{},"body":{"index.html":{}}}],["response",{"_index":1142,"title":{"interfaces/Response.html":{}},"body":{"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"controllers/PaymentController.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"index.html":{}}}],["response.data?.key?.id",{"_index":1161,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["response.data?.status",{"_index":1163,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["response.dto",{"_index":586,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{}}}],["response.dto.ts",{"_index":1025,"title":{},"body":{"classes/DocumentResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:15",{"_index":1043,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["response.dto.ts:22",{"_index":1037,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["response.dto.ts:28",{"_index":1030,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["response.dto.ts:34",{"_index":1041,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["response.dto.ts:41",{"_index":1028,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["response.dto.ts:9",{"_index":1036,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["response.interface",{"_index":1784,"title":{},"body":{"injectables/ResponseService.html":{}}}],["response/response.service",{"_index":1199,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["responsedto",{"_index":1071,"title":{},"body":{"injectables/DocumentService.html":{}}}],["responsedtos",{"_index":1075,"title":{},"body":{"injectables/DocumentService.html":{}}}],["responses",{"_index":2190,"title":{},"body":{"index.html":{}}}],["responseservice",{"_index":58,"title":{"injectables/ResponseService.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"injectables/ExceptionService.html":{},"injectables/JwtAuthGuard.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["ressource",{"_index":1762,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["rest",{"_index":2237,"title":{},"body":{"index.html":{}}}],["result",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{}}}],["result.public_id",{"_index":831,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["result.secure_url",{"_index":833,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["result.status",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retourne",{"_index":1622,"title":{},"body":{"injectables/PaymentService.html":{}}}],["retrieved",{"_index":300,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["retrieved.'})@apiresponse({status",{"_index":1380,"title":{},"body":{"controllers/PaymentController.html":{}}}],["retrouvés",{"_index":1078,"title":{},"body":{"injectables/DocumentService.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":186,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{}}}],["reçu",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["reçu'})@apiresponse({status",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{}}}],["rien",{"_index":1524,"title":{},"body":{"injectables/PaymentService.html":{}}}],["root",{"_index":1421,"title":{},"body":{"controllers/PaymentController.html":{}}}],["rotate",{"_index":1706,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["rotate(oldtoken",{"_index":1710,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["run",{"_index":2281,"title":{},"body":{"index.html":{}}}],["running",{"_index":2314,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":675,"title":{},"body":{"injectables/CacheInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":678,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["récupère",{"_index":1682,"title":{},"body":{"injectables/RedisService.html":{}}}],["récupération",{"_index":1814,"title":{},"body":{"injectables/StripeService.html":{}}}],["récupérer",{"_index":625,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/PaymentService.html":{}}}],["réinitialis",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{}}}],["réinitialisation",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{}}}],["réinitialiser",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{}}}],["résultat",{"_index":1679,"title":{},"body":{"injectables/RedisService.html":{}}}],["réussie",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["salvage",{"_index":2153,"title":{},"body":{"index.html":{}}}],["same",{"_index":1136,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/PaymentService.html":{},"injectables/WhatsAppService.html":{}}}],["sans",{"_index":1338,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentService.html":{}}}],["scan",{"_index":775,"title":{},"body":{"injectables/CacheService.html":{}}}],["scan:${pattern",{"_index":772,"title":{},"body":{"injectables/CacheService.html":{}}}],["schedule",{"_index":2164,"title":{},"body":{"index.html":{}}}],["scheduledat",{"_index":287,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["scheduling",{"_index":2171,"title":{},"body":{"index.html":{}}}],["schema",{"_index":602,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["schemas",{"_index":2343,"title":{},"body":{"index.html":{}}}],["script",{"_index":2328,"title":{},"body":{"index.html":{}}}],["seconds",{"_index":748,"title":{},"body":{"injectables/CacheService.html":{},"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["secret",{"_index":459,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretkey",{"_index":1592,"title":{},"body":{"injectables/PaymentService.html":{}}}],["secretorkey",{"_index":1314,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["self",{"_index":2229,"title":{},"body":{"index.html":{}}}],["send",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"controllers/UserController.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["sender",{"_index":1139,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["sending",{"_index":1144,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["sendotp",{"_index":1092,"title":{},"body":{"injectables/EvolutionApiService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/TwilioService.html":{},"controllers/UserController.html":{},"injectables/WhatsAppService.html":{}}}],["sendotp(@param('id",{"_index":1994,"title":{},"body":{"controllers/UserController.html":{}}}],["sendotp(id",{"_index":1970,"title":{},"body":{"controllers/UserController.html":{}}}],["sendotp(phone",{"_index":1096,"title":{},"body":{"injectables/EvolutionApiService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["sendphoneverificationotp",{"_index":2007,"title":{},"body":{"injectables/UserService.html":{}}}],["sendphoneverificationotp(userid",{"_index":2014,"title":{},"body":{"injectables/UserService.html":{}}}],["sends",{"_index":2196,"title":{},"body":{"index.html":{}}}],["sent",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["separately",{"_index":2327,"title":{},"body":{"index.html":{}}}],["serialized",{"_index":1697,"title":{},"body":{"injectables/RedisService.html":{}}}],["sert",{"_index":1417,"title":{},"body":{"controllers/PaymentController.html":{}}}],["server",{"_index":2231,"title":{},"body":{"index.html":{}}}],["serveur",{"_index":1766,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/FirebaseAdminService.html":{},"index.html":{}}}],["serviceaccount",{"_index":1271,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["services",{"_index":2260,"title":{},"body":{"index.html":{}}}],["services(this.servicesid",{"_index":1868,"title":{},"body":{"injectables/TwilioService.html":{}}}],["servicesid",{"_index":1849,"title":{},"body":{"injectables/TwilioService.html":{}}}],["session",{"_index":1521,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["session.id",{"_index":1847,"title":{},"body":{"injectables/StripeService.html":{}}}],["session.url",{"_index":1577,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["session_id",{"_index":1383,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["session_id)'})@apiresponse({status",{"_index":1378,"title":{},"body":{"controllers/PaymentController.html":{}}}],["sessionid",{"_index":1396,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["set",{"_index":1673,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["set(key",{"_index":1690,"title":{},"body":{"injectables/RedisService.html":{}}}],["setmetadata",{"_index":656,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"interfaces/CacheableOptions.html":{}}}],["setmetadata(cache_evict_key",{"_index":661,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"miscellaneous/variables.html":{}}}],["setmetadata(cache_prefix_key",{"_index":2411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(cacheable_key",{"_index":788,"title":{},"body":{"interfaces/CacheableOptions.html":{},"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":2433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":744,"title":{},"body":{"injectables/CacheService.html":{}}}],["setting",{"_index":2375,"title":{},"body":{"index.html":{}}}],["setup",{"_index":2269,"title":{},"body":{"index.html":{}}}],["si",{"_index":856,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/DocumentResponseDto.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{}}}],["sid",{"_index":1145,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["side",{"_index":2253,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":461,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{}}}],["simple'})@apiresponse({status",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["simplified",{"_index":767,"title":{},"body":{"injectables/CacheService.html":{}}}],["single",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{}}}],["sinon",{"_index":1581,"title":{},"body":{"injectables/PaymentService.html":{}}}],["sms",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TwilioService.html":{}}}],["sms.interface",{"_index":1104,"title":{},"body":{"injectables/EvolutionApiService.html":{},"modules/SmsModule.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["sms/sms.interface",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["sms/sms.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["sms/twilio/twilio.service",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["sms_service",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{},"modules/SmsModule.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["smsmodule",{"_index":47,"title":{"modules/SmsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["smsservice",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["smsserviceinterface",{"_index":476,"title":{"interfaces/SmsServiceInterface.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/TwilioService.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["socket.io",{"_index":2122,"title":{},"body":{"dependencies.html":{}}}],["soft",{"_index":638,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["specific",{"_index":754,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/.../blacklist",{"_index":2404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cache",{"_index":2402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cacheable.decorator.ts",{"_index":2403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exists.decorator.ts",{"_index":2147,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2146,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../prisma.mock.ts",{"_index":2405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":2408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../response.mock.ts",{"_index":2406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sms.interface.ts",{"_index":2409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../unique.decorator.ts",{"_index":2148,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../upload.interface.ts",{"_index":2407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":122,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":123,"title":{},"body":{"injectables/AppService.html":{}}}],["src/appointment/appointment.controller.ts",{"_index":126,"title":{},"body":{"controllers/AppointmentController.html":{},"coverage.html":{}}}],["src/appointment/appointment.controller.ts:26",{"_index":161,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/appointment/appointment.controller.ts:35",{"_index":166,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/appointment/appointment.controller.ts:42",{"_index":170,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/appointment/appointment.controller.ts:50",{"_index":179,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/appointment/appointment.controller.ts:57",{"_index":176,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/appointment/appointment.controller.ts:65",{"_index":147,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/appointment/appointment.controller.ts:73",{"_index":193,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/appointment/appointment.controller.ts:87",{"_index":187,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/appointment/appointment.module.ts",{"_index":243,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["src/appointment/appointment.service.ts",{"_index":245,"title":{},"body":{"injectables/AppointmentService.html":{},"coverage.html":{}}}],["src/appointment/appointment.service.ts:11",{"_index":250,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/appointment.service.ts:119",{"_index":259,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/appointment.service.ts:164",{"_index":266,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/appointment.service.ts:17",{"_index":256,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/appointment.service.ts:41",{"_index":260,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/appointment.service.ts:53",{"_index":264,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/appointment.service.ts:70",{"_index":262,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/appointment.service.ts:85",{"_index":253,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/appointment.service.ts:94",{"_index":268,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/dto/create",{"_index":849,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"coverage.html":{}}}],["src/appointment/dto/param",{"_index":1342,"title":{},"body":{"classes/ParamAppointmentIdDto.html":{},"classes/ParamUserIdDto.html":{},"coverage.html":{}}}],["src/appointment/dto/update",{"_index":1877,"title":{},"body":{"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:24",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:30",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:48",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:59",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":443,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:118",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:122",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:143",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:31",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:47",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:69",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:94",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/blacklist",{"_index":642,"title":{},"body":{"injectables/BlacklistTokenService.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":1324,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:13",{"_index":1328,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:8",{"_index":1326,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/request",{"_index":1730,"title":{},"body":{"classes/RequestPasswordResetDto.html":{},"coverage.html":{}}}],["src/auth/dto/reset",{"_index":1733,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":1282,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/optional",{"_index":1331,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/refresh",{"_index":1705,"title":{},"body":{"injectables/RefreshTokenService.html":{},"coverage.html":{}}}],["src/cache/cache.module.ts",{"_index":726,"title":{},"body":{"modules/CacheModule.html":{}}}],["src/cache/cache.service.ts",{"_index":729,"title":{},"body":{"injectables/CacheService.html":{},"coverage.html":{}}}],["src/cache/cache.service.ts:15",{"_index":740,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/cache/cache.service.ts:34",{"_index":752,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/cache/cache.service.ts:42",{"_index":756,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/cache/cache.service.ts:5",{"_index":734,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/common/decorator/cache/cache",{"_index":653,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorator/cache/cacheable.decorator.ts",{"_index":785,"title":{},"body":{"interfaces/CacheableOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorator/public.decorator.ts",{"_index":2096,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorator/validators/exists.decorator.ts",{"_index":1222,"title":{},"body":{"injectables/ExistsConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorator/validators/exists.decorator.ts:15",{"_index":1225,"title":{},"body":{"injectables/ExistsConstraint.html":{}}}],["src/common/decorator/validators/exists.decorator.ts:21",{"_index":1231,"title":{},"body":{"injectables/ExistsConstraint.html":{}}}],["src/common/decorator/validators/exists.decorator.ts:38",{"_index":1228,"title":{},"body":{"injectables/ExistsConstraint.html":{}}}],["src/common/decorator/validators/unique.decorator.ts",{"_index":1873,"title":{},"body":{"injectables/UniqueConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorator/validators/unique.decorator.ts:15",{"_index":1874,"title":{},"body":{"injectables/UniqueConstraint.html":{}}}],["src/common/decorator/validators/unique.decorator.ts:21",{"_index":1876,"title":{},"body":{"injectables/UniqueConstraint.html":{}}}],["src/common/decorator/validators/unique.decorator.ts:38",{"_index":1875,"title":{},"body":{"injectables/UniqueConstraint.html":{}}}],["src/common/interceptor/cache.interceptor.ts",{"_index":663,"title":{},"body":{"injectables/CacheInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptor/cache.interceptor.ts:22",{"_index":667,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["src/common/interceptor/cache.interceptor.ts:28",{"_index":671,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["src/document/document.controller.ts",{"_index":565,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"coverage.html":{}}}],["src/document/document.controller.ts:103",{"_index":1004,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/document/document.controller.ts:116",{"_index":1012,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/document/document.controller.ts:131",{"_index":1008,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/document/document.controller.ts:74",{"_index":1018,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/document/document.controller.ts:90",{"_index":1002,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/document/document.module.ts",{"_index":1022,"title":{},"body":{"modules/DocumentModule.html":{}}}],["src/document/document.service.ts",{"_index":1045,"title":{},"body":{"injectables/DocumentService.html":{},"coverage.html":{}}}],["src/document/document.service.ts:13",{"_index":1046,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/document/document.service.ts:21",{"_index":1054,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/document/document.service.ts:54",{"_index":1048,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/document/document.service.ts:66",{"_index":1049,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/document/document.service.ts:80",{"_index":1052,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/document/document.service.ts:93",{"_index":1051,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/document/dto/create",{"_index":907,"title":{},"body":{"classes/CreateDocumentDto.html":{},"coverage.html":{}}}],["src/document/dto/document",{"_index":1024,"title":{},"body":{"classes/DocumentResponseDto.html":{},"coverage.html":{}}}],["src/document/dto/param",{"_index":1347,"title":{},"body":{"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"coverage.html":{}}}],["src/document/dto/update",{"_index":1889,"title":{},"body":{"classes/UpdateDocumentDto.html":{},"coverage.html":{}}}],["src/firebase/firebase",{"_index":1261,"title":{},"body":{"injectables/FirebaseAdminService.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":2098,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/payment",{"_index":967,"title":{},"body":{"classes/CreatePaymentModeDto.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"classes/UpdatePaymentModeDto.html":{},"coverage.html":{}}}],["src/payment/dto/create",{"_index":938,"title":{},"body":{"classes/CreatePaymentDto.html":{},"coverage.html":{}}}],["src/payment/payment",{"_index":1484,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"coverage.html":{}}}],["src/payment/payment.controller.ts",{"_index":1353,"title":{},"body":{"controllers/PaymentController.html":{},"coverage.html":{}}}],["src/payment/payment.controller.ts:32",{"_index":1368,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/payment/payment.controller.ts:42",{"_index":1371,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/payment/payment.controller.ts:58",{"_index":1388,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/payment/payment.controller.ts:64",{"_index":1395,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/payment/payment.controller.ts:74",{"_index":1391,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/payment/payment.controller.ts:92",{"_index":1386,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/payment/payment.module.ts",{"_index":1476,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/payment/payment.service.ts",{"_index":1516,"title":{},"body":{"injectables/PaymentService.html":{},"coverage.html":{}}}],["src/payment/payment.service.ts:105",{"_index":1529,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/payment/payment.service.ts:120",{"_index":1534,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/payment/payment.service.ts:135",{"_index":1532,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/payment/payment.service.ts:171",{"_index":1536,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/payment/payment.service.ts:20",{"_index":1519,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/payment/payment.service.ts:9",{"_index":1518,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/payment/stripe/stripe.service.ts",{"_index":1806,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/payment/stripe/stripe.service.ts:22",{"_index":1808,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/payment/stripe/stripe.service.ts:37",{"_index":1815,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/payment/stripe/stripe.service.ts:54",{"_index":1813,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/payment/stripe/stripe.service.ts:63",{"_index":1811,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/payment/stripe/stripe.service.ts:7",{"_index":1819,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/payment/stripe/stripe.service.ts:8",{"_index":1807,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/prisma/prisma.module.ts",{"_index":1641,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service.ts",{"_index":1643,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:10",{"_index":1646,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:18",{"_index":1648,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:30",{"_index":1647,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/redis/redis.module.ts",{"_index":1669,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/redis/redis.service.ts",{"_index":1671,"title":{},"body":{"injectables/RedisService.html":{},"coverage.html":{}}}],["src/redis/redis.service.ts:10",{"_index":1689,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:18",{"_index":1691,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:30",{"_index":1685,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:36",{"_index":1687,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:45",{"_index":1677,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:6",{"_index":1675,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/sms/evolution",{"_index":1084,"title":{},"body":{"injectables/EvolutionApiService.html":{},"coverage.html":{}}}],["src/sms/sms.interface.ts",{"_index":1803,"title":{},"body":{"interfaces/SmsServiceInterface.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/sms/sms.interface.ts:2",{"_index":1804,"title":{},"body":{"interfaces/SmsServiceInterface.html":{}}}],["src/sms/sms.interface.ts:3",{"_index":1805,"title":{},"body":{"interfaces/SmsServiceInterface.html":{}}}],["src/sms/sms.module.ts",{"_index":1798,"title":{},"body":{"modules/SmsModule.html":{}}}],["src/sms/twilio/twilio.service.ts",{"_index":1848,"title":{},"body":{"injectables/TwilioService.html":{},"coverage.html":{}}}],["src/sms/twilio/twilio.service.ts:26",{"_index":1851,"title":{},"body":{"injectables/TwilioService.html":{}}}],["src/sms/twilio/twilio.service.ts:32",{"_index":1852,"title":{},"body":{"injectables/TwilioService.html":{}}}],["src/sms/twilio/twilio.service.ts:8",{"_index":1854,"title":{},"body":{"injectables/TwilioService.html":{}}}],["src/sms/twilio/twilio.service.ts:9",{"_index":1850,"title":{},"body":{"injectables/TwilioService.html":{}}}],["src/sms/whatsapp/whatsapp.service.ts",{"_index":2069,"title":{},"body":{"injectables/WhatsAppService.html":{},"coverage.html":{}}}],["src/sms/whatsapp/whatsapp.service.ts:10",{"_index":2074,"title":{},"body":{"injectables/WhatsAppService.html":{}}}],["src/sms/whatsapp/whatsapp.service.ts:11",{"_index":2070,"title":{},"body":{"injectables/WhatsAppService.html":{}}}],["src/sms/whatsapp/whatsapp.service.ts:31",{"_index":2071,"title":{},"body":{"injectables/WhatsAppService.html":{}}}],["src/sms/whatsapp/whatsapp.service.ts:58",{"_index":2072,"title":{},"body":{"injectables/WhatsAppService.html":{}}}],["src/sms/whatsapp/whatsapp.service.ts:9",{"_index":2073,"title":{},"body":{"injectables/WhatsAppService.html":{}}}],["src/test/mocks/blacklist",{"_index":2105,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test/mocks/prisma.mock.ts",{"_index":2108,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test/mocks/response.mock.ts",{"_index":2110,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/upload/cloudinary/cloudinary.service.ts",{"_index":790,"title":{},"body":{"injectables/CloudinaryService.html":{},"coverage.html":{}}}],["src/upload/cloudinary/cloudinary.service.ts:10",{"_index":795,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/upload/cloudinary/cloudinary.service.ts:21",{"_index":804,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/upload/cloudinary/cloudinary.service.ts:45",{"_index":801,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/upload/cloudinary/cloudinary.service.ts:55",{"_index":797,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/upload/interfaces/upload.interface.ts",{"_index":1253,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/upload/interfaces/upload.interface.ts:13",{"_index":1257,"title":{},"body":{"interfaces/FileStorageService.html":{}}}],["src/upload/interfaces/upload.interface.ts:18",{"_index":1255,"title":{},"body":{"interfaces/FileStorageService.html":{}}}],["src/upload/interfaces/upload.interface.ts:8",{"_index":1259,"title":{},"body":{"interfaces/FileStorageService.html":{}}}],["src/upload/upload.module.ts",{"_index":1904,"title":{},"body":{"modules/UploadModule.html":{}}}],["src/upload/upload.service.ts",{"_index":1906,"title":{},"body":{"injectables/UploadService.html":{},"coverage.html":{}}}],["src/upload/upload.service.ts:15",{"_index":1919,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:18",{"_index":1926,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:19",{"_index":1911,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:25",{"_index":1914,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:31",{"_index":1916,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:37",{"_index":1924,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:64",{"_index":1921,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:80",{"_index":1912,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/user/dto/create",{"_index":978,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":1896,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/verify",{"_index":2052,"title":{},"body":{"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":1961,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:32",{"_index":1965,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:39",{"_index":1967,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:46",{"_index":1968,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:54",{"_index":1976,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:61",{"_index":1969,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:68",{"_index":1974,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:75",{"_index":1981,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":2001,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":2006,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:105",{"_index":2018,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:12",{"_index":2009,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:21",{"_index":2010,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:40",{"_index":2011,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:49",{"_index":2012,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:62",{"_index":2016,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:79",{"_index":2013,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:93",{"_index":2015,"title":{},"body":{"injectables/UserService.html":{}}}],["src/validation/exception/exception.service.ts",{"_index":1173,"title":{},"body":{"injectables/ExceptionService.html":{},"coverage.html":{}}}],["src/validation/exception/exception.service.ts:11",{"_index":1181,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:14",{"_index":1194,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:23",{"_index":1187,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:28",{"_index":1191,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:33",{"_index":1189,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:38",{"_index":1197,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:9",{"_index":1184,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/response/response.interface.ts",{"_index":1742,"title":{},"body":{"interfaces/Response.html":{},"coverage.html":{}}}],["src/validation/exception/response/response.service.ts",{"_index":1746,"title":{},"body":{"injectables/ResponseService.html":{},"coverage.html":{}}}],["src/validation/exception/response/response.service.ts:15",{"_index":1761,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:24",{"_index":1755,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:33",{"_index":1768,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:41",{"_index":1776,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:49",{"_index":1774,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:57",{"_index":1757,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:6",{"_index":1779,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:67",{"_index":1765,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:74",{"_index":1782,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:81",{"_index":1772,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/validation.module.ts",{"_index":2031,"title":{},"body":{"modules/ValidationModule.html":{}}}],["src/validation/validation.service.ts",{"_index":2035,"title":{},"body":{"injectables/ValidationService.html":{},"coverage.html":{}}}],["src/validation/validation.service.ts:9",{"_index":2038,"title":{},"body":{"injectables/ValidationService.html":{}}}],["st",{"_index":863,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["start",{"_index":2315,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2287,"title":{},"body":{"index.html":{}}}],["start:prodtesting",{"_index":2289,"title":{},"body":{"index.html":{}}}],["started",{"_index":2152,"title":{"index.html":{}},"body":{}}],["state",{"_index":865,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["statements",{"_index":2081,"title":{},"body":{"coverage.html":{}}}],["statique",{"_index":1418,"title":{},"body":{"controllers/PaymentController.html":{}}}],["status",{"_index":217,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/EvolutionApiService.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentService.html":{},"classes/UpdateAppointmentDto.html":{},"controllers/UserController.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["statuscode",{"_index":1744,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["statut",{"_index":1881,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["stop",{"_index":2319,"title":{},"body":{"index.html":{}}}],["storage",{"_index":2194,"title":{},"body":{"index.html":{}}}],["store",{"_index":1130,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["stored",{"_index":1140,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/RefreshTokenService.html":{},"injectables/WhatsAppService.html":{}}}],["stored.expiresat",{"_index":1726,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["stored.revoked",{"_index":1725,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["storedcode",{"_index":1167,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["stores",{"_index":2202,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":1309,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":446,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/jwt.strategy.ts",{"_index":1301,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["strategy/jwt.strategy.ts:21",{"_index":1305,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategy/jwt.strategy.ts:8",{"_index":1303,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stripe",{"_index":1377,"title":{},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"dependencies.html":{},"index.html":{}}}],["stripe(process.env.stripe_secret_key",{"_index":1821,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe(secretkey",{"_index":1595,"title":{},"body":{"injectables/PaymentService.html":{}}}],["stripe.checkout.sessions.retrieve(sessionid",{"_index":1599,"title":{},"body":{"injectables/PaymentService.html":{}}}],["stripe/stripe.service",{"_index":1477,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/PaymentProcessorFactory.html":{}}}],["stripeservice",{"_index":1475,"title":{"injectables/StripeService.html":{}},"body":{"modules/PaymentModule.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/StripeService.html":{},"coverage.html":{},"overview.html":{}}}],["stripesession",{"_index":1598,"title":{},"body":{"injectables/PaymentService.html":{}}}],["stripesession.amount_total",{"_index":1612,"title":{},"body":{"injectables/PaymentService.html":{}}}],["stripesession.metadata",{"_index":1602,"title":{},"body":{"injectables/PaymentService.html":{}}}],["strongpassword123",{"_index":987,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["strongpassword123'})@isstring()@minlength(6",{"_index":1327,"title":{},"body":{"classes/LoginDto.html":{}}}],["structure",{"_index":2354,"title":{},"body":{"index.html":{}}}],["sub",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["submits",{"_index":2222,"title":{},"body":{"index.html":{}}}],["succeeded",{"_index":1829,"title":{},"body":{"injectables/StripeService.html":{}}}],["success",{"_index":1411,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["success(data",{"_index":1778,"title":{},"body":{"injectables/ResponseService.html":{}}}],["success.html",{"_index":1420,"title":{},"body":{"controllers/PaymentController.html":{}}}],["success_url",{"_index":1843,"title":{},"body":{"injectables/StripeService.html":{}}}],["successful",{"_index":1141,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["successfully",{"_index":218,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["successfully'})@apiresponse({status",{"_index":144,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["successfully.'})@apibody({type",{"_index":1964,"title":{},"body":{"controllers/UserController.html":{}}}],["successfully.'})@apiresponse({status",{"_index":1365,"title":{},"body":{"controllers/PaymentController.html":{}}}],["successurl",{"_index":1495,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["successurl}?session_id={checkout_session_id",{"_index":1844,"title":{},"body":{"injectables/StripeService.html":{}}}],["succès",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["sum",{"_index":1563,"title":{},"body":{"injectables/PaymentService.html":{}}}],["summary",{"_index":216,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":1293,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PrismaService.html":{}}}],["super(options",{"_index":2050,"title":{},"body":{"injectables/ValidationService.html":{}}}],["super.canactivate(context",{"_index":1300,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["support",{"_index":2391,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":1566,"title":{},"body":{"injectables/PaymentService.html":{}}}],["supports",{"_index":2372,"title":{},"body":{"index.html":{}}}],["suppression",{"_index":846,"title":{},"body":{"injectables/CloudinaryService.html":{},"classes/DocumentResponseDto.html":{},"injectables/UserService.html":{}}}],["supprim",{"_index":639,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/UploadService.html":{}}}],["supprimer",{"_index":637,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/UploadService.html":{}}}],["suv",{"_index":889,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["svg",{"_index":2392,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2175,"title":{},"body":{"index.html":{}}}],["switch",{"_index":1511,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["switchmap",{"_index":677,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["switchmap((cached",{"_index":711,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["system",{"_index":2160,"title":{},"body":{"index.html":{}}}],["sécuris",{"_index":997,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sécurisé'})@isstring()@isnotempty()@minlength(6",{"_index":988,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["t",{"_index":741,"title":{},"body":{"injectables/CacheService.html":{},"injectables/RedisService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"index.html":{}}}],["table",{"_index":2114,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2113,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":676,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["tap(async",{"_index":715,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["target",{"_index":689,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{},"injectables/ValidationService.html":{}}}],["temporary",{"_index":324,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["temppassword",{"_index":328,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["tente",{"_index":1824,"title":{},"body":{"injectables/StripeService.html":{}}}],["test",{"_index":781,"title":{},"body":{"injectables/CacheService.html":{},"index.html":{}}}],["test:covdocker",{"_index":2294,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2293,"title":{},"body":{"index.html":{}}}],["testing",{"_index":2042,"title":{},"body":{"injectables/ValidationService.html":{},"index.html":{}}}],["tests",{"_index":2291,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["textmessage",{"_index":1158,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.$connect",{"_index":1655,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":1665,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$use(loggingmiddleware(this.eventemitter",{"_index":1654,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.apikey",{"_index":1123,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.appointmentservice.cancel(params.id",{"_index":234,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.create(createappointmentdto",{"_index":220,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.createasguest(createguestappointmentdto",{"_index":223,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findall",{"_index":224,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findbyuserid(params.userid",{"_index":231,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findone(params.id",{"_index":228,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findpendingappointmentswithoutpayment",{"_index":238,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.update(params.id",{"_index":236,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(logindto.email",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(token",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refresh(body.refreshtoken",{"_index":426,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.requestpasswordreset(dto.email",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword(dto.email",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.basedir",{"_index":1930,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.baseurl",{"_index":1121,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.baseurl}/message/sendtext/${this.instancename",{"_index":1157,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.blacklistservice.blacklist(token",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.blacklistservice.isblacklisted(token",{"_index":1298,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["this.client",{"_index":1865,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["this.client.messages.create",{"_index":2075,"title":{},"body":{"injectables/WhatsAppService.html":{}}}],["this.client.verify.v2",{"_index":1867,"title":{},"body":{"injectables/TwilioService.html":{}}}],["this.config.get('evolution_api_base_url",{"_index":1107,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.config.get('evolution_api_instance",{"_index":1108,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.config.get('evolution_api_key",{"_index":1109,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.config.get('jwt_refresh_expires_days",{"_index":1720,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.config.get('twilio_account_sid",{"_index":1857,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["this.config.get('twilio_auth_token",{"_index":1859,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["this.config.get('twilio_service_sid",{"_index":1860,"title":{},"body":{"injectables/TwilioService.html":{}}}],["this.config.get('whatsapp_from_number",{"_index":1110,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["this.documentservice.findall(userid",{"_index":624,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["this.documentservice.findone(params.id",{"_index":629,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["this.documentservice.remove(params.id",{"_index":641,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["this.documentservice.update(params.id",{"_index":635,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["this.documentservice.upload(userid",{"_index":614,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["this.ensuredirectory(folder",{"_index":1941,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.exceptionservice.createvalidationexception(errors",{"_index":2049,"title":{},"body":{"injectables/ValidationService.html":{}}}],["this.factory.getprocessor(paymentmode.name",{"_index":1564,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.formaterrors(errors",{"_index":1203,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.fromnumber",{"_index":1124,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["this.fromnumber.startswith",{"_index":1151,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.fromnumber.substring(1",{"_index":1152,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.generatefilename(file.originalname",{"_index":1943,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.generatetoken(user.id",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatetoken(valid.userid",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.get(key",{"_index":1703,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.httpresponseservice.badrequest",{"_index":1204,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.httpresponseservice.forbidden(message",{"_index":1208,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.httpresponseservice.internalerror(message",{"_index":1212,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.httpresponseservice.notfound(message",{"_index":1210,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.instancename",{"_index":1122,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.jwtservice.decode(token",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error",{"_index":822,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["this.logger.error(`refund",{"_index":1830,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.logger.error(`échec",{"_index":1953,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.logger.log",{"_index":829,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["this.logger.warn",{"_index":845,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["this.options",{"_index":2051,"title":{},"body":{"injectables/ValidationService.html":{}}}],["this.otp_expiration_time",{"_index":1135,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["this.paymentmodeservice.create(createpaymentmodedto",{"_index":1443,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["this.paymentmodeservice.findall",{"_index":1444,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["this.paymentmodeservice.findone(id",{"_index":1446,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["this.paymentmodeservice.remove(id",{"_index":1450,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["this.paymentmodeservice.update(id",{"_index":1448,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["this.paymentservice.createpayment(dto",{"_index":1405,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.paymentservice.getalltransactions",{"_index":1406,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.paymentservice.gettransaction(transactionid",{"_index":1427,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.paymentservice.gettransactionsbyuser(userid",{"_index":1408,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.paymentservice.handlestripesuccess(sessionid",{"_index":1414,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.prisma",{"_index":1237,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["this.prisma.appointment.create",{"_index":277,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.prisma.appointment.findmany",{"_index":295,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/PaymentService.html":{}}}],["this.prisma.appointment.findunique",{"_index":301,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.prisma.appointment.update",{"_index":311,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.prisma.blacklistedtoken.create",{"_index":651,"title":{},"body":{"injectables/BlacklistTokenService.html":{}}}],["this.prisma.blacklistedtoken.findunique",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{}}}],["this.prisma.document.create",{"_index":1069,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.prisma.document.findmany",{"_index":1074,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.prisma.document.findunique",{"_index":1079,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.prisma.document.update",{"_index":1081,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.prisma.payment.create",{"_index":1633,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.prisma.payment.findfirst",{"_index":1553,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.prisma.payment.findmany",{"_index":1579,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.prisma.payment.findunique",{"_index":1582,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.prisma.paymentgroup.create",{"_index":1625,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.prisma.paymentgroup.findunique",{"_index":1617,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.prisma.paymentmode.create",{"_index":1463,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["this.prisma.paymentmode.findfirst",{"_index":1466,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["this.prisma.paymentmode.findmany",{"_index":1465,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["this.prisma.paymentmode.findunique",{"_index":1557,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.prisma.paymentmode.update",{"_index":1469,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["this.prisma.refreshtoken.create",{"_index":1722,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.prisma.refreshtoken.findunique",{"_index":1724,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.prisma.user.create",{"_index":334,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.findfirst",{"_index":320,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.findmany",{"_index":2024,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.prisma[modelname",{"_index":1244,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["this.prisma[modelname].findfirst",{"_index":1247,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["this.redis.del(key",{"_index":1701,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redis.exists(key",{"_index":1702,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redis.get(key",{"_index":1695,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redis.set(key",{"_index":1699,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redisservice.cacheable",{"_index":771,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.redisservice.cacheable('users:all",{"_index":2023,"title":{},"body":{"injectables/UserService.html":{}}}],["this.redisservice.del('users:all",{"_index":2021,"title":{},"body":{"injectables/UserService.html":{}}}],["this.redisservice.del(fullkey",{"_index":706,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["this.redisservice.del(key",{"_index":764,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.redisservice.del(rediskey",{"_index":1171,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["this.redisservice.get(key",{"_index":762,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.redisservice.get(rediskey",{"_index":1168,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["this.redisservice.set(fullkey",{"_index":716,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["this.redisservice.set(key",{"_index":763,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.redisservice.set(rediskey",{"_index":1134,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["this.reflector.get",{"_index":693,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["this.reflector.get(cache_prefix_key",{"_index":691,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":1295,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refreshtokenservice.create(user.id",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.refreshtokenservice.rotate(refreshtoken",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.refreshtokenservice.validate(refreshtoken",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.responseservice.badrequest",{"_index":1062,"title":{},"body":{"injectables/DocumentService.html":{},"injectables/PaymentService.html":{}}}],["this.responseservice.badrequest(['aucun",{"_index":1057,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.responseservice.badrequest(['invalid",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["this.responseservice.conflict('token",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.responseservice.created",{"_index":294,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/PaymentModeService.html":{}}}],["this.responseservice.created(responsedto",{"_index":1072,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.responseservice.created(user",{"_index":2022,"title":{},"body":{"injectables/UserService.html":{}}}],["this.responseservice.inactiveaccount(user.id",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.responseservice.notfound('appointment",{"_index":310,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.responseservice.notfound('payment",{"_index":1467,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["this.responseservice.notfound('transaction",{"_index":1591,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.responseservice.notfound('user",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.responseservice.success",{"_index":299,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["this.responseservice.success(appointment",{"_index":313,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.responseservice.success(null",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DocumentService.html":{},"injectables/UserService.html":{}}}],["this.responseservice.success(paymentmode",{"_index":1468,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["this.responseservice.success(responsedto",{"_index":1080,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.responseservice.success(responsedtos",{"_index":1077,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.responseservice.success(user",{"_index":2026,"title":{},"body":{"injectables/UserService.html":{}}}],["this.responseservice.success(users",{"_index":2025,"title":{},"body":{"injectables/UserService.html":{}}}],["this.responseservice.unauthorized('aucun",{"_index":1297,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.responseservice.unauthorized('identifiants",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.responseservice.unauthorized('token",{"_index":1299,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.servicesid",{"_index":1864,"title":{},"body":{"injectables/TwilioService.html":{}}}],["this.set(key",{"_index":1704,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.smsservice.sendotp(user.phone",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.smsservice.verifyotp(user.phone",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.stripe",{"_index":1820,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.checkout.sessions.create",{"_index":1834,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.checkout.sessions.retrieve(transactionid",{"_index":1831,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.refunds.create",{"_index":1827,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice",{"_index":1514,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["this.uploadservice.deletefile(doc.fileurl",{"_index":1082,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.uploadservice.uploadsingle",{"_index":1067,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.uploadsingle(file",{"_index":838,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":1988,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.findall",{"_index":1989,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.findone(id",{"_index":1990,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.remove(id",{"_index":1993,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.sendphoneverificationotp(id",{"_index":1995,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.update(id",{"_index":1992,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.verifyphoneotp(dto",{"_index":1997,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validateuser(email",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["three",{"_index":2301,"title":{},"body":{"index.html":{}}}],["throw",{"_index":308,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{}}}],["time",{"_index":746,"title":{},"body":{"injectables/CacheService.html":{},"index.html":{}}}],["timestamp",{"_index":1745,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["title",{"_index":607,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["titlenumber",{"_index":283,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["titles",{"_index":2205,"title":{},"body":{"index.html":{}}}],["titre",{"_index":906,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["titre'})@isstring()@isnotempty",{"_index":881,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{}}}],["token",{"_index":214,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"controllers/DocumentController.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/RefreshTokenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["token.mock.ts",{"_index":2106,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["token.service",{"_index":449,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["token.service.ts",{"_index":643,"title":{},"body":{"injectables/BlacklistTokenService.html":{},"injectables/RefreshTokenService.html":{},"coverage.html":{}}}],["token.service.ts:12",{"_index":648,"title":{},"body":{"injectables/BlacklistTokenService.html":{}}}],["token.service.ts:14",{"_index":1709,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["token.service.ts:22",{"_index":650,"title":{},"body":{"injectables/BlacklistTokenService.html":{}}}],["token.service.ts:35",{"_index":1714,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["token.service.ts:47",{"_index":1711,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["token.service.ts:6",{"_index":645,"title":{},"body":{"injectables/BlacklistTokenService.html":{}}}],["token.service.ts:8",{"_index":1707,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["token/blacklist",{"_index":448,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{}}}],["token/refresh",{"_index":450,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenService.html":{},"coverage.html":{}}}],["tokens",{"_index":2214,"title":{},"body":{"index.html":{}}}],["ton",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["total",{"_index":1560,"title":{},"body":{"injectables/PaymentService.html":{}}}],["totalamount",{"_index":1561,"title":{},"body":{"injectables/PaymentService.html":{}}}],["tous",{"_index":1530,"title":{},"body":{"injectables/PaymentService.html":{}}}],["tracks",{"_index":2207,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":1374,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"miscellaneous/variables.html":{}}}],["transactionid",{"_index":1382,"title":{},"body":{"controllers/PaymentController.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["transactions",{"_index":1370,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"index.html":{}}}],["transactions'})@apiresponse({status",{"_index":1369,"title":{},"body":{"controllers/PaymentController.html":{}}}],["transfer",{"_index":2361,"title":{},"body":{"index.html":{}}}],["transform",{"_index":2044,"title":{},"body":{"injectables/ValidationService.html":{}}}],["transformation",{"_index":2265,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":2128,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["transformoptions",{"_index":2046,"title":{},"body":{"injectables/ValidationService.html":{}}}],["trop",{"_index":1063,"title":{},"body":{"injectables/DocumentService.html":{}}}],["trouv",{"_index":627,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{}}}],["trouvée",{"_index":1777,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["true",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"classes/CreatePaymentDto.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["true})@min(0.01",{"_index":947,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["try",{"_index":839,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/EvolutionApiService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/PrismaService.html":{},"injectables/StripeService.html":{},"injectables/UploadService.html":{}}}],["ts",{"_index":273,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreatePaymentModeDto.html":{},"injectables/PaymentProcessorFactory.html":{}}}],["ttl",{"_index":786,"title":{},"body":{"interfaces/CacheableOptions.html":{}}}],["ttlseconds",{"_index":738,"title":{},"body":{"injectables/CacheService.html":{},"injectables/RedisService.html":{}}}],["tu",{"_index":2004,"title":{},"body":{"modules/UserModule.html":{}}}],["twilio",{"_index":1855,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{},"dependencies.html":{}}}],["twilio(accountsid",{"_index":1866,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["twilio.twilio",{"_index":1853,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["twilio/twilio.service",{"_index":1799,"title":{},"body":{"modules/SmsModule.html":{}}}],["twilio_account_sid",{"_index":1861,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["twilio_auth_token",{"_index":1862,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["twilio_service_sid",{"_index":1863,"title":{},"body":{"injectables/TwilioService.html":{}}}],["twilioservice",{"_index":59,"title":{"injectables/TwilioService.html":{}},"body":{"modules/AppModule.html":{},"modules/SmsModule.html":{},"injectables/TwilioService.html":{},"coverage.html":{},"overview.html":{}}}],["type",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{}}}],["types",{"_index":1899,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["typescript",{"_index":306,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["téléphone",{"_index":929,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["téléphone'})@isphonenumber()@isnotempty()@unique('user",{"_index":991,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ui",{"_index":2342,"title":{},"body":{"index.html":{}}}],["un",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["unauthorized",{"_index":1753,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["unauthorized(message",{"_index":1781,"title":{},"body":{"injectables/ResponseService.html":{}}}],["unauthorizedexception",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenService.html":{}}}],["unauthorizedexception('refresh",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('user",{"_index":1317,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":911,"title":{},"body":{"classes/CreateDocumentDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{}}}],["undefined})@apiresponse({status",{"_index":1017,"title":{},"body":{"controllers/DocumentController.html":{}}}],["une",{"_index":1812,"title":{},"body":{"injectables/StripeService.html":{}}}],["unique",{"_index":974,"title":{},"body":{"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"classes/DocumentResponseDto.html":{},"injectables/UniqueConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["unique('paymentmode",{"_index":976,"title":{},"body":{"classes/CreatePaymentModeDto.html":{}}}],["unique('user",{"_index":995,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["unique(model",{"_index":2150,"title":{},"body":{"miscellaneous/functions.html":{}}}],["uniqueconstraint",{"_index":1872,"title":{"injectables/UniqueConstraint.html":{}},"body":{"injectables/UniqueConstraint.html":{},"coverage.html":{}}}],["unit",{"_index":2290,"title":{},"body":{"index.html":{}}}],["unit_amount",{"_index":1839,"title":{},"body":{"injectables/StripeService.html":{}}}],["unknown",{"_index":254,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/DocumentService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtStrategy.html":{},"controllers/PaymentController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/TwilioService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["unknown_sid",{"_index":1162,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["unlicensed",{"_index":2400,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["unused",{"_index":842,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/UploadService.html":{}}}],["up",{"_index":2277,"title":{},"body":{"index.html":{}}}],["update",{"_index":136,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["update(@param('id",{"_index":1991,"title":{},"body":{"controllers/UserController.html":{}}}],["update(id",{"_index":267,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/DocumentService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(params",{"_index":189,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentController.html":{}}}],["updateappointmentdto",{"_index":190,"title":{"classes/UpdateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["updated",{"_index":192,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated.'})@apibody({type",{"_index":1975,"title":{},"body":{"controllers/UserController.html":{}}}],["updatedappointment",{"_index":317,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updatedat",{"_index":594,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["updatedocumentdto",{"_index":581,"title":{"classes/UpdateDocumentDto.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"classes/UpdateDocumentDto.html":{},"coverage.html":{}}}],["updatedocumentdto})@apiresponse({status",{"_index":1011,"title":{},"body":{"controllers/DocumentController.html":{}}}],["updatepaymentmodedto",{"_index":1438,"title":{"classes/UpdatePaymentModeDto.html":{}},"body":{"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"classes/UpdatePaymentModeDto.html":{},"coverage.html":{}}}],["updates",{"_index":2225,"title":{},"body":{"index.html":{}}}],["updateuserdto",{"_index":1895,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["upload",{"_index":609,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["upload(file",{"_index":1013,"title":{},"body":{"controllers/DocumentController.html":{}}}],["upload(userid",{"_index":1053,"title":{},"body":{"injectables/DocumentService.html":{}}}],["upload/interfaces/upload.interface",{"_index":1055,"title":{},"body":{"injectables/DocumentService.html":{}}}],["upload/upload.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/DocumentModule.html":{}}}],["upload/upload.service",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["uploaded",{"_index":1066,"title":{},"body":{"injectables/DocumentService.html":{}}}],["uploaded.url",{"_index":1070,"title":{},"body":{"injectables/DocumentService.html":{}}}],["uploadedat",{"_index":1027,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["uploadedfile",{"_index":570,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["uploader",{"_index":600,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["uploadfile",{"_index":1910,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadfile(image",{"_index":1918,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadmodule",{"_index":48,"title":{"modules/UploadModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DocumentModule.html":{},"modules/UploadModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["uploadmultiple",{"_index":793,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["uploadmultiple(files",{"_index":799,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"injectables/UploadService.html":{}}}],["uploads",{"_index":1932,"title":{},"body":{"injectables/UploadService.html":{},"index.html":{}}}],["uploads/${relativepath",{"_index":1950,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadservice",{"_index":60,"title":{"injectables/UploadService.html":{}},"body":{"modules/AppModule.html":{},"injectables/DocumentService.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"coverage.html":{},"overview.html":{}}}],["uploadsingle",{"_index":794,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["uploadsingle(file",{"_index":803,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"injectables/UploadService.html":{}}}],["uploadstream",{"_index":820,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadstream.end(file.buffer",{"_index":834,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["url",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"injectables/CloudinaryService.html":{},"classes/DocumentResponseDto.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/StripeService.html":{},"injectables/UploadService.html":{}}}],["usd",{"_index":965,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["usd'})@isstring()@isnotempty",{"_index":954,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["use",{"_index":765,"title":{},"body":{"injectables/CacheService.html":{}}}],["useclass",{"_index":466,"title":{},"body":{"modules/AuthModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{}}}],["used",{"_index":2416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefactory",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useinterceptors",{"_index":571,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":599,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["user",{"_index":174,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/CacheService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"controllers/DocumentController.html":{},"injectables/JwtStrategy.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":2054,"title":{},"body":{"classes/VerifyOtpDto.html":{},"index.html":{}}}],["user'})@apiresponse({status",{"_index":1963,"title":{},"body":{"controllers/UserController.html":{}}}],["user.controller",{"_index":2002,"title":{},"body":{"modules/UserModule.html":{}}}],["user.deletedat",{"_index":1316,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["user.dto",{"_index":1900,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":979,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:19",{"_index":982,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":992,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":984,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":986,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:44",{"_index":989,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":346,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{}}}],["user.isphoneverified",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":1982,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["user@example.com",{"_index":1329,"title":{},"body":{"classes/LoginDto.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{}}}],["user@example.com'})@isemail()@isnotempty",{"_index":1325,"title":{},"body":{"classes/LoginDto.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{}}}],["usercontroller",{"_index":1960,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":188,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/variables.html":{}}}],["usermodule",{"_index":49,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["users",{"_index":343,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["users'})@apiresponse({status",{"_index":1966,"title":{},"body":{"controllers/UserController.html":{}}}],["userservice",{"_index":61,"title":{"injectables/UserService.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice",{"_index":1987,"title":{},"body":{"controllers/UserController.html":{}}}],["uses",{"_index":2197,"title":{},"body":{"index.html":{}}}],["using",{"_index":2186,"title":{},"body":{"index.html":{}}}],["utilisateur",{"_index":886,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{}}}],["utilisateur'})@isuuid()@isnotempty()@exists('user",{"_index":1351,"title":{},"body":{"classes/ParamUserIdDto-1.html":{}}}],["utilisée",{"_index":953,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["utilities",{"_index":2263,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":883,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"injectables/RefreshTokenService.html":{},"dependencies.html":{},"index.html":{}}}],["uuid'})@isstring()@isnotempty",{"_index":956,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["v16",{"_index":2272,"title":{},"body":{"index.html":{}}}],["v2",{"_index":806,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["v4",{"_index":1715,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["valid",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PaymentService.html":{}}}],["valid.userid",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":1224,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/UniqueConstraint.html":{}}}],["validate(payload",{"_index":1304,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(token",{"_index":1713,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["validate(value",{"_index":1230,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["validateuser",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":1205,"title":{},"body":{"injectables/ExceptionService.html":{},"index.html":{}}}],["validation.service",{"_index":2032,"title":{},"body":{"modules/ValidationModule.html":{}}}],["validation/exception/exception.service",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["validation/exception/response/response.service",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"injectables/JwtAuthGuard.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["validation/validation.module",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["validation/validation.service",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["validationarguments",{"_index":1227,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["validationerror",{"_index":1193,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/ValidationService.html":{}}}],["validationmodule",{"_index":50,"title":{"modules/ValidationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ValidationModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["validationoptions",{"_index":1233,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{},"miscellaneous/functions.html":{}}}],["validationpipe",{"_index":2036,"title":{},"body":{"injectables/ValidationService.html":{}}}],["validationpipeoptions",{"_index":2039,"title":{},"body":{"injectables/ValidationService.html":{}}}],["validationservice",{"_index":62,"title":{"injectables/ValidationService.html":{}},"body":{"modules/AppModule.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"overview.html":{}}}],["validator",{"_index":902,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"dependencies.html":{},"index.html":{}}}],["validatorconstraint",{"_index":1234,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["validatorconstraintinterface",{"_index":1235,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["value",{"_index":743,"title":{},"body":{"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExistsConstraint.html":{},"injectables/RedisService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":2310,"title":{},"body":{"index.html":{}}}],["variable",{"_index":2092,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1120,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/EvolutionApiService.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":843,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/UploadService.html":{}}}],["vehicle",{"_index":2158,"title":{},"body":{"index.html":{}}}],["vehicletype",{"_index":281,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["verification",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["verificationchecks.create",{"_index":1871,"title":{},"body":{"injectables/TwilioService.html":{}}}],["verifications.create",{"_index":1869,"title":{},"body":{"injectables/TwilioService.html":{}}}],["verified",{"_index":344,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["verifies",{"_index":2224,"title":{},"body":{"index.html":{}}}],["verify",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"index.html":{}}}],["verifying",{"_index":2060,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["verifyotp",{"_index":1093,"title":{},"body":{"injectables/EvolutionApiService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/TwilioService.html":{},"controllers/UserController.html":{},"injectables/WhatsAppService.html":{}}}],["verifyotp(@body",{"_index":1996,"title":{},"body":{"controllers/UserController.html":{}}}],["verifyotp(dto",{"_index":1977,"title":{},"body":{"controllers/UserController.html":{}}}],["verifyotp(phone",{"_index":1098,"title":{},"body":{"injectables/EvolutionApiService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["verifyotpdto",{"_index":1978,"title":{"classes/VerifyOtpDto.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["verifyphoneotp",{"_index":2008,"title":{},"body":{"injectables/UserService.html":{}}}],["verifyphoneotp(dto",{"_index":2017,"title":{},"body":{"injectables/UserService.html":{}}}],["verifytoken",{"_index":1264,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["verifytoken(idtoken",{"_index":1266,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["vers",{"_index":1578,"title":{},"body":{"injectables/PaymentService.html":{}}}],["version",{"_index":2398,"title":{},"body":{"properties.html":{}}}],["veuillez",{"_index":1795,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["vide",{"_index":828,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["view",{"_index":2321,"title":{},"body":{"index.html":{}}}],["vin",{"_index":279,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["vin)'})@isstring()@isnotempty",{"_index":895,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{}}}],["void",{"_index":737,"title":{},"body":{"injectables/CacheService.html":{},"injectables/ExceptionService.html":{},"injectables/FirebaseAdminService.html":{},"controllers/PaymentController.html":{},"injectables/RedisService.html":{},"injectables/UploadService.html":{}}}],["volumes",{"_index":2308,"title":{},"body":{"index.html":{}}}],["volumineux",{"_index":1064,"title":{},"body":{"injectables/DocumentService.html":{}}}],["votre",{"_index":1791,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["vous",{"_index":868,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/ParamAppointmentIdDto.html":{},"injectables/StripeService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["vous'})@isarray()@arraynotempty()@isnumber",{"_index":946,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["vous'})@isuuid()@isnotempty()@exists('appointment",{"_index":1344,"title":{},"body":{"classes/ParamAppointmentIdDto.html":{}}}],["véhicule",{"_index":894,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["véhicule'})@isstring()@isnotempty",{"_index":890,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{}}}],["vérifier",{"_index":1601,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["want",{"_index":2325,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":778,"title":{},"body":{"injectables/CacheService.html":{}}}],["web",{"_index":2257,"title":{},"body":{"index.html":{}}}],["whatsapp",{"_index":1138,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["whatsapp/whatsapp.service",{"_index":1801,"title":{},"body":{"modules/SmsModule.html":{}}}],["whatsapp:${phone",{"_index":2077,"title":{},"body":{"injectables/WhatsAppService.html":{}}}],["whatsapp:${this.fromnumber",{"_index":2076,"title":{},"body":{"injectables/WhatsAppService.html":{}}}],["whatsapp_from_number",{"_index":1118,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["whatsappservice",{"_index":1800,"title":{"injectables/WhatsAppService.html":{}},"body":{"modules/SmsModule.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{}}}],["whitelist",{"_index":2043,"title":{},"body":{"injectables/ValidationService.html":{}}}],["without",{"_index":184,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["workflow",{"_index":1809,"title":{},"body":{"injectables/StripeService.html":{}}}],["works",{"_index":2330,"title":{},"body":{"index.html":{}}}],["world",{"_index":125,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":2333,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":2274,"title":{},"body":{"index.html":{}}}],["yes",{"_index":1258,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/RedisService.html":{},"injectables/StripeService.html":{},"miscellaneous/functions.html":{}}}],["zoom",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDocumentModule\n\nDocumentModule\n\nAppModule -->\n\nDocumentModule->AppModule\n\n\n\n\n\nPaymentModeModule\n\nPaymentModeModule\n\nAppModule -->\n\nPaymentModeModule->AppModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAppModule -->\n\nSmsModule->AppModule\n\n\n\n\n\nUploadModule\n\nUploadModule\n\nAppModule -->\n\nUploadModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nValidationModule\n\nValidationModule\n\nAppModule -->\n\nValidationModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppModule -->\n\nAppointmentService->AppModule\n\n\n\n\n\nDocumentService\n\nDocumentService\n\nAppModule -->\n\nDocumentService->AppModule\n\n\n\n\n\nExceptionService\n\nExceptionService\n\nAppModule -->\n\nExceptionService->AppModule\n\n\n\n\n\nFirebaseAdminService\n\nFirebaseAdminService\n\nAppModule -->\n\nFirebaseAdminService->AppModule\n\n\n\n\n\nPaymentModeService\n\nPaymentModeService\n\nAppModule -->\n\nPaymentModeService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nAppModule -->\n\nRedisService->AppModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nAppModule -->\n\nResponseService->AppModule\n\n\n\n\n\nTwilioService\n\nTwilioService\n\nAppModule -->\n\nTwilioService->AppModule\n\n\n\n\n\nUploadService\n\nUploadService\n\nAppModule -->\n\nUploadService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nAppModule -->\n\nValidationService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            AppointmentService\n                        \n                        \n                            DocumentService\n                        \n                        \n                            ExceptionService\n                        \n                        \n                            FirebaseAdminService\n                        \n                        \n                            PaymentModeService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            RedisService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            TwilioService\n                        \n                        \n                            UploadService\n                        \n                        \n                            UserService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            PaymentModeController\n                        \n                        \n                            AppointmentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppointmentModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            DocumentModule\n                        \n                        \n                            PaymentModeModule\n                        \n                        \n                            PaymentModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            SmsModule\n                        \n                        \n                            UploadModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            ValidationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PrismaService } from './prisma/prisma.service';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { RedisService } from './redis/redis.service'; // ton service perso Redis\nimport { RedisModule } from '@nestjs-modules/ioredis'; // package officiel\nimport { ValidationService } from './validation/validation.service';\nimport { ExceptionService } from './validation/exception/exception.service';\nimport { ResponseService } from './validation/exception/response/response.service';\nimport { ValidationModule } from './validation/validation.module';\nimport { UserModule } from './user/user.module';\nimport { UserService } from './user/user.service';\nimport { TwilioService } from './sms/twilio/twilio.service';\nimport { SmsModule } from './sms/sms.module';\nimport { AuthModule } from './auth/auth.module';\nimport { PaymentModeService } from './payment-mode/payment-mode.service';\nimport { PaymentModeController } from './payment-mode/payment-mode.controller';\nimport { PaymentModeModule } from './payment-mode/payment-mode.module';\nimport { UploadModule } from './upload/upload.module';\nimport { UploadService } from './upload/upload.service';\nimport { DocumentService } from './document/document.service';\nimport { DocumentModule } from './document/document.module';\nimport { PaymentModule } from './payment/payment.module';\nimport { AppointmentModule } from './appointment/appointment.module';\nimport { AppointmentController } from './appointment/appointment.controller';\nimport { AppointmentService } from './appointment/appointment.service';\n\nimport { FirebaseAdminService } from './firebase/firebase-admin/firebase-admin.service';\n\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    RedisModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'single',\n        url: configService.get('REDIS_URL'),\n      }),\n    }),\n    PrismaModule,\n    ValidationModule,\n    UserModule,\n    SmsModule,\n    AuthModule,\n    PaymentModeModule,\n    UploadModule,\n    DocumentModule,\n    PaymentModule,\n    AppointmentModule,\n  ],\n  controllers: [AppController, PaymentModeController, AppointmentController],\n  providers: [\n    AppService,\n    PrismaService,\n    RedisService,\n    ValidationService,\n    ExceptionService,\n    ResponseService,\n    UserService,\n    TwilioService,\n    PaymentModeService,\n    UploadService,\n    DocumentService,\n    AppointmentService,\n    FirebaseAdminService,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppointmentController.html":{"url":"controllers/AppointmentController.html","title":"controller - AppointmentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppointmentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/appointment/appointment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                appointment\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                cancel\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                createAsGuest\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findByUserId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                getPendingAppointmentsWithoutPayment\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        cancel\n                        \n                    \n                \n            \n            \n                \n                        \n                    cancel(params: ParamAppointmentIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id/cancel')@ApiOperation({summary: 'Cancel an appointment'})@ApiResponse({status: 200, description: 'Appointment canceled successfully'})@ApiResponse({status: 404, description: 'Appointment not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/appointment/appointment.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            ParamAppointmentIdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new appointment'})@ApiResponse({status: 201, description: 'Appointment created successfully'})@ApiResponse({status: 400, description: 'Bad request'})\n                \n            \n\n                    \n                        \n                            Defined in src/appointment/appointment.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        createAsGuest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAsGuest(createGuestAppointmentDto: CreateGuestAppointmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('guest')@ApiOperation({summary: 'Create a new appointment as a guest'})@ApiResponse({status: 201, description: 'Appointment created successfully'})@ApiResponse({status: 400, description: 'Bad request'})\n                \n            \n\n                    \n                        \n                            Defined in src/appointment/appointment.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createGuestAppointmentDto\n                                            \n                                                            CreateGuestAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all appointments'})@ApiResponse({status: 200, description: 'Return all appointments'})\n                \n            \n\n                    \n                        \n                            Defined in src/appointment/appointment.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUserId(params: ParamUserIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@ApiOperation({summary: 'Get appointments by user ID'})@ApiResponse({status: 200, description: 'Return the appointments for the user'})\n                \n            \n\n                    \n                        \n                            Defined in src/appointment/appointment.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            ParamUserIdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(params: ParamAppointmentIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get appointment by ID'})@ApiResponse({status: 200, description: 'Return the appointment'})@ApiResponse({status: 404, description: 'Appointment not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/appointment/appointment.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            ParamAppointmentIdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getPendingAppointmentsWithoutPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPendingAppointmentsWithoutPayment(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId/pending/no-payment')@ApiOperation({summary: 'Get pending appointments without payments by user ID'})@ApiResponse({status: 200, description: 'Pending appointments without payments returned'})\n                \n            \n\n                    \n                        \n                            Defined in src/appointment/appointment.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(params: ParamAppointmentIdDto, updateAppointmentDto: UpdateAppointmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOperation({summary: 'Update an appointment'})@ApiResponse({status: 200, description: 'Appointment updated successfully'})@ApiResponse({status: 404, description: 'Appointment not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/appointment/appointment.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            ParamAppointmentIdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, Put } from '@nestjs/common';\nimport {\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { AppointmentService } from './appointment.service';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { CreateGuestAppointmentDto } from './dto/create-guest-appointment.dto';\nimport { ParamAppointmentIdDto } from './dto/param-appointment-id.dto';\nimport { ParamUserIdDto } from './dto/param-user-id.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { Public } from '../common/decorator/public.decorator';\n\n@ApiTags('Appointments')\n@ApiBearerAuth('access-token')\n@Controller('appointment')\nexport class AppointmentController {\n  constructor(private readonly appointmentService: AppointmentService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new appointment' })\n  @ApiResponse({ status: 201, description: 'Appointment created successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request' })\n  create(@Body() createAppointmentDto: CreateAppointmentDto) {\n    return this.appointmentService.create(createAppointmentDto);\n  }\n\n  @Public()\n  @Post('guest')\n  @ApiOperation({ summary: 'Create a new appointment as a guest' })\n  @ApiResponse({ status: 201, description: 'Appointment created successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request' })\n  createAsGuest(@Body() createGuestAppointmentDto: CreateGuestAppointmentDto) {\n    return this.appointmentService.createAsGuest(createGuestAppointmentDto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all appointments' })\n  @ApiResponse({ status: 200, description: 'Return all appointments' })\n  findAll() {\n    return this.appointmentService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get appointment by ID' })\n  @ApiResponse({ status: 200, description: 'Return the appointment' })\n  @ApiResponse({ status: 404, description: 'Appointment not found' })\n  findOne(@Param() params: ParamAppointmentIdDto) {\n    return this.appointmentService.findOne(params.id);\n  }\n\n  @Get('user/:userId')\n  @ApiOperation({ summary: 'Get appointments by user ID' })\n  @ApiResponse({ status: 200, description: 'Return the appointments for the user' })\n  findByUserId(@Param() params: ParamUserIdDto) {\n    return this.appointmentService.findByUserId(params.userId);\n  }\n\n  @Put(':id/cancel')\n  @ApiOperation({ summary: 'Cancel an appointment' })\n  @ApiResponse({ status: 200, description: 'Appointment canceled successfully' })\n  @ApiResponse({ status: 404, description: 'Appointment not found' })\n  cancel(@Param() params: ParamAppointmentIdDto) {\n    return this.appointmentService.cancel(params.id);\n  }\n\n  @Put(':id')\n  @ApiOperation({ summary: 'Update an appointment' })\n  @ApiResponse({ status: 200, description: 'Appointment updated successfully' })\n  @ApiResponse({ status: 404, description: 'Appointment not found' })\n  update(\n    @Param() params: ParamAppointmentIdDto,\n    @Body() updateAppointmentDto: UpdateAppointmentDto,\n  ) {\n    return this.appointmentService.update(params.id, updateAppointmentDto);\n  }\n  @Get('user/:userId/pending/no-payment')\n  @ApiOperation({\n    summary: 'Get pending appointments without payments by user ID',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Pending appointments without payments returned',\n  })\n  getPendingAppointmentsWithoutPayment(@Param('userId') userId: string) {\n    return this.appointmentService.findPendingAppointmentsWithoutPayment(\n      userId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppointmentModule.html":{"url":"modules/AppointmentModule.html","title":"module - AppointmentModule","body":"\n                   \n\n\n\n\n    Modules\n    AppointmentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_imports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppointmentModule -->\n\nPrismaModule->AppointmentModule\n\n\n\n\n\nAppointmentService \n\nAppointmentService \n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nAppointmentModule -->\n\nResponseService->AppointmentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/appointment/appointment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppointmentService\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppointmentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppointmentController } from './appointment.controller';\nimport { AppointmentService } from './appointment.service';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { PrismaModule } from '../prisma/prisma.module';\n@Module({\n  imports: [PrismaModule],\n  controllers: [AppointmentController],\n  providers: [AppointmentService, ResponseService],\n  exports: [AppointmentService],\n})\nexport class AppointmentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppointmentService.html":{"url":"injectables/AppointmentService.html","title":"injectable - AppointmentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppointmentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/appointment/appointment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cancel\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createAsGuest\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByUserId\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPendingAppointmentsWithoutPayment\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/appointment/appointment.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cancel\n                        \n                    \n                \n            \n            \n                \n                        \n                    cancel(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/appointment/appointment.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: CreateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/appointment/appointment.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAsGuest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAsGuest(data: CreateGuestAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/appointment/appointment.service.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateGuestAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/appointment/appointment.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUserId(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/appointment/appointment.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/appointment/appointment.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findPendingAppointmentsWithoutPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPendingAppointmentsWithoutPayment(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/appointment/appointment.service.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateAppointmentDto: UpdateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/appointment/appointment.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { AppointmentStatus } from '@prisma/client';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { CreateGuestAppointmentDto } from './dto/create-guest-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class AppointmentService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly responseService: ResponseService,\n  ) {}\n\n  async create(data: CreateAppointmentDto) {\n    // @ts-ignore\n    // @ts-ignore\n    // @ts-ignore\n    const appointment = await this.prisma.appointment.create({\n      data: {\n        userId: data.userId,\n        vin: data.vin,\n        vehicleType: data.vehicleType,\n        titleNumber: data.titleNumber,\n        receiptNumber: data.receiptNumber,\n        scheduledAt: data.scheduledAt,\n        location: data.location,\n        issuesDate: data.issuesDate,\n        status: AppointmentStatus.PENDING,\n      },\n    });\n\n    return this.responseService.created(\n      appointment,\n      'Appointment created with status PENDING.',\n    );\n  }\n\n  async findAll() {\n    const appointments = await this.prisma.appointment.findMany({\n      where: { deletedAt: null },\n      include: { user: true, payments: true },\n    });\n\n    return this.responseService.success(\n      appointments,\n      'Appointments retrieved.',\n    );\n  }\n\n  async findOne(id: string) {\n    const appointment = await this.prisma.appointment.findUnique({\n      where: { id },\n      include: { user: true, payments: true },\n    });\n\n    if (!appointment) {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw this.responseService.notFound('Appointment not found.');\n    }\n\n    return this.responseService.success(\n      appointment,\n      'Appointment retrieved.',\n    );\n  }\n\n  async findByUserId(userId: string) {\n    const appointments = await this.prisma.appointment.findMany({\n      where: {\n        userId,\n        deletedAt: null,\n      },\n      include: { payments: true },\n    });\n\n    return this.responseService.success(\n      appointments,\n      'Appointments for user retrieved.',\n    );\n  }\n\n  async cancel(id: string) {\n    const appointment = await this.prisma.appointment.update({\n      where: { id },\n      data: { status: AppointmentStatus.CANCELED },\n    });\n\n    return this.responseService.success(appointment, 'Appointment canceled.');\n  }\n\n  async update(id: string, updateAppointmentDto: UpdateAppointmentDto) {\n    // Check if appointment exists\n    const existingAppointment = await this.prisma.appointment.findUnique({\n      where: { id },\n    });\n\n    if (!existingAppointment) {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw this.responseService.notFound('Appointment not found.');\n    }\n\n    // Update the appointment\n    const updatedAppointment = await this.prisma.appointment.update({\n      where: { id },\n      data: {\n        ...updateAppointmentDto,\n      },\n    });\n\n    return this.responseService.success(\n      updatedAppointment,\n      'Appointment updated successfully.',\n    );\n  }\n\n  async createAsGuest(data: CreateGuestAppointmentDto) {\n    // Check if user with this email already exists\n    let user = await this.prisma.user.findFirst({\n      where: { email: data.email, deletedAt: null },\n    });\n\n    // If user doesn't exist, create a temporary user\n    if (!user) {\n      // Generate a random password for the temporary user\n      const tempPassword = Math.random().toString(36).slice(-8);\n      const hashedPassword = await bcrypt.hash(tempPassword, 10);\n\n      user = await this.prisma.user.create({\n        data: {\n          email: data.email,\n          firstName: data.firstName,\n          lastName: data.lastName,\n          phone: data.phone,\n          password: hashedPassword,\n          isPhoneVerified: false, // Guest users are not verified by default\n        },\n      });\n    }\n\n    // Create the appointment\n    const appointment = await this.prisma.appointment.create({\n      data: {\n        userId: user.id,\n        vin: data.vin,\n        vehicleType: data.vehicleType,\n        titleNumber: data.titleNumber,\n        receiptNumber: data.receiptNumber,\n        scheduledAt: data.scheduledAt,\n        location: data.location,\n\n        status: AppointmentStatus.PENDING,\n      },\n      include: { user: true },\n    });\n\n    return this.responseService.created(\n      appointment,\n      'Guest appointment created with status PENDING.',\n    );\n  }\n  async findPendingAppointmentsWithoutPayment(userId: string) {\n    const appointments = await this.prisma.appointment.findMany({\n      where: {\n        userId,\n        status: AppointmentStatus.PENDING,\n        deletedAt: null,\n        payments: {\n          none: {}, // aucun paiement associé\n        },\n      },\n    });\n\n    return this.responseService.success(\n      appointments,\n      'Pending appointments without payments retrieved.',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                logout\n                            \n                            \n                                    \n                                    \n                                    \n                                refresh\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                requestPasswordReset\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@ApiOperation({summary: 'Connexion simple'})@ApiResponse({status: 200, description: 'Connexion réussie'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@ApiOperation({summary: 'Déconnexion de l’utilisateur'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('refresh')@ApiOperation({summary: 'Rafraîchir un token JWT'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        requestPasswordReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    requestPasswordReset(dto: RequestPasswordResetDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('request-password-reset')@ApiOperation({summary: 'Demander un code de réinitialisation de mot de passe'})@ApiResponse({status: 200, description: 'Code envoyé avec succès'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            RequestPasswordResetDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(dto: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('reset-password')@ApiOperation({summary: 'Réinitialiser le mot de passe avec le code reçu'})@ApiResponse({status: 200, description: 'Mot de passe réinitialisé avec succès'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n\n  Controller,\n  Post,\n  Body,\n  Headers,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { ResetPasswordDto } from './dto/reset-password.dto';\nimport { RequestPasswordResetDto } from './dto/request-password-reset.dto';\nimport { Public } from '../common/decorator/public.decorator';\n\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Public()\n  @Post('login')\n  @ApiOperation({ summary: 'Connexion simple' })\n  @ApiResponse({ status: 200, description: 'Connexion réussie' })\n  login(@Body() loginDto: LoginDto) {\n    return this.authService.login(loginDto.email, loginDto.password);\n  }\n\n  @Post('logout')\n  @ApiOperation({ summary: 'Déconnexion de l’utilisateur' })\n  logout(@Headers('authorization') authHeader: string) {\n    const token = authHeader.replace('Bearer ', '');\n    return this.authService.logout(token);\n  }\n\n  @Public()\n  @Post('refresh')\n  @ApiOperation({ summary: 'Rafraîchir un token JWT' })\n  refresh(@Body() body: { refreshToken: string }) {\n    return this.authService.refresh(body.refreshToken);\n  }\n\n  @Public()\n  @Post('request-password-reset')\n  @ApiOperation({\n    summary: 'Demander un code de réinitialisation de mot de passe',\n  })\n  @ApiResponse({ status: 200, description: 'Code envoyé avec succès' })\n  requestPasswordReset(@Body() dto: RequestPasswordResetDto) {\n    return this.authService.requestPasswordReset(dto.email);\n  }\n\n  @Public()\n  @Post('reset-password')\n  @ApiOperation({ summary: 'Réinitialiser le mot de passe avec le code reçu' })\n  @ApiResponse({\n    status: 200,\n    description: 'Mot de passe réinitialisé avec succès',\n  })\n  resetPassword(@Body() dto: ResetPasswordDto) {\n    return this.authService.resetPassword(dto.email, dto.code, dto.newPassword);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAuthModule -->\n\nSmsModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nBlacklistTokenService\n\nBlacklistTokenService\n\nAuthModule -->\n\nBlacklistTokenService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRefreshTokenService\n\nRefreshTokenService\n\nAuthModule -->\n\nRefreshTokenService->AuthModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nAuthModule -->\n\nResponseService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            BlacklistTokenService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            RefreshTokenService\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            SmsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // src/auth/auth.module.ts\nimport { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { UserModule } from '../user/user.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtStrategy } from './jwt-strategy/jwt.strategy';\nimport { AuthService } from './auth.service';\nimport { BlacklistTokenService } from './blacklist-token/blacklist-token.service';\nimport { RefreshTokenService } from './refresh-token/refresh-token.service';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { AuthController } from './auth.controller';\nimport { JwtAuthGuard } from './jwt-auth/jwt-auth.guard';\nimport { APP_GUARD } from '@nestjs/core';\nimport { SmsModule } from '../sms/sms.module';\n\n@Module({\n  imports: [\n    PrismaModule,\n    UserModule,\n    ConfigModule,\n    SmsModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: (config: ConfigService) => ({\n        secret: config.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: config.get('JWT_EXPIRES_IN', '15m'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [\n    AuthService,\n    JwtStrategy,\n    BlacklistTokenService,\n    RefreshTokenService,\n    ResponseService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard, // 👈 Guard global ici\n    },\n  ],\n  controllers: [AuthController],\n  exports: [AuthService, JwtModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                requestPasswordReset\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, jwtService: JwtService, config: ConfigService, blacklistService: BlacklistTokenService, refreshTokenService: RefreshTokenService, responseService: ResponseService, smsService: SmsServiceInterface)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        blacklistService\n                                                  \n                                                        \n                                                                        BlacklistTokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenService\n                                                  \n                                                        \n                                                                        RefreshTokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        smsService\n                                                  \n                                                        \n                                                                        SmsServiceInterface\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        requestPasswordReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    requestPasswordReset(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(email: string, code: string, newPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:143\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  BadRequestException,\n  ConflictException,\n  HttpException,\n  Inject,\n} from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { ConfigService } from '@nestjs/config';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { BlacklistTokenService } from './blacklist-token/blacklist-token.service';\nimport { RefreshTokenService } from './refresh-token/refresh-token.service';\nimport { SMS_SERVICE, SmsServiceInterface } from '../sms/sms.interface';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly jwtService: JwtService,\n    private readonly config: ConfigService,\n    private readonly blacklistService: BlacklistTokenService,\n    private readonly refreshTokenService: RefreshTokenService,\n    private readonly responseService: ResponseService,\n    @Inject(SMS_SERVICE)\n    private readonly smsService: SmsServiceInterface,\n  ) {}\n\n  async validateUser(email: string, password: string) {\n    const user = await this.prisma.user.findFirst({\n      where: { email, deletedAt: null },\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    if (!user || !(await bcrypt.compare(password, user.password))) {\n      throw new HttpException(\n        this.responseService.unauthorized('Identifiants invalides'),\n        401,\n      );\n    }\n\n    return user;\n  }\n\n  async login(email: string, password: string) {\n    const user = await this.validateUser(email, password);\n\n    if (!user.isPhoneVerified) {\n      throw new HttpException(\n        this.responseService.inactiveAccount(user.id),\n        400,\n      );\n    }\n    const token = await this.generateToken(user.id);\n    const refreshToken = await this.refreshTokenService.create(user.id);\n\n    return this.responseService.success(\n      {\n        user,\n        token,\n        refreshToken,\n      },\n      'Connexion réussie',\n    );\n  }\n\n  async logout(token: string) {\n    const alreadyBlacklisted = await this.prisma.blacklistedToken.findUnique({\n      where: { token },\n    });\n\n    if (alreadyBlacklisted) {\n      throw new ConflictException(\n        this.responseService.conflict('Token already blacklisted'),\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const decoded = this.jwtService.decode(token);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (!decoded || typeof decoded !== 'object' || !decoded.exp) {\n      throw new BadRequestException('Token invalid');\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    await this.blacklistService.blacklist(token, new Date(decoded.exp * 1000));\n\n    return this.responseService.success(null, 'Déconnexion réussie');\n  }\n\n  async refresh(refreshToken: string) {\n    const valid = await this.refreshTokenService.validate(refreshToken);\n\n    if (!valid) {\n      throw new UnauthorizedException('Refresh token invalid');\n    }\n\n    const token = await this.generateToken(valid.userId);\n    const newRefresh = await this.refreshTokenService.rotate(refreshToken);\n\n    const user = await this.prisma.user.findUnique({\n      where: { id: valid.userId },\n    });\n\n    return this.responseService.success(\n      {\n        user,\n        token,\n        refreshToken: newRefresh.token,\n      },\n      'Token rafraîchi',\n    );\n  }\n\n  private async generateToken(userId: string): Promise {\n    return this.jwtService.signAsync({ sub: userId });\n  }\n\n  async requestPasswordReset(email: string) {\n    const user = await this.prisma.user.findFirst({\n      where: { email, deletedAt: null },\n    });\n\n    if (!user) {\n      throw new HttpException(\n        this.responseService.notFound('User not found'),\n        404,\n      );\n    }\n\n    // Send OTP via SMS\n    await this.smsService.sendOtp(user.phone);\n\n    return this.responseService.success(\n      null,\n      'Password reset code sent to your phone via SMS',\n    );\n  }\n\n  async resetPassword(email: string, code: string, newPassword: string) {\n    const user = await this.prisma.user.findFirst({\n      where: { email, deletedAt: null },\n    });\n\n    if (!user) {\n      throw new HttpException(\n        this.responseService.notFound('User not found'),\n        404,\n      );\n    }\n\n    // Verify OTP code\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const result = await this.smsService.verifyOtp(user.phone, code);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (result.status !== 'approved') {\n      throw new HttpException(\n        this.responseService.badRequest(['Invalid verification code']),\n        400,\n      );\n    }\n\n    // Hash new password\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n\n    // Update password\n    await this.prisma.user.update({\n      where: { id: user.id },\n      data: {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        password: hashedPassword,\n      },\n    });\n\n    return this.responseService.success(null, 'Password reset successfully');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticatedRequest.html":{"url":"interfaces/AuthenticatedRequest.html","title":"interface - AuthenticatedRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticatedRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/document/document.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Get,\n  Patch,\n  Delete,\n  Param,\n  Body,\n  UploadedFile,\n  UseInterceptors,\n  Req,\n} from '@nestjs/common';\nimport { DocumentService } from './document.service';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiBody,\n  ApiConsumes,\n  ApiBearerAuth,\n  ApiResponse,\n} from '@nestjs/swagger';\nimport { CreateDocumentDto } from './dto/create-document.dto';\nimport { UpdateDocumentDto } from './dto/update-document.dto';\nimport { ParamDocumentIdDto } from './dto/param-document-id.dto';\nimport { DocumentResponseDto } from './dto/document-response.dto';\nimport { Request } from 'express';\n\n// Define a custom interface for the authenticated request\ninterface AuthenticatedRequest extends Request {\n  user: {\n    id: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    isPhoneVerified: boolean;\n    codeOtp: string | null;\n    phone: string;\n    password: string;\n    createdAt: Date;\n    updatedAt: Date;\n    deletedAt: Date | null;\n  };\n}\n\n@ApiTags('Documents')\n@ApiBearerAuth('access-token')\n@Controller('documents')\nexport class DocumentController {\n  constructor(private readonly documentService: DocumentService) {}\n\n  @Post('upload')\n  @UseInterceptors(FileInterceptor('file'))\n  @ApiOperation({ summary: 'Uploader un document (auth)' })\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        file: { type: 'string', format: 'binary' },\n        type: {\n          type: 'string',\n          enum: ['LICENSE', 'TITLE', 'RECEIPT'],\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Document uploadé avec succès',\n    type: DocumentResponseDto,\n  })\n  @ApiResponse({ status: 400, description: 'Requête invalide' })\n  upload(\n    @UploadedFile() file: Express.Multer.File,\n    @Body() body: CreateDocumentDto,\n    @Req() req: AuthenticatedRequest,\n  ) {\n    const userId = req.user.id;\n    return this.documentService.upload(userId, file, body.type);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Lister les documents de l’utilisateur connecté' })\n  @ApiResponse({\n    status: 200,\n    description: 'Liste des documents de l\\'utilisateur',\n    type: [DocumentResponseDto],\n  })\n  findAll(@Req() req: AuthenticatedRequest) {\n    const userId = req.user.id;\n    return this.documentService.findAll(userId);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Récupérer un document par ID' })\n  @ApiResponse({\n    status: 200,\n    description: 'Document trouvé',\n    type: DocumentResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Document non trouvé' })\n  findOne(@Param() params: ParamDocumentIdDto) {\n    return this.documentService.findOne(params.id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Mettre à jour le type d’un document' })\n  @ApiBody({ type: UpdateDocumentDto })\n  @ApiResponse({\n    status: 200,\n    description: 'Document mis à jour',\n    type: DocumentResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Document non trouvé' })\n  update(\n    @Param() params: ParamDocumentIdDto,\n    @Body() body: UpdateDocumentDto,\n  ) {\n    return this.documentService.update(params.id, body.type);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Supprimer un document (soft delete)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Document supprimé',\n    type: DocumentResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Document non trouvé' })\n  remove(@Param() params: ParamDocumentIdDto) {\n    return this.documentService.remove(params.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BlacklistTokenService.html":{"url":"injectables/BlacklistTokenService.html","title":"injectable - BlacklistTokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BlacklistTokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/blacklist-token/blacklist-token.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                blacklist\n                            \n                            \n                                    Async\n                                isBlacklisted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, responseservice: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/blacklist-token/blacklist-token.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseservice\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        blacklist\n                        \n                    \n                \n            \n            \n                \n                        \n                    blacklist(token: string, expiresAt: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/blacklist-token/blacklist-token.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresAt\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isBlacklisted\n                        \n                    \n                \n            \n            \n                \n                        \n                    isBlacklisted(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/blacklist-token/blacklist-token.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../../prisma/prisma.service';\nimport { ResponseService } from '../../validation/exception/response/response.service';\n\n@Injectable()\nexport class BlacklistTokenService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private responseservice: ResponseService,\n  ) {}\n\n  async blacklist(token: string, expiresAt: Date): Promise {\n\n    await this.prisma.blacklistedToken.create({\n      data: {\n        token,\n        expiresAt,\n      },\n    });\n  }\n\n  async isBlacklisted(token: string): Promise {\n    const blacklisted = await this.prisma.blacklistedToken.findUnique({\n      where: { token },\n    });\n\n    return !!blacklisted;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CacheEvictOptions.html":{"url":"interfaces/CacheEvictOptions.html","title":"interface - CacheEvictOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CacheEvictOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/decorator/cache/cache-evict.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:     string | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | \n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { SetMetadata } from '@nestjs/common';\n\nexport const CACHE_EVICT_KEY = 'CACHE_EVICT_METADATA';\n\nexport interface CacheEvictOptions {\n  key: string | ((params: any) => string);\n}\n\nexport const CacheEvict = (options: CacheEvictOptions) =>\n  SetMetadata(CACHE_EVICT_KEY, options);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CacheInterceptor.html":{"url":"injectables/CacheInterceptor.html","title":"injectable - CacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptor/cache.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptor/cache.interceptor.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptor/cache.interceptor.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable, from } from 'rxjs';\nimport { tap, switchMap } from 'rxjs/operators';\nimport { Reflector } from '@nestjs/core';\nimport { RedisService } from '../../redis/redis.service';\nimport { CACHE_PREFIX_KEY } from '../decorator/cache/cache-prefix.decorator';\nimport {\n  CACHEABLE_KEY,\n  CacheableOptions,\n} from '../decorator/cache/cacheable.decorator';\nimport {\n  CACHE_EVICT_KEY,\n  CacheEvictOptions,\n} from '../decorator/cache/cache-evict.decorator';\n\n@Injectable()\nexport class CacheInterceptor implements NestInterceptor {\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly redisService: RedisService,\n  ) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const handler = context.getHandler();\n    const target = context.getClass();\n\n    const prefix = this.reflector.get(CACHE_PREFIX_KEY, target);\n    const cacheable = this.reflector.get(\n      CACHEABLE_KEY,\n      handler,\n    );\n    const evict = this.reflector.get(\n      CACHE_EVICT_KEY,\n      handler,\n    );\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const request = context.switchToHttp().getRequest();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n    const params = request.params;\n\n    // ✳️ Evict Mode\n    if (evict) {\n      const key =\n        typeof evict.key === 'function' ? evict.key(params) : evict.key;\n      const fullKey = prefix ? `${prefix}:${key}` : key;\n\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      return next.handle().pipe(tap(() => this.redisService.del(fullKey)));\n    }\n\n    // ✅ Cache Mode\n    if (cacheable) {\n      const key =\n        typeof cacheable.key === 'function'\n          ? cacheable.key(params)\n          : cacheable.key;\n      const fullKey = prefix ? `${prefix}:${key}` : key;\n\n      return from(this.redisService.get(fullKey)).pipe(\n        switchMap((cached) => {\n          if (cached !== null) return from([cached]);\n\n          return next.handle().pipe(\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            tap(async (result) => {\n              await this.redisService.set(fullKey, result, cacheable.ttl);\n            }),\n          );\n        }),\n      );\n    }\n\n    // 🟡 Default, passthrough\n    return next.handle();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CacheModule.html":{"url":"modules/CacheModule.html","title":"module - CacheModule","body":"\n                   \n\n\n\n\n    Modules\n    CacheModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CacheModule\n\n\n\ncluster_CacheModule_imports\n\n\n\ncluster_CacheModule_exports\n\n\n\ncluster_CacheModule_providers\n\n\n\n\nRedisModule\n\nRedisModule\n\n\n\nCacheModule\n\nCacheModule\n\nCacheModule -->\n\nRedisModule->CacheModule\n\n\n\n\n\nCacheService \n\nCacheService \n\nCacheService  -->\n\nCacheModule->CacheService \n\n\n\n\n\nCacheService\n\nCacheService\n\nCacheModule -->\n\nCacheService->CacheModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cache/cache.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CacheService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CacheService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CacheService } from './cache.service';\nimport { RedisModule } from '../redis/redis.module';\n\n@Module({\n  imports: [RedisModule],\n  providers: [CacheService],\n  exports: [CacheService],\n})\nexport class CacheModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CacheService.html":{"url":"injectables/CacheService.html","title":"injectable - CacheService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CacheService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cache/cache.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getOrSet\n                            \n                            \n                                    Async\n                                invalidate\n                            \n                            \n                                    Async\n                                invalidatePattern\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/cache/cache.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOrSet\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrSet(key: string, fetcher: () => void, ttlSeconds: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cache/cache.service.ts:15\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Gets a value from the cache or sets it if it doesn't exist\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The cache key\n\n                                            \n                                        \n                                        \n                                                fetcher\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    A function that returns the value to cache if not found\n\n                                            \n                                        \n                                        \n                                                ttlSeconds\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    3600\n                                            \n\n                                            \n                                                    Time to live in seconds (default: 1 hour)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The cached value or the result of the fetcher function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        invalidate\n                        \n                    \n                \n            \n            \n                \n                        \n                    invalidate(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cache/cache.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Invalidates a specific cache key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The cache key to invalidate\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        invalidatePattern\n                        \n                    \n                \n            \n            \n                \n                        \n                    invalidatePattern(pattern: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cache/cache.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Invalidates all cache keys matching a pattern\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                pattern\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The pattern to match (e.g., 'user:*')\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RedisService } from '../redis/redis.service';\n\n@Injectable()\nexport class CacheService {\n  constructor(private readonly redisService: RedisService) {}\n\n  /**\n   * Gets a value from the cache or sets it if it doesn't exist\n   * @param key The cache key\n   * @param fetcher A function that returns the value to cache if not found\n   * @param ttlSeconds Time to live in seconds (default: 1 hour)\n   * @returns The cached value or the result of the fetcher function\n   */\n  async getOrSet(\n    key: string,\n    fetcher: () => Promise,\n    ttlSeconds = 3600,\n  ): Promise {\n    const cachedValue = await this.redisService.get(key);\n    if (cachedValue !== null) {\n      return cachedValue;\n    }\n\n    const value = await fetcher();\n    await this.redisService.set(key, value, ttlSeconds);\n    return value;\n  }\n\n  /**\n   * Invalidates a specific cache key\n   * @param key The cache key to invalidate\n   */\n  async invalidate(key: string): Promise {\n    await this.redisService.del(key);\n  }\n\n  /**\n   * Invalidates all cache keys matching a pattern\n   * @param pattern The pattern to match (e.g., 'user:*')\n   */\n  async invalidatePattern(pattern: string): Promise {\n    // Use the cacheable method to get all keys matching the pattern\n    // This is a simplified implementation for demonstration purposes\n    const keys = await this.redisService.cacheable(\n      `scan:${pattern}`,\n      60,\n      async () => {\n        // In a real implementation, you would use Redis SCAN command\n        // to get all keys matching the pattern\n        // For this example, we'll rely on the mock implementation in the test\n        return [];\n      },\n    );\n\n    // Delete each key\n    if (keys && keys.length > 0) {\n      for (const key of keys) {\n        await this.redisService.del(key);\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CacheableOptions.html":{"url":"interfaces/CacheableOptions.html","title":"interface - CacheableOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CacheableOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/decorator/cache/cacheable.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            ttl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:     string | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | \n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ttl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ttl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { SetMetadata } from '@nestjs/common';\n\nexport const CACHEABLE_KEY = 'CACHEABLE_METADATA';\n\nexport interface CacheableOptions {\n  key: string | ((params: any) => string);\n  ttl: number;\n}\n\nexport const Cacheable = (options: CacheableOptions) =>\n  SetMetadata(CACHEABLE_KEY, options);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudinaryService.html":{"url":"injectables/CloudinaryService.html","title":"injectable - CloudinaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CloudinaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/cloudinary/cloudinary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                uploadMultiple\n                            \n                            \n                                    Async\n                                uploadSingle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/upload/cloudinary/cloudinary.service.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(fileId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/cloudinary/cloudinary.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadMultiple(files: Express.Multer.File[], folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/cloudinary/cloudinary.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'documents'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadSingle\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadSingle(file: Express.Multer.File, folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/cloudinary/cloudinary.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'documents'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(CloudinaryService.name)\n                    \n                \n                    \n                        \n                                Defined in src/upload/cloudinary/cloudinary.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { v2 as cloudinary } from 'cloudinary';\nimport {\n  FileStorageService,\n  FileUploadResult,\n} from '../interfaces/upload.interface';\n@Injectable()\nexport class CloudinaryService implements FileStorageService {\n  private logger = new Logger(CloudinaryService.name);\n\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    cloudinary.config({\n      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n      api_key: process.env.CLOUDINARY_API_KEY,\n      api_secret: process.env.CLOUDINARY_API_SECRET,\n    });\n  }\n\n  async uploadSingle(\n    file: Express.Multer.File,\n    folder = 'documents',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const uploadStream = cloudinary.uploader.upload_stream(\n        { folder },\n        (error, result) => {\n          if (error) {\n            this.logger.error(`❌ Erreur Cloudinary: ${JSON.stringify(error)}`);\n            return reject(error);\n          }\n          if (!result) return reject(new Error('Upload vide'));\n\n          this.logger.log(`✅ Upload OK: ${result.public_id}`);\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          resolve({ url: result.secure_url, id: result.public_id });\n        },\n      );\n      uploadStream.end(file.buffer);\n    });\n  }\n\n  async uploadMultiple(\n    files: Express.Multer.File[],\n    folder = 'documents',\n  ): Promise {\n    if (!files?.length) return [];\n    return await Promise.all(\n      files.map((file) => this.uploadSingle(file, folder)),\n    );\n  }\n\n  async deleteFile(fileId: string): Promise {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      await cloudinary.uploader.destroy(fileId);\n      this.logger.log(`🗑️ Fichier supprimé : ${fileId}`);\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (error) {\n      this.logger.warn(`⚠️ Suppression Cloudinary échouée : ${fileId}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAppointmentDto.html":{"url":"classes/CreateAppointmentDto.html","title":"class - CreateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/appointment/dto/create-appointment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                issuesDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                location\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                receiptNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                scheduledAt\n                            \n                            \n                                    \n                                    \n                                    \n                                titleNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                            \n                                    \n                                    \n                                    \n                                vehicleType\n                            \n                            \n                                    \n                                    \n                                    \n                                vin\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        issuesDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiProperty({example: '2025-10-04', description: 'Date d’émission du reçu (si fourni)', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-appointment.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123 Main St, City, State', description: 'Lieu du rendez-vous', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-appointment.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        receiptNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'REC123456', description: 'Numéro de reçu', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-appointment.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        scheduledAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2023-06-15T14:00:00', description: 'Date et heure du rendez-vous', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-appointment.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        titleNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ABC123456', description: 'Numéro du titre'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-appointment.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'uuid-user', description: 'ID de l'utilisateur'})@IsUUID()@IsNotEmpty()@Exists('user', 'id', {message: 'Utilisateur introuvable'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-appointment.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        vehicleType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'SUV', description: 'Type de véhicule'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-appointment.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        vin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '1HGCM82633A123456', description: 'Numéro d'identification du véhicule (VIN)'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-appointment.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, IsUUID, IsOptional } from 'class-validator';\nimport { Exists } from '../../common/decorator/validators/exists.decorator';\n\nexport class CreateAppointmentDto {\n  @ApiProperty({ example: 'uuid-user', description: \"ID de l'utilisateur\" })\n  @IsUUID()\n  @IsNotEmpty()\n  @Exists('user', 'id', { message: 'Utilisateur introuvable' })\n  userId: string;\n\n  @ApiProperty({\n    example: '1HGCM82633A123456',\n    description: \"Numéro d'identification du véhicule (VIN)\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  vin: string;\n\n  @ApiProperty({ example: 'SUV', description: 'Type de véhicule' })\n  @IsString()\n  @IsNotEmpty()\n  vehicleType: string;\n\n  @ApiProperty({ example: 'ABC123456', description: 'Numéro du titre' })\n  @IsString()\n  @IsNotEmpty()\n  titleNumber: string;\n\n  @ApiProperty({\n    example: 'REC123456',\n    description: 'Numéro de reçu',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  receiptNumber?: string;\n\n  @ApiProperty({\n    example: '2023-06-15T14:00:00',\n    description: 'Date et heure du rendez-vous',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  scheduledAt?: string;\n\n  @ApiProperty({\n    example: '123 Main St, City, State',\n    description: 'Lieu du rendez-vous',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  location?: string;\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: '2025-10-04',\n    description: 'Date d’émission du reçu (si fourni)',\n    required: false,\n  })\n  issuesDate?: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDocumentDto.html":{"url":"classes/CreateDocumentDto.html","title":"class - CreateDocumentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDocumentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/document/dto/create-document.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DocumentType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: DocumentType, example: undefined, description: 'Type du document'})@IsNotEmpty()@IsEnum(DocumentType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/create-document.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty } from 'class-validator';\nimport { DocumentType } from '@prisma/client';\n\nexport class CreateDocumentDto {\n  @ApiProperty({\n    enum: DocumentType,\n    example: DocumentType.LICENSE,\n    description: 'Type du document',\n  })\n  @IsNotEmpty()\n  @IsEnum(DocumentType)\n  type: DocumentType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateGuestAppointmentDto.html":{"url":"classes/CreateGuestAppointmentDto.html","title":"class - CreateGuestAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateGuestAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/appointment/dto/create-guest-appointment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                issuesDate\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                location\n                            \n                            \n                                    \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                receiptNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                scheduledAt\n                            \n                            \n                                    \n                                    \n                                    \n                                titleNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                vehicleType\n                            \n                            \n                                    \n                                    \n                                    \n                                vin\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'Email du client'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'Prénom du client'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuesDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'Nom du client'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123 Main St, City, State', description: 'Lieu du rendez-vous', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+1234567890', description: 'Numéro de téléphone du client'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        receiptNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'REC123456', description: 'Numéro de reçu', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        scheduledAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2023-06-15T14:00:00', description: 'Date et heure du rendez-vous', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        titleNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ABC123456', description: 'Numéro du titre'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        vehicleType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'SUV', description: 'Type de véhicule'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        vin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '1HGCM82633A123456', description: 'Numéro d'identification du véhicule (VIN)'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, IsEmail, IsOptional } from 'class-validator';\n\nexport class CreateGuestAppointmentDto {\n  @ApiProperty({ example: 'John', description: 'Prénom du client' })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiProperty({ example: 'Doe', description: 'Nom du client' })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiProperty({ example: 'john.doe@example.com', description: 'Email du client' })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({ example: '+1234567890', description: 'Numéro de téléphone du client' })\n  @IsString()\n  @IsNotEmpty()\n  phone: string;\n\n  @ApiProperty({ example: '1HGCM82633A123456', description: 'Numéro d\\'identification du véhicule (VIN)' })\n  @IsString()\n  @IsNotEmpty()\n  vin: string;\n\n  @ApiProperty({ example: 'SUV', description: 'Type de véhicule' })\n  @IsString()\n  @IsNotEmpty()\n  vehicleType: string;\n\n  @ApiProperty({ example: 'ABC123456', description: 'Numéro du titre' })\n  @IsString()\n  @IsNotEmpty()\n  titleNumber: string;\n\n  @ApiProperty({ example: 'REC123456', description: 'Numéro de reçu', required: false })\n  @IsString()\n  @IsOptional()\n  receiptNumber?: string;\n\n  @ApiProperty({ example: '2023-06-15T14:00:00', description: 'Date et heure du rendez-vous', required: false })\n  @IsString()\n  @IsOptional()\n  scheduledAt?: string;\n\n  @ApiProperty({ example: '123 Main St, City, State', description: 'Lieu du rendez-vous', required: false })\n  @IsString()\n  @IsOptional()\n  location?: string;\n  issuesDate: string | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePaymentDto.html":{"url":"classes/CreatePaymentDto.html","title":"class - CreatePaymentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePaymentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/dto/create-payment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                amounts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                appointmentIds\n                            \n                            \n                                    \n                                    \n                                    \n                                currency\n                            \n                            \n                                    \n                                    \n                                    \n                                paymentModeId\n                            \n                            \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        amounts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Liste des montants par rendez-vous'})@IsArray()@ArrayNotEmpty()@IsNumber({}, {each: true})@Min(0.01, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/dto/create-payment.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        appointmentIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Liste des IDs des rendez-vous à payer'})@IsArray()@ArrayNotEmpty()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/dto/create-payment.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Devise utilisée', example: 'usd'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/dto/create-payment.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        paymentModeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID du mode de paiement', example: 'payment-mode-uuid'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/dto/create-payment.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID de l’utilisateur', example: 'user-uuid'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/dto/create-payment.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsString,\n  IsNotEmpty,\n  IsArray,\n  ArrayNotEmpty,\n  IsNumber,\n  Min,\n} from 'class-validator';\n\nexport class CreatePaymentDto {\n  @ApiProperty({ description: 'ID de l’utilisateur', example: 'user-uuid' })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n\n  @ApiProperty({ description: 'Liste des IDs des rendez-vous à payer' })\n  @IsArray()\n  @ArrayNotEmpty()\n  @IsString({ each: true })\n  appointmentIds: string[];\n\n  @ApiProperty({\n    description: 'ID du mode de paiement',\n    example: 'payment-mode-uuid',\n  })\n  @IsString()\n  @IsNotEmpty()\n  paymentModeId: string;\n\n  @ApiProperty({ description: 'Liste des montants par rendez-vous' })\n  @IsArray()\n  @ArrayNotEmpty()\n  @IsNumber({}, { each: true })\n  @Min(0.01, { each: true })\n  amounts: number[];\n\n  @ApiProperty({ description: 'Devise utilisée', example: 'usd' })\n  @IsString()\n  @IsNotEmpty()\n  currency: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePaymentModeDto.html":{"url":"classes/CreatePaymentModeDto.html","title":"class - CreatePaymentModeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePaymentModeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment-mode/dto/create-payment-mode.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Carte Bancaire', description: 'Nom du mode de paiement'})@IsString()@IsNotEmpty()@Unique('paymentMode', 'name', {message: 'Payment mode name already exists'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment-mode/dto/create-payment-mode.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Unique } from '../../common/decorator/validators/unique.decorator';\n\n// @ts-ignore\nexport class CreatePaymentModeDto {\n  @ApiProperty({\n    example: 'Carte Bancaire',\n    description: 'Nom du mode de paiement',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Unique('paymentMode', 'name', {\n    message: 'Payment mode name already exists',\n  })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'Adresse email'})@IsEmail()@IsNotEmpty()@Unique('user', 'email', {message: 'Email already exists'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'Prénom'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'Nom de famille'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'StrongPassword123', description: 'Mot de passe sécurisé'})@IsString()@IsNotEmpty()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+14155552671', description: 'Téléphone'})@IsPhoneNumber()@IsNotEmpty()@Unique('user', 'phone', {message: 'Phone number already exists'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MinLength,\n  IsPhoneNumber,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Unique } from '../../common/decorator/validators/unique.decorator';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    example: 'john.doe@example.com',\n    description: 'Adresse email',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  @Unique('user', 'email', { message: 'Email already exists' })\n  email: string;\n\n  @ApiProperty({ example: '+14155552671', description: 'Téléphone' })\n  @IsPhoneNumber()\n  @IsNotEmpty()\n  @Unique('user', 'phone', { message: 'Phone number already exists' })\n  phone: string;\n\n  @ApiProperty({ example: 'John', description: 'Prénom' })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiProperty({ example: 'Doe', description: 'Nom de famille' })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiProperty({\n    example: 'StrongPassword123',\n    description: 'Mot de passe sécurisé',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DocumentController.html":{"url":"controllers/DocumentController.html","title":"controller - DocumentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DocumentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/document/document.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                documents\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(req: AuthenticatedRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Lister les documents de l’utilisateur connecté'})@ApiResponse({status: 200, description: 'Liste des documents de l'utilisateur', type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/document/document.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            AuthenticatedRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(params: ParamDocumentIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Récupérer un document par ID'})@ApiResponse({status: 200, description: 'Document trouvé', type: DocumentResponseDto})@ApiResponse({status: 404, description: 'Document non trouvé'})\n                \n            \n\n                    \n                        \n                            Defined in src/document/document.controller.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            ParamDocumentIdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(params: ParamDocumentIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Supprimer un document (soft delete)'})@ApiResponse({status: 200, description: 'Document supprimé', type: DocumentResponseDto})@ApiResponse({status: 404, description: 'Document non trouvé'})\n                \n            \n\n                    \n                        \n                            Defined in src/document/document.controller.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            ParamDocumentIdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(params: ParamDocumentIdDto, body: UpdateDocumentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Mettre à jour le type d’un document'})@ApiBody({type: UpdateDocumentDto})@ApiResponse({status: 200, description: 'Document mis à jour', type: DocumentResponseDto})@ApiResponse({status: 404, description: 'Document non trouvé'})\n                \n            \n\n                    \n                        \n                            Defined in src/document/document.controller.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            ParamDocumentIdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateDocumentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(file: Express.Multer.File, body: CreateDocumentDto, req: AuthenticatedRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('upload')@UseInterceptors(undefined)@ApiOperation({summary: 'Uploader un document (auth)'})@ApiConsumes('multipart/form-data')@ApiBody({schema: undefined})@ApiResponse({status: 201, description: 'Document uploadé avec succès', type: DocumentResponseDto})@ApiResponse({status: 400, description: 'Requête invalide'})\n                \n            \n\n                    \n                        \n                            Defined in src/document/document.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            CreateDocumentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            AuthenticatedRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Get,\n  Patch,\n  Delete,\n  Param,\n  Body,\n  UploadedFile,\n  UseInterceptors,\n  Req,\n} from '@nestjs/common';\nimport { DocumentService } from './document.service';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiBody,\n  ApiConsumes,\n  ApiBearerAuth,\n  ApiResponse,\n} from '@nestjs/swagger';\nimport { CreateDocumentDto } from './dto/create-document.dto';\nimport { UpdateDocumentDto } from './dto/update-document.dto';\nimport { ParamDocumentIdDto } from './dto/param-document-id.dto';\nimport { DocumentResponseDto } from './dto/document-response.dto';\nimport { Request } from 'express';\n\n// Define a custom interface for the authenticated request\ninterface AuthenticatedRequest extends Request {\n  user: {\n    id: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    isPhoneVerified: boolean;\n    codeOtp: string | null;\n    phone: string;\n    password: string;\n    createdAt: Date;\n    updatedAt: Date;\n    deletedAt: Date | null;\n  };\n}\n\n@ApiTags('Documents')\n@ApiBearerAuth('access-token')\n@Controller('documents')\nexport class DocumentController {\n  constructor(private readonly documentService: DocumentService) {}\n\n  @Post('upload')\n  @UseInterceptors(FileInterceptor('file'))\n  @ApiOperation({ summary: 'Uploader un document (auth)' })\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        file: { type: 'string', format: 'binary' },\n        type: {\n          type: 'string',\n          enum: ['LICENSE', 'TITLE', 'RECEIPT'],\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Document uploadé avec succès',\n    type: DocumentResponseDto,\n  })\n  @ApiResponse({ status: 400, description: 'Requête invalide' })\n  upload(\n    @UploadedFile() file: Express.Multer.File,\n    @Body() body: CreateDocumentDto,\n    @Req() req: AuthenticatedRequest,\n  ) {\n    const userId = req.user.id;\n    return this.documentService.upload(userId, file, body.type);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Lister les documents de l’utilisateur connecté' })\n  @ApiResponse({\n    status: 200,\n    description: 'Liste des documents de l\\'utilisateur',\n    type: [DocumentResponseDto],\n  })\n  findAll(@Req() req: AuthenticatedRequest) {\n    const userId = req.user.id;\n    return this.documentService.findAll(userId);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Récupérer un document par ID' })\n  @ApiResponse({\n    status: 200,\n    description: 'Document trouvé',\n    type: DocumentResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Document non trouvé' })\n  findOne(@Param() params: ParamDocumentIdDto) {\n    return this.documentService.findOne(params.id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Mettre à jour le type d’un document' })\n  @ApiBody({ type: UpdateDocumentDto })\n  @ApiResponse({\n    status: 200,\n    description: 'Document mis à jour',\n    type: DocumentResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Document non trouvé' })\n  update(\n    @Param() params: ParamDocumentIdDto,\n    @Body() body: UpdateDocumentDto,\n  ) {\n    return this.documentService.update(params.id, body.type);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Supprimer un document (soft delete)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Document supprimé',\n    type: DocumentResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Document non trouvé' })\n  remove(@Param() params: ParamDocumentIdDto) {\n    return this.documentService.remove(params.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DocumentModule.html":{"url":"modules/DocumentModule.html","title":"module - DocumentModule","body":"\n                   \n\n\n\n\n    Modules\n    DocumentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DocumentModule\n\n\n\ncluster_DocumentModule_imports\n\n\n\ncluster_DocumentModule_providers\n\n\n\n\nUploadModule\n\nUploadModule\n\n\n\nDocumentModule\n\nDocumentModule\n\nDocumentModule -->\n\nUploadModule->DocumentModule\n\n\n\n\n\nDocumentService\n\nDocumentService\n\nDocumentModule -->\n\nDocumentService->DocumentModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nDocumentModule -->\n\nPrismaService->DocumentModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nDocumentModule -->\n\nResponseService->DocumentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/document/document.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DocumentService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DocumentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UploadModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // src/document/document.module.ts\nimport { Module } from '@nestjs/common';\nimport { DocumentService } from './document.service';\nimport { DocumentController } from './document.controller';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { UploadModule } from '../upload/upload.module';\n\n@Module({\n  imports: [UploadModule],\n  controllers: [DocumentController],\n  providers: [DocumentService, PrismaService, ResponseService],\n})\nexport class DocumentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DocumentResponseDto.html":{"url":"classes/DocumentResponseDto.html","title":"class - DocumentResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DocumentResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/document/dto/document-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                fileUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                uploadedAt\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'Date de suppression du document (null si non supprimé)', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/document-response.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'https://example.com/documents/file.pdf', description: 'URL du fichier'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/document-response.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123e4567-e89b-12d3-a456-426614174000', description: 'ID unique du document'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/document-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DocumentType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: DocumentType, example: undefined, description: 'Type du document'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/document-response.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uploadedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2023-01-01T00:00:00.000Z', description: 'Date d'upload du document'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/document-response.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123e4567-e89b-12d3-a456-426614174000', description: 'ID de l'utilisateur propriétaire du document'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/document-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { DocumentType } from '@prisma/client';\n\nexport class DocumentResponseDto {\n  @ApiProperty({\n    example: '123e4567-e89b-12d3-a456-426614174000',\n    description: 'ID unique du document',\n  })\n  id: string;\n\n  @ApiProperty({\n    example: '123e4567-e89b-12d3-a456-426614174000',\n    description: 'ID de l\\'utilisateur propriétaire du document',\n  })\n  userId: string;\n\n  @ApiProperty({\n    enum: DocumentType,\n    example: DocumentType.LICENSE,\n    description: 'Type du document',\n  })\n  type: DocumentType;\n\n  @ApiProperty({\n    example: 'https://example.com/documents/file.pdf',\n    description: 'URL du fichier',\n  })\n  fileUrl: string;\n\n  @ApiProperty({\n    example: '2023-01-01T00:00:00.000Z',\n    description: 'Date d\\'upload du document',\n  })\n  uploadedAt: Date;\n\n  @ApiProperty({\n    example: null,\n    description: 'Date de suppression du document (null si non supprimé)',\n    required: false,\n  })\n  deletedAt: Date | null;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DocumentService.html":{"url":"injectables/DocumentService.html","title":"injectable - DocumentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DocumentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/document/document.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, responseService: ResponseService, uploadService: FileStorageService)\n                    \n                \n                        \n                            \n                                Defined in src/document/document.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadService\n                                                  \n                                                        \n                                                                        FileStorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/document/document.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/document/document.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/document/document.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, type: DocumentType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/document/document.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                        DocumentType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(userId: string, file: Express.Multer.File | null, type: DocumentType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/document/document.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                        DocumentType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport {\n  FileStorageService,\n  FileUploadResult,\n} from '../upload/interfaces/upload.interface';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { DocumentType } from '@prisma/client';\nimport { DocumentResponseDto } from './dto/document-response.dto';\n\n@Injectable()\nexport class DocumentService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly responseService: ResponseService,\n    @Inject('UploadService')\n    private readonly uploadService: FileStorageService,\n  ) {}\n\n  async upload(userId: string, file: Express.Multer.File | null, type: DocumentType) {\n    if (!file) {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw this.responseService.badRequest(['Aucun fichier fourni']);\n    }\n\n    const maxSize = 4 * 1024 * 1024;\n    if (file.size > maxSize) {\n      throw this.responseService.badRequest([\n        'Fichier trop volumineux (> 4 Mo)',\n      ]);\n    }\n\n    const uploaded: FileUploadResult = await this.uploadService.uploadSingle(\n      file,\n      'documents',\n    );\n\n    const doc = await this.prisma.document.create({\n      data: {\n        userId,\n        type,\n        fileUrl: uploaded.url,\n      },\n    });\n\n    const responseDto: DocumentResponseDto = {\n      ...doc,\n    };\n\n    return this.responseService.created(responseDto, 'Document uploadé');\n  }\n\n  async findAll(userId: string) {\n    const docs = await this.prisma.document.findMany({\n      where: { userId, deletedAt: null },\n    });\n\n    const responseDtos: DocumentResponseDto[] = docs.map(doc => ({\n      ...doc,\n    }));\n\n    return this.responseService.success(responseDtos, 'Documents retrouvés');\n  }\n\n  async findOne(id: string) {\n    const doc = await this.prisma.document.findUnique({ where: { id } });\n\n    if (!doc) {\n      return this.responseService.success(null, 'Document non trouvé');\n    }\n\n    const responseDto: DocumentResponseDto = {\n      ...doc,\n    };\n\n    return this.responseService.success(responseDto, 'Document trouvé');\n  }\n\n  async update(id: string, type: DocumentType) {\n    const doc = await this.prisma.document.update({\n      where: { id },\n      data: { type },\n    });\n\n    const responseDto: DocumentResponseDto = {\n      ...doc,\n    };\n\n    return this.responseService.success(responseDto, 'Document mis à jour');\n  }\n\n  async remove(id: string) {\n    const doc = await this.prisma.document.update({\n      where: { id },\n      data: { deletedAt: new Date() },\n    });\n\n    await this.uploadService.deleteFile(doc.fileUrl);\n\n    const responseDto: DocumentResponseDto = {\n      ...doc,\n    };\n\n    return this.responseService.success(responseDto, 'Document supprimé');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EvolutionApiService.html":{"url":"injectables/EvolutionApiService.html","title":"injectable - EvolutionApiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EvolutionApiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/evolution-api/evolution-api.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                apiKey\n                            \n                            \n                                    Private\n                                    Readonly\n                                baseUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                fromNumber\n                            \n                            \n                                    Private\n                                    Readonly\n                                instanceName\n                            \n                            \n                                    Private\n                                    Readonly\n                                OTP_EXPIRATION_TIME\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendOtp\n                            \n                            \n                                    Async\n                                verifyOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/sms/evolution-api/evolution-api.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendOtp(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sms/evolution-api/evolution-api.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOtp(phone: string, code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sms/evolution-api/evolution-api.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        apiKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/evolution-api/evolution-api.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/evolution-api/evolution-api.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        fromNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/evolution-api/evolution-api.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        instanceName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/evolution-api/evolution-api.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        OTP_EXPIRATION_TIME\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 10 * 60\n                    \n                \n                    \n                        \n                                Defined in src/sms/evolution-api/evolution-api.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SmsServiceInterface } from '../sms.interface';\nimport { RedisService } from '../../redis/redis.service';\nimport axios from 'axios';\n\n@Injectable()\nexport class EvolutionApiService implements SmsServiceInterface {\n  private readonly baseUrl: string;\n  private readonly instanceName: string;\n  private readonly apiKey: string;\n  private readonly fromNumber: string;\n  private readonly OTP_EXPIRATION_TIME = 10 * 60; // 10 minutes in seconds\n\n  constructor(\n    private readonly config: ConfigService,\n    private readonly redisService: RedisService,\n  ) {\n    const baseUrl = this.config.get('EVOLUTION_API_BASE_URL');\n    const instanceName = this.config.get('EVOLUTION_API_INSTANCE');\n    const apiKey = this.config.get('EVOLUTION_API_KEY');\n    const fromNumber = this.config.get('WHATSAPP_FROM_NUMBER');\n\n    if (!baseUrl || !instanceName || !apiKey || !fromNumber) {\n      throw new Error(\n        'Evolution API configuration error: please check EVOLUTION_API_BASE_URL, EVOLUTION_API_INSTANCE, EVOLUTION_API_KEY, and WHATSAPP_FROM_NUMBER in your environment variables.',\n      );\n    }\n\n    this.baseUrl = baseUrl;\n    this.instanceName = instanceName;\n    this.apiKey = apiKey;\n    this.fromNumber = fromNumber;\n  }\n\n  async sendOtp(phone: string): Promise {\n    // Generate a random 6-digit code\n    const code = Math.floor(100000 + Math.random() * 900000).toString();\n\n    // Store the code in Redis with expiration\n    const redisKey = `otp:${phone}`;\n    await this.redisService.set(redisKey, code, this.OTP_EXPIRATION_TIME);\n\n    // Check if the phone number is the same as the fromNumber\n    if (phone === this.fromNumber) {\n      console.log(`Cannot send WhatsApp message to the same number as the sender (${phone}). Code stored in Redis.`);\n      // Return a mock successful response without actually sending the message\n      return {\n        sid: 'MOCK_SID',\n        status: 'delivered',\n        body: `Your verification code is: ${code}`,\n      };\n    }\n\n    // Format phone numbers (remove '+' if present)\n    const formattedFromNumber = this.fromNumber.startsWith('+') \n      ? this.fromNumber.substring(1) \n      : this.fromNumber;\n    \n    const formattedToNumber = phone.startsWith('+') \n      ? phone.substring(1) \n      : phone;\n\n    try {\n      // Send the code via Evolution API\n      const response = await axios.post(\n        `${this.baseUrl}/message/sendText/${this.instanceName}`,\n        {\n          number: formattedToNumber,\n          textMessage: `Your verification code is: ${code}`,\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            'apikey': this.apiKey,\n          },\n        },\n      );\n\n      return {\n        sid: response.data?.key?.id || 'UNKNOWN_SID',\n        status: response.data?.status || 'sent',\n        body: `Your verification code is: ${code}`,\n      };\n    } catch (error) {\n      console.error('Error sending WhatsApp message via Evolution API:', error);\n      throw new Error(`Failed to send WhatsApp message: ${error.message}`);\n    }\n  }\n\n  async verifyOtp(phone: string, code: string): Promise {\n    const redisKey = `otp:${phone}`;\n    const storedCode = await this.redisService.get(redisKey);\n\n    // Check if the code matches the stored code\n    if (storedCode && storedCode === code) {\n      // Clear the code after successful verification\n      await this.redisService.del(redisKey);\n      return { status: 'approved' };\n    }\n\n    return { status: 'rejected' };\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionService.html":{"url":"injectables/ExceptionService.html","title":"injectable - ExceptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/exception/exception.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createBadRequestException\n                            \n                            \n                                createForbiddenException\n                            \n                            \n                                createInternalServerException\n                            \n                            \n                                createNotFoundException\n                            \n                            \n                                createValidationException\n                            \n                            \n                                    Private\n                                formatErrors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpResponseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/validation/exception/exception.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpResponseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createBadRequestException\n                        \n                    \n                \n            \n            \n                \ncreateBadRequestException(arg0: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                arg0\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createForbiddenException\n                        \n                    \n                \n            \n            \n                \ncreateForbiddenException(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createInternalServerException\n                        \n                    \n                \n            \n            \n                \ncreateInternalServerException(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createNotFoundException\n                        \n                    \n                \n            \n            \n                \ncreateNotFoundException(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createValidationException\n                        \n                    \n                \n            \n            \n                \ncreateValidationException(errors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatErrors(errors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport { ResponseService } from './response/response.service';\n\n@Injectable()\nexport class ExceptionService {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  createBadRequestException(arg0: string) {\n    throw new Error('Method not implemented.');\n  }\n  constructor(private readonly httpResponseService: ResponseService) {}\n\n  createValidationException(errors: ValidationError[]): HttpException {\n    const messages = this.formatErrors(errors);\n    const response = this.httpResponseService.badRequest(\n      messages,\n      'Erreur de validation',\n    );\n    return new HttpException(response, HttpStatus.BAD_REQUEST);\n  }\n\n  createForbiddenException(message: string): HttpException {\n    const response = this.httpResponseService.forbidden(message);\n    return new HttpException(response, HttpStatus.FORBIDDEN);\n  }\n\n  createNotFoundException(message: string): HttpException {\n    const response = this.httpResponseService.notFound(message);\n    return new HttpException(response, HttpStatus.NOT_FOUND);\n  }\n\n  createInternalServerException(message: string): HttpException {\n    const response = this.httpResponseService.internalError(message);\n    return new HttpException(response, HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n\n  private formatErrors(errors: ValidationError[]): string[] {\n    const messages: string[] = [];\n    errors.forEach((error) => {\n      if (error.constraints) {\n        Object.values(error.constraints).forEach((message) => {\n          messages.push(message);\n        });\n      }\n      if (error.children && error.children.length > 0) {\n        messages.push(...this.formatErrors(error.children));\n      }\n    });\n    return messages;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExistsConstraint.html":{"url":"injectables/ExistsConstraint.html","title":"injectable - ExistsConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExistsConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/decorator/validators/exists.decorator.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/decorator/validators/exists.decorator.ts:15\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/decorator/validators/exists.decorator.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(value: any, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/decorator/validators/exists.decorator.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrismaService\n\n                    \n                \n                    \n                        \n                                Defined in src/common/decorator/validators/exists.decorator.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { PrismaService } from '../../../prisma/prisma.service';\nimport { Injectable } from '@nestjs/common';\nimport { getFromContainer } from 'class-validator';\n\n@Injectable()\n@ValidatorConstraint({ async: true })\nexport class ExistsConstraint implements ValidatorConstraintInterface {\n  private prisma: PrismaService;\n\n  constructor() {\n    this.prisma = getFromContainer(PrismaService); // ✅ injection manuelle\n  }\n\n  async validate(value: any, args: ValidationArguments): Promise {\n    const [modelName, fieldName] = args.constraints as [string, string];\n\n    if (!this.prisma[modelName]) {\n      console.error(`Model ${modelName} does not exist in PrismaService.`);\n      return false;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    const record = await this.prisma[modelName].findFirst({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      where: { [fieldName]: value },\n    });\n\n    return !!record;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    const [, fieldName] = args.constraints as [string, string];\n    return `${fieldName} does not exist`;\n  }\n}\n\nexport function Exists(\n  model: string,\n  field: string,\n  validationOptions?: ValidationOptions,\n) {\n  return function (object: any, propertyName: string) {\n    registerDecorator({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [model, field],\n      validator: ExistsConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileStorageService.html":{"url":"interfaces/FileStorageService.html","title":"interface - FileStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileStorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/interfaces/upload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        deleteFile\n                                    \n                                \n                                \n                                    \n                                        uploadMultiple\n                                    \n                                \n                                \n                                    \n                                        uploadSingle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteFile\n                        \n                    \n                \n            \n            \n                \ndeleteFile(filePath: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/interfaces/upload.interface.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filePath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \nuploadMultiple(files: Express.Multer.File[], folder?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/interfaces/upload.interface.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadSingle\n                        \n                    \n                \n            \n            \n                \nuploadSingle(file: Express.Multer.File, folder?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/interfaces/upload.interface.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface FileUploadResult {\n  url: string;\n  id: string;\n}\n\nexport interface FileStorageService {\n  uploadSingle(\n    file: Express.Multer.File,\n    folder?: string,\n  ): Promise;\n\n  uploadMultiple(\n    files: Express.Multer.File[],\n    folder?: string,\n  ): Promise;\n\n  deleteFile(filePath: string): Promise;\n}\n\nexport const DATABASE_CONNECTION = 'UPLOAD';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileUploadResult.html":{"url":"interfaces/FileUploadResult.html","title":"interface - FileUploadResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileUploadResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/interfaces/upload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FileUploadResult {\n  url: string;\n  id: string;\n}\n\nexport interface FileStorageService {\n  uploadSingle(\n    file: Express.Multer.File,\n    folder?: string,\n  ): Promise;\n\n  uploadMultiple(\n    files: Express.Multer.File[],\n    folder?: string,\n  ): Promise;\n\n  deleteFile(filePath: string): Promise;\n}\n\nexport const DATABASE_CONNECTION = 'UPLOAD';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAdminService.html":{"url":"injectables/FirebaseAdminService.html","title":"injectable - FirebaseAdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/firebase-admin/firebase-admin.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onModuleInit\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/firebase/firebase-admin/firebase-admin.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(idToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/firebase/firebase-admin/firebase-admin.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as admin from 'firebase-admin';\nimport { Injectable, OnModuleInit } from '@nestjs/common';\nimport * as serviceAccount from './firebase-service-account.json'; // ✅ chemin correct\n\n\n@Injectable()\nexport class FirebaseAdminService implements OnModuleInit {\n  onModuleInit() {\n    if (!admin.apps.length) {\n      admin.initializeApp({\n        credential: admin.credential.cert(\n          serviceAccount as admin.ServiceAccount,\n        ),\n      });\n    }\n  }\n\n  async verifyToken(idToken: string) {\n    try {\n      return await admin.auth().verifyIdToken(idToken);\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (error) {\n      throw new Error('Firebase token invalid');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(blacklistService: BlacklistTokenService, reflector: Reflector, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-auth/jwt-auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        blacklistService\n                                                  \n                                                        \n                                                                        BlacklistTokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-auth/jwt-auth.guard.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Reflector } from '@nestjs/core';\nimport { BlacklistTokenService } from '../blacklist-token/blacklist-token.service';\nimport { ResponseService } from '../../validation/exception/response/response.service';\nimport { IS_PUBLIC_KEY } from '../../common/decorator/public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(\n    private readonly blacklistService: BlacklistTokenService,\n    private readonly reflector: Reflector,\n    private readonly responseService: ResponseService,\n  ) {\n    super();\n  }\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) return true;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const req = context.switchToHttp().getRequest();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    const token = req.headers.authorization?.replace('Bearer ', '');\n\n    if (!token) {\n      throw new UnauthorizedException(\n        this.responseService.unauthorized('Aucun token fourni'),\n      );\n    }\n\n    const blacklisted = await this.blacklistService.isBlacklisted(token);\n    if (blacklisted) {\n      throw new UnauthorizedException(\n        this.responseService.unauthorized('Token blacklisté'),\n      );\n    }\n\n    return super.canActivate(context) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-strategy/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-strategy/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-strategy/jwt.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaService } from '../../prisma/prisma.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly config: ConfigService,\n    private readonly prisma: PrismaService,\n  ) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    super({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: { sub: string }) {\n    const user = await this.prisma.user.findUnique({\n      where: { id: payload.sub },\n    });\n\n    if (!user || user.deletedAt) {\n      throw new UnauthorizedException('User not found or deleted');\n    }\n\n    // Ce que le guard injecte dans req.user\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'StrongPassword123'})@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginDto {\n  @ApiProperty({ example: 'user@example.com' })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({ example: 'StrongPassword123' })\n  @IsString()\n  @MinLength(6)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OptionalJwtAuthGuard.html":{"url":"injectables/OptionalJwtAuthGuard.html","title":"injectable - OptionalJwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OptionalJwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/optional-jwt-auth/optional-jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(blacklistService: BlacklistTokenService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/optional-jwt-auth/optional-jwt-auth.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        blacklistService\n                                                  \n                                                        \n                                                                        BlacklistTokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/optional-jwt-auth/optional-jwt-auth.guard.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { BlacklistTokenService } from '../blacklist-token/blacklist-token.service';\n\n@Injectable()\nexport class OptionalJwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private readonly blacklistService: BlacklistTokenService) {\n    super();\n  }\n\n  async canActivate(context: ExecutionContext): Promise {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const req = context.switchToHttp().getRequest();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    const token = req.headers.authorization?.replace('Bearer ', '');\n\n    if (!token) {\n      return true; // Autoriser la requête même sans token\n    }\n\n    const blacklisted = await this.blacklistService.isBlacklisted(token);\n    if (blacklisted) return true; // Autoriser mais pas authentifié\n\n    return super.canActivate(context) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParamAppointmentIdDto.html":{"url":"classes/ParamAppointmentIdDto.html","title":"class - ParamAppointmentIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParamAppointmentIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/appointment/dto/param-appointment-id.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'uuid-appointment', description: 'ID du rendez-vous'})@IsUUID()@IsNotEmpty()@Exists('appointment', 'id', {message: 'Rendez-vous introuvable'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/param-appointment-id.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsUUID, IsNotEmpty } from 'class-validator';\nimport { Exists } from '../../common/decorator/validators/exists.decorator';\n\nexport class ParamAppointmentIdDto {\n  @ApiProperty({ example: 'uuid-appointment', description: 'ID du rendez-vous' })\n  @IsUUID()\n  @IsNotEmpty()\n  @Exists('appointment', 'id', { message: 'Rendez-vous introuvable' })\n  id: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParamDocumentIdDto.html":{"url":"classes/ParamDocumentIdDto.html","title":"class - ParamDocumentIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParamDocumentIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/document/dto/param-document-id.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'uuid-document', description: 'ID du document'})@IsUUID()@IsNotEmpty()@Exists('document', 'id', {message: 'Document introuvable'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/param-document-id.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsUUID, IsNotEmpty } from 'class-validator';\nimport { Exists } from '../../common/decorator/validators/exists.decorator';\n\nexport class ParamDocumentIdDto {\n  @ApiProperty({ example: 'uuid-document', description: 'ID du document' })\n  @IsUUID()\n  @IsNotEmpty()\n  @Exists('document', 'id', { message: 'Document introuvable' })\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParamUserIdDto.html":{"url":"classes/ParamUserIdDto.html","title":"class - ParamUserIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParamUserIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/appointment/dto/param-user-id.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'uuid-user', description: 'ID de l'utilisateur'})@IsUUID()@IsNotEmpty()@Exists('user', 'id', {message: 'Utilisateur introuvable'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/param-user-id.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsUUID, IsNotEmpty } from 'class-validator';\nimport { Exists } from '../../common/decorator/validators/exists.decorator';\n\nexport class ParamUserIdDto {\n  @ApiProperty({ example: 'uuid-user', description: 'ID de l\\'utilisateur' })\n  @IsUUID()\n  @IsNotEmpty()\n  @Exists('user', 'id', { message: 'Utilisateur introuvable' })\n  userId: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParamUserIdDto-1.html":{"url":"classes/ParamUserIdDto-1.html","title":"class - ParamUserIdDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParamUserIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/document/dto/param-user-id.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'uuid-user', description: 'ID utilisateur'})@IsUUID()@IsNotEmpty()@Exists('user', 'id', {message: 'Utilisateur introuvable'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/param-user-id.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsUUID } from 'class-validator';\nimport { Exists } from '../../common/decorator/validators/exists.decorator';\n\nexport class ParamUserIdDto {\n  @ApiProperty({ example: 'uuid-user', description: 'ID utilisateur' })\n  @IsUUID()\n  @IsNotEmpty()\n  @Exists('user', 'id', { message: 'Utilisateur introuvable' })\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PaymentController.html":{"url":"controllers/PaymentController.html","title":"controller - PaymentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PaymentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/payment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                payments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createPayment\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getAllTransactions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getTransaction\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getTransactionsByUser\n                            \n                            \n                                    \n                                handleCancel\n                            \n                            \n                                    \n                                    Async\n                                handleSuccess\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        createPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPayment(dto: CreatePaymentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a payment for one or multiple appointments'})@ApiResponse({status: 201, description: 'Payment group processed successfully.'})@ApiResponse({status: 400, description: 'Bad request, invalid input data.'})@ApiBody({type: CreatePaymentDto})\n                \n            \n\n                    \n                        \n                            Defined in src/payment/payment.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreatePaymentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getAllTransactions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTransactions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all transactions'})@ApiResponse({status: 200, description: 'All transactions retrieved.'})\n                \n            \n\n                    \n                        \n                            Defined in src/payment/payment.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTransaction(transactionId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':transactionId')@ApiOperation({summary: 'Get transaction by ID (UUID interne ou Stripe session_id)'})@ApiResponse({status: 200, description: 'Transaction details retrieved.'})@ApiResponse({status: 404, description: 'Transaction not found.'})@ApiParam({name: 'transactionId', description: 'ID du paiement (UUID interne ou Stripe session_id cs_...)', example: 'payment-uuid-1 OU cs_test_xxx'})\n                \n            \n\n                    \n                        \n                            Defined in src/payment/payment.controller.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transactionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getTransactionsByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTransactionsByUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@ApiOperation({summary: 'Get transactions by user ID'})@ApiResponse({status: 200, description: 'User transactions retrieved.'})@ApiResponse({status: 404, description: 'User not found.'})@ApiParam({name: 'userId', description: 'ID of the user', example: 'user-uuid'})\n                \n            \n\n                    \n                        \n                            Defined in src/payment/payment.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleCancel\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCancel(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/cancel')\n                \n            \n\n                    \n                        \n                            Defined in src/payment/payment.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleSuccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSuccess(sessionId: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/success')\n                \n            \n\n                    \n                        \n                            Defined in src/payment/payment.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Get, Body, Param, Query, Res } from '@nestjs/common';\nimport { PaymentService } from './payment.service';\nimport { CreatePaymentDto } from './dto/create-payment.dto';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiBearerAuth,\n  ApiResponse,\n  ApiBody,\n  ApiParam,\n} from '@nestjs/swagger';\nimport { Public } from '../common/decorator/public.decorator';\nimport { Response } from 'express';\n\n@ApiTags('Payments')\n@ApiBearerAuth('access-token')\n@Public()\n@Controller('payments')\nexport class PaymentController {\n  constructor(private readonly paymentService: PaymentService) {}\n\n  @Post()\n  @ApiOperation({\n    summary: 'Create a payment for one or multiple appointments',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Payment group processed successfully.',\n  })\n  @ApiResponse({ status: 400, description: 'Bad request, invalid input data.' })\n  @ApiBody({ type: CreatePaymentDto })\n  async createPayment(@Body() dto: CreatePaymentDto) {\n    return this.paymentService.createPayment(dto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all transactions' })\n  @ApiResponse({\n    status: 200,\n    description: 'All transactions retrieved.',\n  })\n  async getAllTransactions() {\n    return this.paymentService.getAllTransactions();\n  }\n\n  @Get('user/:userId')\n  @ApiOperation({ summary: 'Get transactions by user ID' })\n  @ApiResponse({\n    status: 200,\n    description: 'User transactions retrieved.',\n  })\n  @ApiResponse({ status: 404, description: 'User not found.' })\n  @ApiParam({\n    name: 'userId',\n    description: 'ID of the user',\n    example: 'user-uuid',\n  })\n  async getTransactionsByUser(@Param('userId') userId: string) {\n    return this.paymentService.getTransactionsByUser(userId);\n  }\n\n  // === ATTENTION À L'ORDRE : /success AVANT :transactionId ===\n  @Get('/success')\n  async handleSuccess(\n    @Query('session_id') sessionId: string,\n    @Res() res: Response,\n  ) {\n    await this.paymentService.handleStripeSuccess(sessionId); // logique backend, pas de return\n    // Sert le fichier statique\n    res.sendFile('payment-success.html', { root: process.cwd() + '/public' });\n  }\n\n  @Get('/cancel')\n  handleCancel(@Res() res: Response) {\n    res.sendFile('payment-cancel.html', { root: process.cwd() + '/public' });\n  }\n\n  @Get(':transactionId')\n  @ApiOperation({\n    summary: 'Get transaction by ID (UUID interne ou Stripe session_id)',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Transaction details retrieved.',\n  })\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\n  @ApiParam({\n    name: 'transactionId',\n    description: 'ID du paiement (UUID interne ou Stripe session_id cs_...)',\n    example: 'payment-uuid-1 OU cs_test_xxx',\n  })\n  async getTransaction(@Param('transactionId') transactionId: string) {\n    return this.paymentService.getTransaction(transactionId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PaymentModeController.html":{"url":"controllers/PaymentModeController.html","title":"controller - PaymentModeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PaymentModeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment-mode/payment-mode.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                payment-modes\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPaymentModeDto: CreatePaymentModeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new payment mode'})@ApiResponse({status: 201, description: 'Payment mode created successfully.'})\n                \n            \n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPaymentModeDto\n                                            \n                                                            CreatePaymentModeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all payment modes'})@ApiResponse({status: 200, description: 'List of payment modes.'})\n                \n            \n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get a payment mode by ID'})@ApiResponse({status: 200, description: 'Payment mode retrieved.'})\n                \n            \n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Soft delete a payment mode by ID'})@ApiResponse({status: 200, description: 'Payment mode soft-deleted.'})\n                \n            \n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updatePaymentModeDto: UpdatePaymentModeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a payment mode by ID'})@ApiResponse({status: 200, description: 'Payment mode updated.'})\n                \n            \n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatePaymentModeDto\n                                            \n                                                            UpdatePaymentModeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { PaymentModeService } from './payment-mode.service';\nimport { CreatePaymentModeDto } from './dto/create-payment-mode.dto';\nimport { UpdatePaymentModeDto } from './dto/update-payment-mode.dto';\n\n@ApiTags('Payment Modes')\n@ApiBearerAuth('access-token')\n@Controller('payment-modes')\nexport class PaymentModeController {\n  constructor(private readonly paymentModeService: PaymentModeService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new payment mode' })\n  @ApiResponse({ status: 201, description: 'Payment mode created successfully.' })\n  create(@Body() createPaymentModeDto: CreatePaymentModeDto) {\n    return this.paymentModeService.create(createPaymentModeDto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all payment modes' })\n  @ApiResponse({ status: 200, description: 'List of payment modes.' })\n  findAll() {\n    return this.paymentModeService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a payment mode by ID' })\n  @ApiResponse({ status: 200, description: 'Payment mode retrieved.' })\n  findOne(@Param('id') id: string) {\n    return this.paymentModeService.findOne(id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a payment mode by ID' })\n  @ApiResponse({ status: 200, description: 'Payment mode updated.' })\n  update(\n    @Param('id') id: string,\n    @Body() updatePaymentModeDto: UpdatePaymentModeDto,\n  ) {\n    return this.paymentModeService.update(id, updatePaymentModeDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Soft delete a payment mode by ID' })\n  @ApiResponse({ status: 200, description: 'Payment mode soft-deleted.' })\n  remove(@Param('id') id: string) {\n    return this.paymentModeService.remove(id);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModeModule.html":{"url":"modules/PaymentModeModule.html","title":"module - PaymentModeModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaymentModeModule\n\n\n\ncluster_PaymentModeModule_imports\n\n\n\ncluster_PaymentModeModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPaymentModeModule\n\nPaymentModeModule\n\nPaymentModeModule -->\n\nPrismaModule->PaymentModeModule\n\n\n\n\n\nPaymentModeService\n\nPaymentModeService\n\nPaymentModeModule -->\n\nPaymentModeService->PaymentModeModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nPaymentModeModule -->\n\nResponseService->PaymentModeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/payment-mode/payment-mode.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaymentModeService\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PaymentModeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { PaymentModeService } from './payment-mode.service';\nimport { PaymentModeController } from './payment-mode.controller';\nimport { PrismaModule } from '../prisma/prisma.module';\n\n@Module({\n  imports: [PrismaModule],\n  controllers: [PaymentModeController],\n  providers: [ResponseService, PaymentModeService],\n  exports: [],\n})\nexport class PaymentModeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentModeService.html":{"url":"injectables/PaymentModeService.html","title":"injectable - PaymentModeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentModeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment-mode/payment-mode.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/payment-mode/payment-mode.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: CreatePaymentModeDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreatePaymentModeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, data: UpdatePaymentModeDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            UpdatePaymentModeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { CreatePaymentModeDto } from './dto/create-payment-mode.dto';\nimport { UpdatePaymentModeDto } from './dto/update-payment-mode.dto';\nimport { ResponseService } from '../validation/exception/response/response.service';\n\n@Injectable()\nexport class PaymentModeService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly responseService: ResponseService,\n  ) {}\n\n  async create(data: CreatePaymentModeDto) {\n    const paymentMode = await this.prisma.paymentMode.create({\n      data,\n    });\n\n    return this.responseService.created(\n      paymentMode,\n      'Payment mode created successfully.',\n    );\n  }\n\n  async findAll() {\n    const paymentModes = await this.prisma.paymentMode.findMany({\n      where: { deletedAt: null },\n    });\n\n    return this.responseService.success(\n      paymentModes,\n      'List of payment modes retrieved.',\n    );\n  }\n\n  async findOne(id: string) {\n    const paymentMode = await this.prisma.paymentMode.findFirst({\n      where: { id, deletedAt: null },\n    });\n\n    if (!paymentMode) {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw this.responseService.notFound('Payment mode not found.');\n    }\n\n    return this.responseService.success(paymentMode, 'Payment mode retrieved.');\n  }\n\n  async update(id: string, data: UpdatePaymentModeDto) {\n    const paymentMode = await this.prisma.paymentMode.update({\n      where: { id },\n      data,\n    });\n\n    return this.responseService.success(\n      paymentMode,\n      'Payment mode updated successfully.',\n    );\n  }\n\n  async remove(id: string) {\n    const paymentMode = await this.prisma.paymentMode.update({\n      where: { id },\n      data: { deletedAt: new Date() },\n    });\n\n    return this.responseService.success(\n      paymentMode,\n      'Payment mode soft-deleted successfully.',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_exports\n\n\n\ncluster_PaymentModule_providers\n\n\n\ncluster_PaymentModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPaymentModule\n\nPaymentModule\n\nPaymentModule -->\n\nPrismaModule->PaymentModule\n\n\n\n\n\nPaymentService \n\nPaymentService \n\nPaymentService  -->\n\nPaymentModule->PaymentService \n\n\n\n\n\nPaymentProcessorFactory\n\nPaymentProcessorFactory\n\nPaymentModule -->\n\nPaymentProcessorFactory->PaymentModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nPaymentModule -->\n\nResponseService->PaymentModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nPaymentModule -->\n\nStripeService->PaymentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/payment/payment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaymentProcessorFactory\n                        \n                        \n                            PaymentService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PaymentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaymentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { ResponseService } from '../validation/exception/response/response.service';\n\nimport { PaymentService } from './payment.service';\nimport { StripeService } from './stripe/stripe.service';\nimport { PaymentController } from './payment.controller';\nimport { PaymentProcessorFactory } from './payment-processor.factory';\n\n@Module({\n  imports: [PrismaModule],\n  controllers: [PaymentController],\n  providers: [\n    PaymentService,\n    StripeService, // Inject Stripe as payment processor\n    PaymentProcessorFactory, // Factory to choose the processor\n    ResponseService,\n  ],\n  exports: [PaymentService],\n})\nexport class PaymentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaymentProcessor.html":{"url":"interfaces/PaymentProcessor.html","title":"interface - PaymentProcessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaymentProcessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/payment-processor.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        charge\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        createCheckoutSession\n                                    \n                                \n                                \n                                    \n                                        getTransactionDetails\n                                    \n                                \n                                \n                                    \n                                        refund\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        charge\n                        \n                    \n                \n            \n            \n                \ncharge(amount: number, currency: string, paymentDetails: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment-processor.interface.ts:2\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                paymentDetails\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \ncreateCheckoutSession(amount: number, currency: string, successUrl: string, cancelUrl: string, metadata?: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment-processor.interface.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                successUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cancelUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTransactionDetails\n                        \n                    \n                \n            \n            \n                \ngetTransactionDetails(transactionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment-processor.interface.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transactionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refund\n                        \n                    \n                \n            \n            \n                \nrefund(transactionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment-processor.interface.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transactionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface PaymentProcessor {\n  charge(\n    amount: number,\n    currency: string,\n    paymentDetails: any\n  ): Promise;\n\n  refund(transactionId: string): Promise;\n\n  getTransactionDetails(transactionId: string): Promise;\n\n  createCheckoutSession?(\n    amount: number,\n    currency: string,\n    successUrl: string,\n    cancelUrl: string,\n    metadata?: Record\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentProcessorFactory.html":{"url":"injectables/PaymentProcessorFactory.html","title":"injectable - PaymentProcessorFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentProcessorFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/payment-processor.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProcessor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(stripeService: StripeService)\n                    \n                \n                        \n                            \n                                Defined in src/payment/payment-processor.factory.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        stripeService\n                                                  \n                                                        \n                                                                        StripeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getProcessor\n                        \n                    \n                \n            \n            \n                \ngetProcessor(provider: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment-processor.factory.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                provider\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PaymentProcessor\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { StripeService } from './stripe/stripe.service';\nimport { PaymentProcessor } from './payment-processor.interface';\n\n@Injectable()\nexport class PaymentProcessorFactory {\n  constructor(private readonly stripeService: StripeService) {}\n\n  getProcessor(provider: string): PaymentProcessor {\n    // @ts-ignore\n    switch (provider.toLowerCase()) {\n      case 'stripe':\n        return this.stripeService;\n\n      default:\n        throw new Error(`Unsupported payment provider: ${provider}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentService.html":{"url":"injectables/PaymentService.html","title":"injectable - PaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/payment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPayment\n                            \n                            \n                                    Async\n                                getAllTransactions\n                            \n                            \n                                    Async\n                                getTransaction\n                            \n                            \n                                    Async\n                                getTransactionsByUser\n                            \n                            \n                                    Async\n                                handleStripeSuccess\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, factory: PaymentProcessorFactory, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/payment/payment.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        factory\n                                                  \n                                                        \n                                                                        PaymentProcessorFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPayment(dto: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Crée la session Checkout Stripe (mais ne crée rien en base pour l’instant)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllTransactions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTransactions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment.service.ts:105\n                        \n                    \n\n\n            \n                \n                        Liste tous les paiements (transactions)\n\n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTransaction(transactionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment.service.ts:135\n                        \n                    \n\n\n            \n                \n                        Détail transaction par ID (interne ou Stripe sessionId)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transactionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTransactionsByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTransactionsByUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment.service.ts:120\n                        \n                    \n\n\n            \n                \n                        Liste les paiements par user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleStripeSuccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleStripeSuccess(sessionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment.service.ts:171\n                        \n                    \n\n\n            \n                \n                        Callback Stripe après succès (Redirection du front)\nC'est ici qu'on crée en base PaymentGroup + Payments\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { AppointmentStatus, PaymentStatus } from '@prisma/client';\nimport Stripe from 'stripe';\nimport { PaymentProcessorFactory } from './payment-processor.factory';\n\n@Injectable()\nexport class PaymentService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly factory: PaymentProcessorFactory,\n    private readonly responseService: ResponseService,\n  ) {\n  }\n\n  /**\n   * Crée la session Checkout Stripe (mais ne crée rien en base pour l’instant)\n   */\n  async createPayment(dto: any) {\n    if (dto.appointmentIds.length !== dto.amounts.length) {\n      throw this.responseService.badRequest([\n        'appointmentIds and amounts must have the same length.',\n      ]);\n    }\n\n    // Check appointments\n    const appointments = await this.prisma.appointment.findMany({\n      where: {\n        id: { in: dto.appointmentIds },\n        status: AppointmentStatus.PENDING,\n        deletedAt: null,\n      },\n      include: { payments: true },\n    });\n\n    if (appointments.length !== dto.appointmentIds.length) {\n      throw this.responseService.badRequest([\n        'One or more appointments are invalid or not pending.',\n      ]);\n    }\n\n    // Check already paid\n    for (const appointment of appointments) {\n      const existingPayment = await this.prisma.payment.findFirst({\n        where: {\n          appointmentId: appointment.id,\n          deletedAt: null,\n          status: PaymentStatus.PAID,\n        },\n      });\n\n      if (existingPayment) {\n        throw this.responseService.badRequest([\n          `Appointment ${appointment.id} already has a paid payment.`,\n        ]);\n      }\n    }\n\n    // Check payment mode\n    const paymentMode = await this.prisma.paymentMode.findUnique({\n      where: { id: dto.paymentModeId },\n    });\n\n    if (!paymentMode || paymentMode.deletedAt) {\n      throw this.responseService.badRequest(['Invalid payment mode.']);\n    }\n\n    // Total\n    const totalAmount = dto.amounts.reduce((sum, amount) => sum + amount, 0);\n\n    // Get Stripe processor\n    const processor = this.factory.getProcessor(paymentMode.name);\n\n    if (!processor.createCheckoutSession) {\n      throw this.responseService.badRequest([\n        `createCheckoutSession is not supported by this processor`,\n      ]);\n    }\n\n    // Crée la session Stripe (pas de création PaymentGroup ici)\n    const session = await processor.createCheckoutSession(\n      totalAmount,\n      dto.currency,\n      process.env.STRIPE_SUCCESS_URL!,\n      process.env.STRIPE_CANCEL_URL!,\n      {\n        userId: dto.userId,\n        appointmentIds: dto.appointmentIds.join(','),\n        paymentModeId: dto.paymentModeId,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        amounts: dto.amounts.join(','), // pour mapping montant/rdv\n      }\n    );\n\n    return this.responseService.success(\n      { checkoutUrl: session.url },\n      'Redirection vers Stripe Checkout.',\n    );\n  }\n\n  /**\n   * Liste tous les paiements (transactions)\n   */\n  async getAllTransactions() {\n    const payments = await this.prisma.payment.findMany({\n      where: { deletedAt: null },\n      include: { user: true, appointment: true, paymentMode: true },\n    });\n\n    return this.responseService.success(\n      payments,\n      'All transactions retrieved.',\n    );\n  }\n\n  /**\n   * Liste les paiements par user\n   */\n  async getTransactionsByUser(userId: string) {\n    const payments = await this.prisma.payment.findMany({\n      where: { userId, deletedAt: null },\n      include: { appointment: true, paymentMode: true },\n    });\n\n    return this.responseService.success(\n      payments,\n      'User transactions retrieved.',\n    );\n  }\n\n  /**\n   * Détail transaction par ID (interne ou Stripe sessionId)\n   */\n  async getTransaction(transactionId: string) {\n    // Recherche par Stripe sessionId (transactionId)\n    let payment = await this.prisma.payment.findFirst({\n      where: { transactionId },\n      include: { user: true, appointment: true, paymentMode: true },\n    });\n\n    // Sinon recherche par id interne\n    if (!payment) {\n      payment = await this.prisma.payment.findUnique({\n        where: { id: transactionId },\n        include: { user: true, appointment: true, paymentMode: true },\n      });\n    }\n\n    if (!payment) {\n      // Debug log\n      console.log('Transaction recherchée:', transactionId);\n      const payments = await this.prisma.payment.findMany({});\n      console.log('Toutes les transactions en base:', payments.map(p => ({\n        id: p.id,\n          transactionId: p.transactionId,\n      })));\n      throw this.responseService.notFound('Transaction not found.');\n    }\n\n    return this.responseService.success(\n      payment,\n      'Transaction details retrieved.',\n    );\n  }\n\n  /**\n   * Callback Stripe après succès (Redirection du front)\n   * C'est ici qu'on crée en base PaymentGroup + Payments\n   */\n  async handleStripeSuccess(sessionId: string) {\n    const secretKey = process.env.STRIPE_SECRET_KEY;\n    if (!secretKey) throw new Error('STRIPE_SECRET_KEY is not defined');\n    const stripe = new Stripe(secretKey, { apiVersion: '2025-04-30.basil' });\n\n    // 1. Récupérer la session Stripe\n    const stripeSession = await stripe.checkout.sessions.retrieve(sessionId);\n\n    // 2. Vérifier les metadata\n    const metadata = stripeSession.metadata;\n    if (\n      !metadata ||\n      !metadata.userId ||\n      !metadata.appointmentIds ||\n      !metadata.paymentModeId ||\n      !metadata.amounts\n    ) {\n      return this.responseService.badRequest([\n        'Metadata Stripe manquante ou incomplète.',\n      ]);\n    }\n\n    const userId = metadata.userId;\n    const appointmentIds = metadata.appointmentIds.split(',');\n    const paymentModeId = metadata.paymentModeId;\n    const amounts = metadata.amounts\n      ? metadata.amounts.split(',').map((n: string) => parseFloat(n))\n      : [];\n    const totalAmount = stripeSession.amount_total! / 100;\n\n    // 3. Vérifier si PaymentGroup existe déjà\n    let paymentGroup = await this.prisma.paymentGroup.findUnique({\n      where: { transactionId: sessionId },\n      include: { payments: true },\n    });\n\n    if (paymentGroup) {\n      // Anti-double paiement\n      return this.responseService.success(\n        { paymentGroup },\n        'Paiement déjà enregistré pour ce Stripe session_id.',\n      );\n    }\n\n    // 4. Créer le PaymentGroup (retourne SANS la relation)\n    const createdPaymentGroup = await this.prisma.paymentGroup.create({\n      data: {\n        userId,\n        transactionId: sessionId,\n        status: PaymentStatus.PAID,\n        totalAmount,\n      },\n    });\n\n    // 5. Créer les paiements individuels\n    await Promise.all(\n      appointmentIds.map(async (appointmentId: string, idx: number) => {\n        const amount =\n          amounts.length === appointmentIds.length\n            ? amounts[idx]\n            : totalAmount / appointmentIds.length;\n        await this.prisma.payment.create({\n          data: {\n            userId,\n            appointmentId,\n            paymentModeId,\n            amount,\n            status: PaymentStatus.PAID,\n            paymentGroupId: createdPaymentGroup.id,\n            transactionId: sessionId,\n          },\n        });\n      }),\n    );\n\n    // 6. Recharge PaymentGroup AVEC la relation payments\n    const paymentGroupWithPayments = await this.prisma.paymentGroup.findUnique({\n      where: { id: createdPaymentGroup.id },\n      include: { payments: true },\n    });\n\n    return this.responseService.success(\n      { paymentGroup: paymentGroupWithPayments },\n      'Paiement validé et enregistré.',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  imports: [],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/prisma/prisma.service.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\n//import { loggingMiddleware } from './prisma.middleware';\n\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    super();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    // this.$use(loggingMiddleware(this.eventEmitter));\n  }\n\n  async onModuleInit() {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      await this.$connect();\n      console.log('✅ Connected to the database');\n      console.log('🧩 Available models:', Object.keys(this));\n    } catch (error) {\n      console.error('❌ Failed to connect to the database', error);\n      process.exit(1);\n    }\n  }\n\n  async onModuleDestroy() {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    await this.$disconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_providers\n\n\n\ncluster_RedisModule_exports\n\n\n\n\nRedisService \n\nRedisService \n\n\n\nRedisModule\n\nRedisModule\n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RedisService } from './redis.service';\n\n@Module({\n  providers: [RedisService],\n  imports: [],\n  exports: [RedisService],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisService.html":{"url":"injectables/RedisService.html","title":"injectable - RedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/redis/redis.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cacheable\n                            \n                            \n                                    Async\n                                del\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redis: Redis)\n                    \n                \n                        \n                            \n                                Defined in src/redis/redis.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    Redis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cacheable\n                        \n                    \n                \n            \n            \n                \n                        \n                    cacheable(key: string, ttlSeconds: number, fetcher: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:45\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Met en cache le résultat d'une fonction async, ou le récupère si déjà présent.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttlSeconds\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fetcher\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        del\n                        \n                    \n                \n            \n            \n                \n                        \n                    del(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:10\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: any, ttlSeconds?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttlSeconds\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRedis } from '@nestjs-modules/ioredis';\nimport { Redis } from 'ioredis';\n\n@Injectable()\nexport class RedisService {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n  constructor(@InjectRedis() private readonly redis: Redis) {}\n\n  async get(key: string): Promise {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    const data = await this.redis.get(key);\n    console.log('🔍 [Redis GET]', key);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return data ? JSON.parse(data) : null;\n  }\n\n  async set(key: string, value: any, ttlSeconds?: number): Promise {\n    const serialized = JSON.stringify(value);\n    console.log('💾 [Redis SET]', key);\n    if (ttlSeconds) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      await this.redis.set(key, serialized, 'EX', ttlSeconds);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      await this.redis.set(key, serialized);\n    }\n  }\n\n  async del(key: string): Promise {\n    console.log('🗑️ [Redis DEL]', key);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    await this.redis.del(key);\n  }\n\n  async exists(key: string): Promise {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    const result = await this.redis.exists(key);\n    return result === 1;\n  }\n\n  /**\n   * Met en cache le résultat d'une fonction async, ou le récupère si déjà présent.\n   */\n  async cacheable(\n    key: string,\n    ttlSeconds: number,\n    fetcher: () => Promise,\n  ): Promise {\n    const cached = await this.get(key);\n    if (cached !== null) return cached;\n\n    const data = await fetcher();\n    await this.set(key, data, ttlSeconds);\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenService.html":{"url":"injectables/RefreshTokenService.html","title":"injectable - RefreshTokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/refresh-token/refresh-token.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                rotate\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/refresh-token/refresh-token.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/refresh-token/refresh-token.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        rotate\n                        \n                    \n                \n            \n            \n                \n                        \n                    rotate(oldToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/refresh-token/refresh-token.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                oldToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/refresh-token/refresh-token.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PrismaService } from '../../prisma/prisma.service';\nimport { v4 as uuid } from 'uuid';\nimport { addDays } from 'date-fns';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class RefreshTokenService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly config: ConfigService,\n  ) {}\n\n  async create(userId: string): Promise {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call\n    const token = uuid();\n    const days = parseInt(\n      this.config.get('JWT_REFRESH_EXPIRES_DAYS', '7'),\n    );\n\n    await this.prisma.refreshToken.create({\n      data: {\n        userId,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        token,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call\n        expiresAt: addDays(new Date(), days),\n      },\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    return { token };\n  }\n\n  async validate(token: string): Promise {\n    const stored = await this.prisma.refreshToken.findUnique({\n      where: { token },\n    });\n\n    if (!stored || stored.revoked || stored.expiresAt  {\n    const existing = await this.prisma.refreshToken.findUnique({\n      where: { token: oldToken },\n    });\n\n    if (!existing || existing.revoked || existing.expiresAt \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RequestPasswordResetDto.html":{"url":"classes/RequestPasswordResetDto.html","title":"class - RequestPasswordResetDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RequestPasswordResetDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/request-password-reset.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/request-password-reset.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class RequestPasswordResetDto {\n  @ApiProperty({ example: 'user@example.com' })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/reset-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                code\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123456'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'NewSecurePassword123'})@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, MinLength, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ResetPasswordDto {\n  @ApiProperty({ example: 'user@example.com' })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({ example: '123456' })\n  @IsString()\n  @IsNotEmpty()\n  code: string;\n\n  @ApiProperty({ example: 'NewSecurePassword123' })\n  @IsString()\n  @MinLength(6)\n  newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/exception/response/response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            errors\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Response {\n  statusCode: number;\n  message: string;\n  data?: T;\n  errors?: string[];\n  timestamp?: string;\n  path?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseService.html":{"url":"injectables/ResponseService.html","title":"injectable - ResponseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/exception/response/response.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                badRequest\n                            \n                            \n                                conflict\n                            \n                            \n                                created\n                            \n                            \n                                error\n                            \n                            \n                                forbidden\n                            \n                            \n                                inactiveAccount\n                            \n                            \n                                internalError\n                            \n                            \n                                notFound\n                            \n                            \n                                success\n                            \n                            \n                                unauthorized\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        badRequest\n                        \n                    \n                \n            \n            \n                \nbadRequest(errors: string[], message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Requête invalide'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        conflict\n                        \n                    \n                \n            \n            \n                \nconflict(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Conflit détecté'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created\n                        \n                    \n                \n            \n            \n                \ncreated(data: T, message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:15\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Ressource créée avec succès'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Erreur interne du serveur'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forbidden\n                        \n                    \n                \n            \n            \n                \nforbidden(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Accès interdit'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inactiveAccount\n                        \n                    \n                \n            \n            \n                \ninactiveAccount(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        internalError\n                        \n                    \n                \n            \n            \n                \ninternalError(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Erreur interne du serveur'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notFound\n                        \n                    \n                \n            \n            \n                \nnotFound(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Ressource non trouvée'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n            \n                \nsuccess(data: T, message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:6\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Opération réussie'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unauthorized\n                        \n                    \n                \n            \n            \n                \nunauthorized(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Non autorisé'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Response } from './response.interface';\n\n@Injectable()\nexport class ResponseService {\n  success(data: T, message = 'Opération réussie'): Response {\n    return {\n      statusCode: 200,\n      message,\n      data,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  created(data: T, message = 'Ressource créée avec succès'): Response {\n    return {\n      statusCode: 201,\n      message,\n      data,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  badRequest(errors: string[], message = 'Requête invalide'): Response {\n    return {\n      statusCode: 400,\n      message,\n      errors,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  forbidden(message = 'Accès interdit'): Response {\n    return {\n      statusCode: 403,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  notFound(message = 'Ressource non trouvée'): Response {\n    return {\n      statusCode: 404,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  internalError(message = 'Erreur interne du serveur'): Response {\n    return {\n      statusCode: 500,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  conflict(message = 'Conflit détecté'): Response {\n    return {\n      statusCode: 409,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n\n\n  error(message = 'Erreur interne du serveur'): Response {\n    return {\n      statusCode: 500,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n  unauthorized(message = 'Non autorisé'): Response {\n    return {\n      statusCode: 401,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n  inactiveAccount(userId: string): Response {\n    return {\n      statusCode: 400,\n      message: 'Compte inactif',\n      errors: [\n        \"Votre compte n'est pas encore activé. Veuillez vérifier votre numéro de téléphone.\",\n      ],\n      data: {\n        user: {\n          id: userId,\n        },\n      },\n      timestamp: new Date().toISOString(),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmsModule.html":{"url":"modules/SmsModule.html","title":"module - SmsModule","body":"\n                   \n\n\n\n\n    Modules\n    SmsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SmsModule\n\n\n\ncluster_SmsModule_providers\n\n\n\n\nEvolutionApiService\n\nEvolutionApiService\n\n\n\nSmsModule\n\nSmsModule\n\nSmsModule -->\n\nEvolutionApiService->SmsModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nSmsModule -->\n\nRedisService->SmsModule\n\n\n\n\n\nTwilioService\n\nTwilioService\n\nSmsModule -->\n\nTwilioService->SmsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sms/sms.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EvolutionApiService\n                        \n                        \n                            RedisService\n                        \n                        \n                            TwilioService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TwilioService } from './twilio/twilio.service';\nimport { WhatsAppService } from './whatsapp/whatsapp.service';\nimport { EvolutionApiService } from './evolution-api/evolution-api.service';\nimport { SMS_SERVICE } from './sms.interface';\nimport { RedisService } from '../redis/redis.service';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [\n    {\n      provide: SMS_SERVICE,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      useClass: TwilioService,\n    },\n    RedisService,\n    TwilioService,\n    EvolutionApiService,\n  ],\n  exports: [SMS_SERVICE],\n})\nexport class SmsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SmsServiceInterface.html":{"url":"interfaces/SmsServiceInterface.html","title":"interface - SmsServiceInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SmsServiceInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/sms.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        sendOtp\n                                    \n                                \n                                \n                                    \n                                        verifyOtp\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendOtp\n                        \n                    \n                \n            \n            \n                \nsendOtp(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sms/sms.interface.ts:2\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \nverifyOtp(phone: string, code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sms/sms.interface.ts:3\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface SmsServiceInterface {\n  sendOtp(phone: string): Promise;\n  verifyOtp(phone: string, code: string): Promise;\n}\nexport const SMS_SERVICE = 'SmsServiceInterface';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                charge\n                            \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                            \n                                    Async\n                                getTransactionDetails\n                            \n                            \n                                    Async\n                                refund\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/payment/stripe/stripe.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        charge\n                        \n                    \n                \n            \n            \n                \n                        \n                    charge(amount?: number, currency?: string, paymentDetails?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/stripe/stripe.service.ts:22\n                        \n                    \n\n\n            \n                \n                        Stripe Checkout workflow : pas de \"charge\" direct.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                paymentDetails\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCheckoutSession(amount: number, currency: string, successUrl: string, cancelUrl: string, metadata: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/stripe/stripe.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Crée une session Checkout Stripe pour paiement.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                successUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                cancelUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTransactionDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTransactionDetails(transactionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/stripe/stripe.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Récupération d'une session Checkout Stripe.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                transactionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    id de la session Checkout (ex: cs_test_xxx)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refund\n                        \n                    \n                \n            \n            \n                \n                        \n                    refund(transactionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/stripe/stripe.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Refund d'une transaction Stripe Checkout.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                transactionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    l'id de PaymentIntent ou Checkout Session\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(StripeService.name)\n                    \n                \n                    \n                        \n                                Defined in src/payment/stripe/stripe.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/payment/stripe/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport Stripe from 'stripe';\nimport { PaymentProcessor } from '../payment-processor.interface';\n\n@Injectable()\nexport class StripeService implements PaymentProcessor {\n  private readonly logger = new Logger(StripeService.name);\n  private stripe: Stripe;\n\n  constructor() {\n    if (!process.env.STRIPE_SECRET_KEY) {\n      throw new Error('STRIPE_SECRET_KEY is not defined');\n    }\n    this.stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n      apiVersion: '2025-04-30.basil',\n    });\n  }\n\n  /**\n   * Stripe Checkout workflow : pas de \"charge\" direct.\n   */\n  async charge(\n    amount?: number,\n    currency?: string,\n    paymentDetails?: any,\n  ): Promise {\n    throw new Error('charge method is disabled for Stripe Checkout');\n  }\n\n  /**\n   * Refund d'une transaction Stripe Checkout.\n   * @param transactionId l'id de PaymentIntent ou Checkout Session\n   */\n  async refund(transactionId: string): Promise {\n    try {\n      // On tente avec l'id comme payment_intent (Stripe PaymentIntent ID)\n      const refund = await this.stripe.refunds.create({\n        payment_intent: transactionId,\n      });\n      return refund.status === 'succeeded';\n    } catch (error) {\n      this.logger.error(`Refund failed: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Récupération d'une session Checkout Stripe.\n   * @param transactionId id de la session Checkout (ex: cs_test_xxx)\n   */\n  async getTransactionDetails(\n    transactionId: string,\n  ): Promise {\n    return this.stripe.checkout.sessions.retrieve(transactionId);\n  }\n\n  /**\n   * Crée une session Checkout Stripe pour paiement.\n   */\n  async createCheckoutSession(\n    amount: number,\n    currency: string,\n    successUrl: string,\n    cancelUrl: string,\n    metadata: Record = {},\n  ): Promise {\n    // Stripe exige les montants en CENTIMES (ex: 5€ = 500)\n    const session = await this.stripe.checkout.sessions.create({\n      payment_method_types: ['card'],\n      line_items: [\n        {\n          price_data: {\n            currency,\n            unit_amount: Math.round(amount * 100), // Stripe = centimes\n            product_data: { name: 'Paiement Rendez-vous' },\n          },\n          quantity: 1,\n        },\n      ],\n      mode: 'payment',\n      success_url: `${successUrl}?session_id={CHECKOUT_SESSION_ID}`,\n      cancel_url: cancelUrl,\n      metadata, // { userId, appointmentIds, etc. }\n    });\n\n    return {\n      sessionId: session.id,\n      url: session.url!,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TwilioService.html":{"url":"injectables/TwilioService.html","title":"injectable - TwilioService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TwilioService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/twilio/twilio.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                serviceSid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendOtp\n                            \n                            \n                                    Async\n                                verifyOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/sms/twilio/twilio.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendOtp(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sms/twilio/twilio.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOtp(phone: string, code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sms/twilio/twilio.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     twilio.Twilio\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/twilio/twilio.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        serviceSid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/twilio/twilio.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SmsServiceInterface } from '../sms.interface';\nimport twilio from 'twilio';\n\n@Injectable()\nexport class TwilioService implements SmsServiceInterface {\n  private client: twilio.Twilio;\n  private serviceSid: string;\n\n  constructor(private readonly config: ConfigService) {\n    const accountSid = this.config.get('TWILIO_ACCOUNT_SID');\n    const authToken = this.config.get('TWILIO_AUTH_TOKEN');\n    const serviceSid = this.config.get('TWILIO_SERVICE_SID');\n\n    if (!accountSid || !authToken || !serviceSid) {\n      throw new Error(\n        'Twilio configuration error: please check TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, and TWILIO_SERVICE_SID in your environment variables.',\n      );\n    }\n\n    this.serviceSid = serviceSid;\n    this.client = twilio(accountSid, authToken);\n  }\n\n  async sendOtp(phone: string) {\n    return this.client.verify.v2\n      .services(this.serviceSid)\n      .verifications.create({ to: phone, channel: 'sms' });\n  }\n\n  async verifyOtp(phone: string, code: string) {\n    return this.client.verify.v2\n      .services(this.serviceSid)\n      .verificationChecks.create({ to: phone, code });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UniqueConstraint.html":{"url":"injectables/UniqueConstraint.html","title":"injectable - UniqueConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UniqueConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/decorator/validators/unique.decorator.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/decorator/validators/unique.decorator.ts:15\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/decorator/validators/unique.decorator.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(value: any, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/decorator/validators/unique.decorator.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrismaService\n\n                    \n                \n                    \n                        \n                                Defined in src/common/decorator/validators/unique.decorator.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { PrismaService } from '../../../prisma/prisma.service';\nimport { Injectable } from '@nestjs/common';\nimport { getFromContainer } from 'class-validator';\n\n@Injectable()\n@ValidatorConstraint({ async: true })\nexport class UniqueConstraint implements ValidatorConstraintInterface {\n  private prisma: PrismaService;\n\n  constructor() {\n    this.prisma = getFromContainer(PrismaService); // ✅ injection manuelle\n  }\n\n  async validate(value: any, args: ValidationArguments): Promise {\n    const [modelName, fieldName] = args.constraints as [string, string];\n\n    if (!this.prisma[modelName]) {\n      console.error(`Model ${modelName} does not exist in PrismaService.`);\n      return false;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    const record = await this.prisma[modelName].findFirst({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      where: { [fieldName]: value },\n    });\n\n    return !record;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    const [, fieldName] = args.constraints as [string, string];\n    return `${fieldName} already exists`;\n  }\n}\n\nexport function Unique(\n  model: string,\n  field: string,\n  validationOptions?: ValidationOptions,\n) {\n  return function (object: any, propertyName: string) {\n    registerDecorator({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [model, field],\n      validator: UniqueConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAppointmentDto.html":{"url":"classes/UpdateAppointmentDto.html","title":"class - UpdateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/appointment/dto/update-appointment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                location\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                receiptNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                scheduledAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                titleNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                vehicleType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                vin\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123 Main St, City, State', description: 'Lieu du rendez-vous', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/update-appointment.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        receiptNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'REC123456', description: 'Numéro de reçu', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/update-appointment.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        scheduledAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2023-06-15T14:00:00', description: 'Date et heure du rendez-vous', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/update-appointment.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: AppointmentStatus, example: undefined, description: 'Statut du rendez-vous', required: false})@IsEnum(AppointmentStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/update-appointment.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        titleNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ABC123456', description: 'Numéro du titre', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/update-appointment.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        vehicleType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'SUV', description: 'Type de véhicule', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/update-appointment.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        vin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '1HGCM82633A123456', description: 'Numéro d'identification du véhicule (VIN)', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/update-appointment.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsEnum } from 'class-validator';\nimport { AppointmentStatus } from '@prisma/client';\n\nexport class UpdateAppointmentDto {\n  @ApiProperty({ example: '1HGCM82633A123456', description: 'Numéro d\\'identification du véhicule (VIN)', required: false })\n  @IsString()\n  @IsOptional()\n  vin?: string;\n\n  @ApiProperty({ example: 'SUV', description: 'Type de véhicule', required: false })\n  @IsString()\n  @IsOptional()\n  vehicleType?: string;\n\n  @ApiProperty({ example: 'ABC123456', description: 'Numéro du titre', required: false })\n  @IsString()\n  @IsOptional()\n  titleNumber?: string;\n\n  @ApiProperty({ example: 'REC123456', description: 'Numéro de reçu', required: false })\n  @IsString()\n  @IsOptional()\n  receiptNumber?: string;\n\n  @ApiProperty({ example: '2023-06-15T14:00:00', description: 'Date et heure du rendez-vous', required: false })\n  @IsString()\n  @IsOptional()\n  scheduledAt?: string;\n\n  @ApiProperty({ example: '123 Main St, City, State', description: 'Lieu du rendez-vous', required: false })\n  @IsString()\n  @IsOptional()\n  location?: string;\n\n  @ApiProperty({ enum: AppointmentStatus, example: AppointmentStatus.CONFIRMED, description: 'Statut du rendez-vous', required: false })\n  @IsEnum(AppointmentStatus)\n  @IsOptional()\n  status?: AppointmentStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDocumentDto.html":{"url":"classes/UpdateDocumentDto.html","title":"class - UpdateDocumentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDocumentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/document/dto/update-document.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DocumentType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: DocumentType, example: undefined, description: 'Nouveau type du document'})@IsNotEmpty()@IsEnum(DocumentType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/update-document.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty } from 'class-validator';\nimport { DocumentType } from '@prisma/client';\n\nexport class UpdateDocumentDto {\n  @ApiProperty({\n    enum: DocumentType,\n    example: DocumentType.RECEIPT,\n    description: 'Nouveau type du document',\n  })\n  @IsNotEmpty()\n  @IsEnum(DocumentType)\n  type: DocumentType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePaymentModeDto.html":{"url":"classes/UpdatePaymentModeDto.html","title":"class - UpdatePaymentModeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePaymentModeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment-mode/dto/update-payment-mode.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePaymentModeDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePaymentModeDto } from './create-payment-mode.dto';\n\nexport class UpdatePaymentModeDto extends PartialType(CreatePaymentModeDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadModule.html":{"url":"modules/UploadModule.html","title":"module - UploadModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_providers\n\n\n\ncluster_UploadModule_exports\n\n\n\n\nUploadService \n\nUploadService \n\n\n\nUploadModule\n\nUploadModule\n\nUploadService  -->\n\nUploadModule->UploadService \n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nUploadModule -->\n\nCloudinaryService->UploadModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/upload/upload.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudinaryService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UploadService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // src/upload/upload.module.ts\nimport { Global, Module } from '@nestjs/common';\nimport { CloudinaryService } from './cloudinary/cloudinary.service';\n\n\n@Global()\n@Module({\n  providers: [\n    CloudinaryService,\n    {\n      provide: 'UploadService',\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      useClass: CloudinaryService,\n    },\n  ],\n  exports: ['UploadService'],\n})\nexport class UploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadService.html":{"url":"injectables/UploadService.html","title":"injectable - UploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/upload.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseDir\n                            \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Private\n                                    Async\n                                ensureDirectory\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                            \n                                uploadFile\n                            \n                            \n                                    Async\n                                uploadMultiple\n                            \n                            \n                                    Async\n                                uploadSingle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/upload/upload.service.ts:19\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(filePath: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filePath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        ensureDirectory\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureDirectory(folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(originalName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                originalName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadFile\n                        \n                    \n                \n            \n            \n                \nuploadFile(image: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadMultiple(files: Express.Multer.File[], folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'hotel-chambres'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadSingle\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadSingle(file: Express.Multer.File, folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'hotel-chambres'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseDir\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/upload/upload.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UploadService.name)\n                    \n                \n                    \n                        \n                                Defined in src/upload/upload.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\n\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as crypto from 'crypto';\nimport {\n  FileStorageService,\n  FileUploadResult,\n} from './interfaces/upload.interface';\n@Injectable()\nexport class UploadService implements FileStorageService {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  uploadFile(image: Express.Multer.File) {\n    throw new Error('Method not implemented.');\n  }\n  private logger = new Logger(UploadService.name);\n  private baseDir: string;\n\n  constructor() {\n    this.baseDir = process.env.UPLOAD_DIR || 'uploads';\n  }\n\n  private async ensureDirectory(folder: string): Promise {\n    const dirPath = path.join(this.baseDir, folder);\n    await fs.mkdir(dirPath, { recursive: true });\n    return dirPath;\n  }\n\n  private generateFileName(originalName: string): string {\n    const ext = path.extname(originalName);\n    const hash = crypto.randomBytes(8).toString('hex');\n    return `${hash}${ext}`;\n  }\n\n  async uploadSingle(\n    file: Express.Multer.File,\n    folder: string = 'hotel-chambres',\n  ): Promise {\n    const dirPath = await this.ensureDirectory(folder);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const fileName = this.generateFileName(file.originalname);\n    const filePath = path.join(dirPath, fileName);\n\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-member-access\n      await fs.writeFile(filePath, file.buffer);\n      const relativePath = path.join(folder, fileName);\n\n      return {\n        url: `/uploads/${relativePath}`,\n        id: relativePath,\n      };\n    } catch (error) {\n      this.logger.error(\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        `Erreur lors de l'enregistrement du fichier: ${error.message}`,\n      );\n      throw error;\n    }\n  }\n\n  async uploadMultiple(\n    files: Express.Multer.File[],\n    folder: string = 'hotel-chambres',\n  ): Promise {\n    if (!files?.length) return [];\n\n    try {\n      return await Promise.all(\n        files.map((file) => this.uploadSingle(file, folder)),\n      );\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      this.logger.error(`Échec de l'upload batch: ${error.nmessage}`);\n      throw error;\n    }\n  }\n  async deleteFile(filePath: string): Promise {\n    const fullPath = path.join(this.baseDir, filePath);\n    try {\n      await fs.unlink(fullPath);\n      this.logger.log(`🗑️ Fichier supprimé : ${filePath}`);\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (error) {\n      this.logger.warn(`⚠️ Impossible de supprimer le fichier : ${filePath}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                sendOtp\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                verifyOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new user'})@ApiResponse({status: 201, description: 'User created successfully.'})@ApiBody({type: CreateUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all users'})@ApiResponse({status: 200, description: 'List of users.'})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get a single user by ID'})@ApiResponse({status: 200, description: 'User found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Soft delete a user by ID'})@ApiResponse({status: 200, description: 'User soft-deleted.'})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        sendOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendOtp(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/send-otp')@ApiOperation({summary: 'Send OTP to user phone'})@ApiResponse({status: 200, description: 'OTP sent to user.'})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a user by ID'})@ApiResponse({status: 200, description: 'User updated.'})@ApiBody({type: UpdateUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOtp(dto: VerifyOtpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('verify-otp')@ApiOperation({summary: 'Verify OTP and activate phone'})@ApiResponse({status: 200, description: 'Phone verified.'})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            VerifyOtpDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Patch,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBody,\n} from '@nestjs/swagger';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { VerifyOtpDto } from './dto/verify-otp.dto';\nimport { Public } from '../common/decorator/public.decorator';\n\n@ApiTags('Users')\n@Public()\n@Controller('users')\nexport class UserController {\n  constructor(private readonly usersService: UserService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({ status: 201, description: 'User created successfully.' })\n  @ApiBody({ type: CreateUserDto })\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all users' })\n  @ApiResponse({ status: 200, description: 'List of users.' })\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a single user by ID' })\n  @ApiResponse({ status: 200, description: 'User found.' })\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a user by ID' })\n  @ApiResponse({ status: 200, description: 'User updated.' })\n  @ApiBody({ type: UpdateUserDto })\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Soft delete a user by ID' })\n  @ApiResponse({ status: 200, description: 'User soft-deleted.' })\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(id);\n  }\n\n  @Post(':id/send-otp')\n  @ApiOperation({ summary: 'Send OTP to user phone' })\n  @ApiResponse({ status: 200, description: 'OTP sent to user.' })\n  sendOtp(@Param('id') id: string) {\n    return this.usersService.sendPhoneVerificationOtp(id);\n  }\n\n  @Post('verify-otp')\n  @ApiOperation({ summary: 'Verify OTP and activate phone' })\n  @ApiResponse({ status: 200, description: 'Phone verified.' })\n  verifyOtp(@Body() dto: VerifyOtpDto) {\n    return this.usersService.verifyPhoneOtp(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nUserModule -->\n\nSmsModule->UserModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nUserModule -->\n\nRedisService->UserModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nUserModule -->\n\nResponseService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            SmsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { RedisService } from '../redis/redis.service';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { SmsModule } from '../sms/sms.module'; // ✅ Ajout ici\n\n@Module({\n  imports: [PrismaModule, SmsModule], // ✅ Tu importes PrismaModule\n  controllers: [UserController],\n  providers: [UserService, RedisService, ResponseService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                sendPhoneVerificationOtp\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                verifyPhoneOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, redisService: RedisService, responseService: ResponseService, smsService: SmsServiceInterface)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        smsService\n                                                  \n                                                        \n                                                                        SmsServiceInterface\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendPhoneVerificationOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendPhoneVerificationOtp(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, data: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyPhoneOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyPhoneOtp(dto: VerifyOtpDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            VerifyOtpDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { RedisService } from '../redis/redis.service';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport * as bcrypt from 'bcrypt';\nimport { SMS_SERVICE, SmsServiceInterface } from '../sms/sms.interface';\nimport { VerifyOtpDto } from './dto/verify-otp.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly redisService: RedisService,\n    private readonly responseService: ResponseService,\n    @Inject(SMS_SERVICE)\n    private readonly smsService: SmsServiceInterface,\n  ) {}\n\n  async create(data: CreateUserDto) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    const hashedPassword = await bcrypt.hash(data.password, 10);\n\n    const user = await this.prisma.user.create({\n      data: {\n        ...data,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        password: hashedPassword,\n        isPhoneVerified: false,\n      },\n    });\n\n    // Invalider le cache après création\n    await this.redisService.del('users:all');\n\n    return this.responseService.created(user, 'User created successfully.');\n  }\n\n  async findAll() {\n    return this.redisService.cacheable('users:all', 60, async () => {\n      const users = await this.prisma.user.findMany({\n        where: { deletedAt: null },\n      });\n      return this.responseService.success(users, 'List of users retrieved.');\n    });\n  }\n\n  async findOne(id: string) {\n    const user = await this.prisma.user.findFirst({\n      where: { id, deletedAt: null },\n    });\n\n    if (!user) {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw this.responseService.notFound('User not found.');\n    }\n\n    return this.responseService.success(user, 'User retrieved.');\n  }\n\n  async update(id: string, data: UpdateUserDto) {\n    if (data.password) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      data.password = await bcrypt.hash(data.password, 10);\n    }\n\n    const user = await this.prisma.user.update({\n      where: { id },\n      data,\n    });\n\n    // Invalider le cache après update\n    await this.redisService.del('users:all');\n\n    return this.responseService.success(user, 'User updated successfully.');\n  }\n\n  async remove(id: string) {\n    const user = await this.prisma.user.update({\n      where: { id },\n      data: { deletedAt: new Date() },\n    });\n\n    // Invalider le cache après suppression\n    await this.redisService.del('users:all');\n\n    return this.responseService.success(\n      user,\n      'User deleted (soft) successfully.',\n    );\n  }\n  async sendPhoneVerificationOtp(userId: string) {\n    const user = await this.prisma.user.findUnique({ where: { id: userId } });\n\n    if (!user) {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw this.responseService.notFound('User not found.');\n    }\n\n    await this.smsService.sendOtp(user.phone);\n    return this.responseService.success(null, 'OTP sent to phone.');\n  }\n\n  async verifyPhoneOtp(dto: VerifyOtpDto) {\n    const user = await this.prisma.user.findUnique({\n      where: { id: dto.userId },\n    });\n\n    if (!user) {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw this.responseService.notFound('User not found.');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const result = await this.smsService.verifyOtp(user.phone, dto.code);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (result.status === 'approved') {\n      await this.prisma.user.update({\n        where: { id: dto.userId },\n        data: { isPhoneVerified: true },\n      });\n      return this.responseService.success(null, 'Phone verified successfully.');\n    } else {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw this.responseService.badRequest(['Invalid OTP code.']);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ValidationModule.html":{"url":"modules/ValidationModule.html","title":"module - ValidationModule","body":"\n                   \n\n\n\n\n    Modules\n    ValidationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ValidationModule\n\n\n\ncluster_ValidationModule_exports\n\n\n\ncluster_ValidationModule_providers\n\n\n\n\nExceptionService \n\nExceptionService \n\n\n\nResponseService \n\nResponseService \n\n\n\nValidationService \n\nValidationService \n\n\n\nValidationModule\n\nValidationModule\n\nExceptionService  -->\n\nValidationModule->ExceptionService \n\n\n\nResponseService  -->\n\nValidationModule->ResponseService \n\n\n\nValidationService  -->\n\nValidationModule->ValidationService \n\n\n\n\n\nExceptionService\n\nExceptionService\n\nValidationModule -->\n\nExceptionService->ValidationModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nValidationModule -->\n\nPrismaService->ValidationModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nValidationModule -->\n\nResponseService->ValidationModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nValidationModule -->\n\nValidationService->ValidationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/validation/validation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExceptionService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExceptionService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Global } from '@nestjs/common';\nimport { ValidationService } from './validation.service';\nimport { ExceptionService } from './exception/exception.service';\nimport { ResponseService } from './exception/response/response.service';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Global()\n@Module({\n  providers: [\n    ValidationService,\n    ExceptionService,\n    ResponseService,\n    PrismaService,\n  ],\n  exports: [ValidationService, ExceptionService, ResponseService],\n})\nexport class ValidationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationService.html":{"url":"injectables/ValidationService.html","title":"injectable - ValidationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/validation.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ValidationPipe\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                options\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(exceptionService: ExceptionService)\n                    \n                \n                        \n                            \n                                Defined in src/validation/validation.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        exceptionService\n                                                  \n                                                        \n                                                                        ExceptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ValidationPipeOptions\n\n                    \n                \n                    \n                        \n                                Defined in src/validation/validation.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ValidationPipe, ValidationPipeOptions } from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport { ExceptionService } from './exception/exception.service';\n@Injectable()\nexport class ValidationService extends ValidationPipe {\n  // Make options accessible for testing\n  readonly options: ValidationPipeOptions;\n\n  constructor(private readonly exceptionService: ExceptionService) {\n    const options: ValidationPipeOptions = {\n      whitelist: true,\n      transform: true,\n      forbidNonWhitelisted: true,\n      validationError: {\n        target: false,\n        value: false,\n      },\n      transformOptions: {\n        enableImplicitConversion: true,\n      },\n      exceptionFactory: (errors: ValidationError[]) => {\n        return this.exceptionService.createValidationException(errors);\n      },\n    };\n    super(options);\n    this.options = options;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyOtpDto.html":{"url":"classes/VerifyOtpDto.html","title":"class - VerifyOtpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyOtpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/verify-otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                code\n                            \n                            \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The OTP code sent to the user's phone.', example: '123456', minLength: 4, maxLength: 10})@IsString()@Length(4, 10, {message: 'Code must be between 4 and 10 characters.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/verify-otp.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the user verifying the OTP.', example: 'a1b2c3d4-e5f6-7890-abcd-1234567890ef'})@IsString()@Exists('user', 'id', {message: 'User does not exist.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/verify-otp.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, Length } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Exists } from '../../common/decorator/validators/exists.decorator';\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: \"The OTP code sent to the user's phone.\",\n    example: '123456',\n    minLength: 4,\n    maxLength: 10,\n  })\n  @IsString()\n  @Length(4, 10, { message: 'Code must be between 4 and 10 characters.' })\n  code: string;\n\n  @ApiProperty({\n    description: 'The ID of the user verifying the OTP.',\n    example: 'a1b2c3d4-e5f6-7890-abcd-1234567890ef',\n  })\n  @IsString()\n  @Exists('user', 'id', { message: 'User does not exist.' })\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WhatsAppService.html":{"url":"injectables/WhatsAppService.html","title":"injectable - WhatsAppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WhatsAppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/whatsapp/whatsapp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                fromNumber\n                            \n                            \n                                    Private\n                                    Readonly\n                                OTP_EXPIRATION_TIME\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendOtp\n                            \n                            \n                                    Async\n                                verifyOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/sms/whatsapp/whatsapp.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendOtp(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sms/whatsapp/whatsapp.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOtp(phone: string, code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sms/whatsapp/whatsapp.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     twilio.Twilio\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/whatsapp/whatsapp.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fromNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/whatsapp/whatsapp.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        OTP_EXPIRATION_TIME\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 10 * 60\n                    \n                \n                    \n                        \n                                Defined in src/sms/whatsapp/whatsapp.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SmsServiceInterface } from '../sms.interface';\nimport twilio from 'twilio';\nimport { RedisService } from '../../redis/redis.service';\n\n@Injectable()\nexport class WhatsAppService implements SmsServiceInterface {\n  private client: twilio.Twilio;\n  private fromNumber: string;\n  private readonly OTP_EXPIRATION_TIME = 10 * 60; // 10 minutes in seconds\n\n  constructor(\n    private readonly config: ConfigService,\n    private readonly redisService: RedisService,\n  ) {\n    const accountSid = this.config.get('TWILIO_ACCOUNT_SID');\n    const authToken = this.config.get('TWILIO_AUTH_TOKEN');\n    const fromNumber = this.config.get('WHATSAPP_FROM_NUMBER');\n\n    if (!accountSid || !authToken || !fromNumber) {\n      throw new Error(\n        'WhatsApp configuration error: please check TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, and WHATSAPP_FROM_NUMBER in your environment variables.',\n      );\n    }\n\n    this.fromNumber = fromNumber;\n    this.client = twilio(accountSid, authToken);\n  }\n\n  async sendOtp(phone: string): Promise {\n    // Generate a random 6-digit code\n    const code = Math.floor(100000 + Math.random() * 900000).toString();\n\n    // Store the code in Redis with expiration\n    const redisKey = `otp:${phone}`;\n    await this.redisService.set(redisKey, code, this.OTP_EXPIRATION_TIME);\n\n    // Check if the phone number is the same as the fromNumber\n    if (phone === this.fromNumber) {\n      console.log(`Cannot send WhatsApp message to the same number as the sender (${phone}). Code stored in Redis.`);\n      // Return a mock successful response without actually sending the message\n      return {\n        sid: 'MOCK_SID',\n        status: 'delivered',\n        body: `Your verification code is: ${code}`,\n      };\n    }\n\n    // Send the code via WhatsApp\n    return this.client.messages.create({\n      body: `Your verification code is: ${code}`,\n      from: `whatsapp:${this.fromNumber}`,\n      to: `whatsapp:${phone}`\n    });\n  }\n\n  async verifyOtp(phone: string, code: string): Promise {\n    const redisKey = `otp:${phone}`;\n    const storedCode = await this.redisService.get(redisKey);\n\n    // Check if the code matches the stored code\n    if (storedCode && storedCode === code) {\n      // Clear the code after successful verification\n      await this.redisService.del(redisKey);\n      return { status: 'approved' };\n    }\n\n    return { status: 'rejected' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/appointment/appointment.controller.ts\n            \n            controller\n            AppointmentController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/appointment/appointment.service.ts\n            \n            injectable\n            AppointmentService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/appointment/dto/create-appointment.dto.ts\n            \n            class\n            CreateAppointmentDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/appointment/dto/create-guest-appointment.dto.ts\n            \n            class\n            CreateGuestAppointmentDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/appointment/dto/param-appointment-id.dto.ts\n            \n            class\n            ParamAppointmentIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/appointment/dto/param-user-id.dto.ts\n            \n            class\n            ParamUserIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/appointment/dto/update-appointment.dto.ts\n            \n            class\n            UpdateAppointmentDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/blacklist-token/blacklist-token.service.ts\n            \n            injectable\n            BlacklistTokenService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/request-password-reset.dto.ts\n            \n            class\n            RequestPasswordResetDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt-strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/optional-jwt-auth/optional-jwt-auth.guard.ts\n            \n            injectable\n            OptionalJwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/refresh-token/refresh-token.service.ts\n            \n            injectable\n            RefreshTokenService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/cache/cache.service.ts\n            \n            injectable\n            CacheService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/common/decorator/cache/cache-evict.decorator.ts\n            \n            interface\n            CacheEvictOptions\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/common/decorator/cache/cache-evict.decorator.ts\n            \n            variable\n            CACHE_EVICT_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorator/cache/cache-evict.decorator.ts\n            \n            variable\n            CacheEvict\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorator/cache/cache-prefix.decorator.ts\n            \n            variable\n            CACHE_PREFIX_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorator/cache/cache-prefix.decorator.ts\n            \n            variable\n            CachePrefix\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/cache/cacheable.decorator.ts\n            \n            interface\n            CacheableOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/decorator/cache/cacheable.decorator.ts\n            \n            variable\n            Cacheable\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorator/cache/cacheable.decorator.ts\n            \n            variable\n            CACHEABLE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorator/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorator/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/validators/exists.decorator.ts\n            \n            injectable\n            ExistsConstraint\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/common/decorator/validators/exists.decorator.ts\n            \n            function\n            Exists\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/validators/unique.decorator.ts\n            \n            injectable\n            UniqueConstraint\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/common/decorator/validators/unique.decorator.ts\n            \n            function\n            Unique\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/interceptor/cache.interceptor.ts\n            \n            injectable\n            CacheInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/document/document.controller.ts\n            \n            controller\n            DocumentController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/document/document.controller.ts\n            \n            interface\n            AuthenticatedRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/document/document.service.ts\n            \n            injectable\n            DocumentService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/document/dto/create-document.dto.ts\n            \n            class\n            CreateDocumentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/document/dto/document-response.dto.ts\n            \n            class\n            DocumentResponseDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/document/dto/param-document-id.dto.ts\n            \n            class\n            ParamDocumentIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/document/dto/param-user-id.dto.ts\n            \n            class\n            ParamUserIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/document/dto/update-document.dto.ts\n            \n            class\n            UpdateDocumentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/firebase/firebase-admin/firebase-admin.service.ts\n            \n            injectable\n            FirebaseAdminService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/payment-mode/dto/create-payment-mode.dto.ts\n            \n            class\n            CreatePaymentModeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/payment-mode/dto/update-payment-mode.dto.ts\n            \n            class\n            UpdatePaymentModeDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/payment-mode/payment-mode.controller.ts\n            \n            controller\n            PaymentModeController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/payment-mode/payment-mode.service.ts\n            \n            injectable\n            PaymentModeService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/payment/dto/create-payment.dto.ts\n            \n            class\n            CreatePaymentDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/payment/payment-processor.factory.ts\n            \n            injectable\n            PaymentProcessorFactory\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/payment/payment-processor.interface.ts\n            \n            interface\n            PaymentProcessor\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/payment/payment.controller.ts\n            \n            controller\n            PaymentController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/payment/payment.service.ts\n            \n            injectable\n            PaymentService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/payment/stripe/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                50 %\n                (4/8)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/redis/redis.service.ts\n            \n            injectable\n            RedisService\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/sms/evolution-api/evolution-api.service.ts\n            \n            injectable\n            EvolutionApiService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/sms/sms.interface.ts\n            \n            interface\n            SmsServiceInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/sms/sms.interface.ts\n            \n            variable\n            SMS_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sms/twilio/twilio.service.ts\n            \n            injectable\n            TwilioService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/sms/whatsapp/whatsapp.service.ts\n            \n            injectable\n            WhatsAppService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/test/mocks/blacklist-token.mock.ts\n            \n            variable\n            createMockBlacklistTokenService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/mocks/prisma.mock.ts\n            \n            variable\n            createMockPrismaService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/mocks/response.mock.ts\n            \n            variable\n            createMockResponseService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/upload/cloudinary/cloudinary.service.ts\n            \n            injectable\n            CloudinaryService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/upload/interfaces/upload.interface.ts\n            \n            interface\n            FileStorageService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/upload/interfaces/upload.interface.ts\n            \n            interface\n            FileUploadResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/upload/interfaces/upload.interface.ts\n            \n            variable\n            DATABASE_CONNECTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/upload/upload.service.ts\n            \n            injectable\n            UploadService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/verify-otp.dto.ts\n            \n            class\n            VerifyOtpDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/validation/exception/exception.service.ts\n            \n            injectable\n            ExceptionService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/validation/exception/response/response.interface.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/validation/exception/response/response.service.ts\n            \n            injectable\n            ResponseService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/validation/validation.service.ts\n            \n            injectable\n            ValidationService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/ioredis : ^2.0.2\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.0\n        \n            @nestjs/platform-socket.io : ^11.1.0\n        \n            @nestjs/swagger : ^11.1.5\n        \n            @nestjs/websockets : ^11.1.0\n        \n            @prisma/client : ^6.6.0\n        \n            axios : ^1.6.7\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cloudinary : ^2.6.0\n        \n            date-fns : ^4.1.0\n        \n            firebase-admin : ^13.3.0\n        \n            ioredis : ^5.6.1\n        \n            multer : ^1.4.5-lts.2\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            stripe : ^18.1.0\n        \n            twilio : ^5.5.2\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            Exists   (src/.../exists.decorator.ts)\n                        \n                        \n                            Unique   (src/.../unique.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/decorator/validators/exists.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Exists\n                        \n                    \n                \n            \n            \n                \nExists(model: string, field: string, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                model\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/common/decorator/validators/unique.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Unique\n                        \n                    \n                \n            \n            \n                \nUnique(model: string, field: string, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                model\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nSalvage Inspection Backend\nDescription\nThe Salvage Inspection Backend is a comprehensive API service built with NestJS that manages vehicle salvage inspections. This system allows users to register, upload vehicle-related documents, schedule inspection appointments, make payments, and communicate with administrators.\nKey Features\n\nUser authentication and authorization with JWT\nDocument upload and management\nAppointment scheduling for vehicle inspections\nPayment processing with Stripe\nWhatsApp notifications with Evolution API\nReal-time caching with Redis\nComprehensive API documentation with Swagger\n\nArchitecture\nThe application follows a modular architecture based on NestJS best practices:\nCore Modules\n\nConfigModule: Manages environment variables and application configuration\nPrismaModule: Handles database operations using Prisma ORM\nRedisModule: Provides caching capabilities using Redis\nValidationModule: Handles input validation and error responses\n\nFeature Modules\n\nUserModule: Manages user registration, profiles, and authentication\nAuthModule: Handles JWT authentication, token management, and authorization\nDocumentModule: Manages document uploads and storage using Cloudinary\nAppointmentModule: Handles scheduling and management of inspection appointments\nPaymentModule: Processes payments using Stripe\nSmsModule: Sends WhatsApp notifications using Evolution API\nUploadModule: Handles file uploads and storage\n\nData Model\nThe application uses PostgreSQL with Prisma ORM and includes the following main entities:\n\nUser: Stores user information and authentication details\nDocument: Manages vehicle-related documents (licenses, titles, receipts)\nAppointment: Tracks inspection appointments with vehicle details\nPayment: Records payment transactions for appointments\nPaymentMode: Defines available payment methods\nMessage: Stores communication between users and administrators\n\nAPI Endpoints\nAuthentication\n\nPOST /auth/login: Authenticate a user and get JWT tokens\nPOST /auth/logout: Invalidate the current JWT token\nPOST /auth/refresh: Get a new JWT token using a refresh token\nPOST /auth/request-password-reset: Request a password reset code (sent via WhatsApp)\nPOST /auth/reset-password: Reset password using the verification code\n\nPassword Reset Flow\n\nUser requests a password reset by sending their email to /auth/request-password-reset\nSystem sends a verification code to the user's WhatsApp\nUser submits the verification code, old password, and new password to /auth/reset-password\nSystem verifies the code and old password, then updates the password\n\nWhatsApp Integration\nThe application uses Evolution API to send verification codes for password reset. This integration requires:\n\nA self-hosted Evolution API server or access to a hosted instance\nA WhatsApp account connected to Evolution API\nProper configuration in the .env file (EVOLUTION_API_BASE_URL, EVOLUTION_API_INSTANCE, EVOLUTION_API_KEY, WHATSAPP_FROM_NUMBER)\n\nAbout Evolution API\nEvolution API is an open-source REST API for WhatsApp that allows you to send and receive messages without using the official WhatsApp Business API. It provides:\n\nMessage sending and receiving\nMedia handling (images, documents, etc.)\nGroup management\nStatus updates\nQR code authentication\n\nBeing open-source and self-hosted, Evolution API can be a cost-effective alternative to commercial WhatsApp API providers.\nDependencies\nCore Dependencies\n\nNestJS (@nestjs/*): Framework for building server-side applications\nPrisma (@prisma/client): ORM for database access\nRedis (@nestjs-modules/ioredis): In-memory data store for caching\nJWT (@nestjs/jwt): JSON Web Token implementation for authentication\nPassport (@nestjs/passport): Authentication middleware\nSwagger (@nestjs/swagger): API documentation\n\nExternal Services\n\nStripe (stripe): Payment processing\nEvolution API (axios): WhatsApp messaging\nCloudinary (cloudinary): Cloud-based image and file management\n\nUtilities\n\nbcrypt: Password hashing\nclass-validator & class-transformer: Input validation and transformation\ndate-fns: Date manipulation\nuuid: Unique identifier generation\n\nProject Setup\nPrerequisites\n\nNode.js (v16+)\nnpm or yarn\nPostgreSQL\nRedis\n\nInstallation\nExample :# Install dependencies\n$ npm install\n\n# Set up environment variables\n$ cp .env.example .env\n# Edit .env with your configuration\n\n# Run database migrations\n$ npx prisma migrate devRunning the Application\nExample :# Development mode\n$ npm run start:dev\n\n# Production mode\n$ npm run start:prodTesting\nExample :# Unit tests\n$ npm run test\n\n# E2E tests\n$ npm run test:e2e\n\n# Test coverage\n$ npm run test:covDocker Setup\nThe application is containerized using Docker and Docker Compose for easy deployment and development.\nDocker Architecture\nThe Docker setup consists of three main services:\n\napp: The NestJS application container\npostgres: PostgreSQL database container\nredis: Redis cache container\n\nAll services are configured with appropriate environment variables and persistent volumes for data storage.\nPrerequisites\n\nDocker\nDocker Compose\n\nEnvironment Variables\nCopy the example environment file and update it with your own values:\nExample :$ cp .env.example .envRequired environment variables include:\n\nDatabase connection details\nRedis connection details\nJWT configuration\nEvolution API configuration\nCloudinary API credentials\nStripe API keys\n\nRunning with Docker Compose\nTo start the application and its dependencies:\nExample :$ docker-compose up -dThis will start three containers:\n\nThe NestJS application (accessible at http://localhost:3000)\nPostgreSQL database\nRedis cache\n\nTo stop the containers:\nExample :$ docker-compose downTo view logs:\nExample :$ docker-compose logs -f appBuilding the Docker Image\nIf you want to build the Docker image separately:\nExample :$ docker build -t salvage-inspection-backend .Testing the Docker Setup\nA test script is provided to verify that the Docker setup works correctly:\nExample :$ chmod +x test-docker.sh  # Make the script executable (if not already)\n$ ./test-docker.shThis script will:\n\nBuild the Docker image\nStart the containers with Docker Compose\nCheck if the application is running correctly\nStop the containers\n\nAPI Documentation\nThe API is documented using Swagger, which provides an interactive interface to explore and test the endpoints.\nAccessing Swagger Documentation\nWhen the application is running, you can access the Swagger documentation at:\nExample :http://localhost:3000/apiThe Swagger UI provides:\n\nA list of all available endpoints\nRequest and response schemas\nAuthentication requirements\nThe ability to test endpoints directly from the browser\n\nAuthentication\nThe API uses JWT (JSON Web Token) for authentication. To access protected endpoints:\n\nRegister or login to obtain a JWT token\nInclude the token in the Authorization header of your requests:Example :Authorization: Bearer \n\nDevelopment Guidelines\nCode Structure\n\nControllers: Handle HTTP requests and define API endpoints\nServices: Contain business logic and interact with the database\nDTOs: Define data transfer objects for request/response validation\nEntities: Map to database models\nModules: Group related functionality\n\nAdding New Features\n\nCreate a new module: nest generate module feature-name\nCreate a controller: nest generate controller feature-name\nCreate a service: nest generate service feature-name\nDefine DTOs and entities\nImplement business logic in the service\nExpose endpoints in the controller\nAdd the module to AppModule imports\n\nDeployment\nThe application can be deployed to any environment that supports Docker containers. For production deployments, consider:\n\nSetting up a CI/CD pipeline\nUsing container orchestration (Kubernetes, AWS ECS)\nImplementing proper monitoring and logging\nSetting up database backups\nConfiguring HTTPS\n\nResources\n\nNestJS Documentation\nPrisma Documentation\nDocker Documentation\nStripe API Documentation\nEvolution API Documentation\nCloudinary Documentation\n\nLicense\nThis project is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppointmentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CacheModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DocumentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ValidationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CacheModule\n\n\n\ncluster_CacheModule_exports\n\n\n\ncluster_CacheModule_providers\n\n\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_exports\n\n\n\ncluster_PaymentModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_SmsModule\n\n\n\ncluster_SmsModule_providers\n\n\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_exports\n\n\n\ncluster_UploadModule_providers\n\n\n\ncluster_ValidationModule\n\n\n\ncluster_ValidationModule_exports\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAppointmentService \n\nAppointmentService \n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nDocumentModule\n\nDocumentModule\n\nAppModule -->\n\nDocumentModule->AppModule\n\n\n\n\n\nPaymentModeModule\n\nPaymentModeModule\n\nAppModule -->\n\nPaymentModeModule->AppModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nPaymentService \n\nPaymentService \n\nPaymentService  -->\n\nPaymentModule->PaymentService \n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppointmentModule -->\n\nPrismaModule->AppointmentModule\n\n\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nPaymentModeModule -->\n\nPrismaModule->PaymentModeModule\n\n\n\nPaymentModule -->\n\nPrismaModule->PaymentModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nCacheModule\n\nCacheModule\n\nCacheModule -->\n\nRedisModule->CacheModule\n\n\n\n\n\nRedisService \n\nRedisService \n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAuthModule -->\n\nSmsModule->AuthModule\n\n\n\nUserModule -->\n\nSmsModule->UserModule\n\n\n\nAppModule -->\n\nSmsModule->AppModule\n\n\n\n\n\nUploadModule\n\nUploadModule\n\nDocumentModule -->\n\nUploadModule->DocumentModule\n\n\n\nAppModule -->\n\nUploadModule->AppModule\n\n\n\n\n\nUploadService \n\nUploadService \n\nUploadService  -->\n\nUploadModule->UploadService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nValidationModule\n\nValidationModule\n\nAppModule -->\n\nValidationModule->AppModule\n\n\n\n\n\nExceptionService \n\nExceptionService \n\nExceptionService  -->\n\nValidationModule->ExceptionService \n\n\n\n\n\nResponseService \n\nResponseService \n\nResponseService  -->\n\nValidationModule->ResponseService \n\n\n\n\n\nValidationService \n\nValidationService \n\nValidationService  -->\n\nValidationModule->ValidationService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\nAppModule -->\n\nAppointmentService->AppModule\n\n\n\n\n\nDocumentService\n\nDocumentService\n\nDocumentModule -->\n\nDocumentService->DocumentModule\n\n\n\nAppModule -->\n\nDocumentService->AppModule\n\n\n\n\n\nExceptionService\n\nExceptionService\n\nValidationModule -->\n\nExceptionService->ValidationModule\n\n\n\nAppModule -->\n\nExceptionService->AppModule\n\n\n\n\n\nFirebaseAdminService\n\nFirebaseAdminService\n\nAppModule -->\n\nFirebaseAdminService->AppModule\n\n\n\n\n\nPaymentModeService\n\nPaymentModeService\n\nPaymentModeModule -->\n\nPaymentModeService->PaymentModeModule\n\n\n\nAppModule -->\n\nPaymentModeService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nDocumentModule -->\n\nPrismaService->DocumentModule\n\n\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\nValidationModule -->\n\nPrismaService->ValidationModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\nSmsModule -->\n\nRedisService->SmsModule\n\n\n\nUserModule -->\n\nRedisService->UserModule\n\n\n\nAppModule -->\n\nRedisService->AppModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nAppointmentModule -->\n\nResponseService->AppointmentModule\n\n\n\nAuthModule -->\n\nResponseService->AuthModule\n\n\n\nDocumentModule -->\n\nResponseService->DocumentModule\n\n\n\nPaymentModeModule -->\n\nResponseService->PaymentModeModule\n\n\n\nPaymentModule -->\n\nResponseService->PaymentModule\n\n\n\nUserModule -->\n\nResponseService->UserModule\n\n\n\nValidationModule -->\n\nResponseService->ValidationModule\n\n\n\nAppModule -->\n\nResponseService->AppModule\n\n\n\n\n\nTwilioService\n\nTwilioService\n\nSmsModule -->\n\nTwilioService->SmsModule\n\n\n\nAppModule -->\n\nTwilioService->AppModule\n\n\n\n\n\nUploadService\n\nUploadService\n\nAppModule -->\n\nUploadService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nValidationModule -->\n\nValidationService->ValidationModule\n\n\n\nAppModule -->\n\nValidationService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nBlacklistTokenService\n\nBlacklistTokenService\n\nAuthModule -->\n\nBlacklistTokenService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRefreshTokenService\n\nRefreshTokenService\n\nAuthModule -->\n\nRefreshTokenService->AuthModule\n\n\n\n\n\nCacheService \n\nCacheService \n\nCacheService  -->\n\nCacheModule->CacheService \n\n\n\n\n\nCacheService\n\nCacheService\n\nCacheModule -->\n\nCacheService->CacheModule\n\n\n\n\n\nPaymentProcessorFactory\n\nPaymentProcessorFactory\n\nPaymentModule -->\n\nPaymentProcessorFactory->PaymentModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nPaymentModule -->\n\nStripeService->PaymentModule\n\n\n\n\n\nEvolutionApiService\n\nEvolutionApiService\n\nSmsModule -->\n\nEvolutionApiService->SmsModule\n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nUploadModule -->\n\nCloudinaryService->UploadModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        13 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    29 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    19 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CACHE_EVICT_KEY   (src/.../cache-evict.decorator.ts)\n                        \n                        \n                            CACHE_PREFIX_KEY   (src/.../cache-prefix.decorator.ts)\n                        \n                        \n                            Cacheable   (src/.../cacheable.decorator.ts)\n                        \n                        \n                            CACHEABLE_KEY   (src/.../cacheable.decorator.ts)\n                        \n                        \n                            CacheEvict   (src/.../cache-evict.decorator.ts)\n                        \n                        \n                            CachePrefix   (src/.../cache-prefix.decorator.ts)\n                        \n                        \n                            createMockBlacklistTokenService   (src/.../blacklist-token.mock.ts)\n                        \n                        \n                            createMockPrismaService   (src/.../prisma.mock.ts)\n                        \n                        \n                            createMockResponseService   (src/.../response.mock.ts)\n                        \n                        \n                            DATABASE_CONNECTION   (src/.../upload.interface.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            SMS_SERVICE   (src/.../sms.interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorator/cache/cache-evict.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CACHE_EVICT_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CACHE_EVICT_METADATA'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CacheEvict\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (options: CacheEvictOptions) =>\n  SetMetadata(CACHE_EVICT_KEY, options)\n                    \n                \n\n\n        \n    \n\n    src/common/decorator/cache/cache-prefix.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CACHE_PREFIX_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CACHE_PREFIX_METADATA'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CachePrefix\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (prefix: string) =>\n  SetMetadata(CACHE_PREFIX_KEY, prefix)\n                    \n                \n\n\n        \n    \n\n    src/common/decorator/cache/cacheable.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Cacheable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (options: CacheableOptions) =>\n  SetMetadata(CACHEABLE_KEY, options)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CACHEABLE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CACHEABLE_METADATA'\n                    \n                \n\n\n        \n    \n\n    src/test/mocks/blacklist-token.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createMockBlacklistTokenService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {\n  return {\n    blacklist: jest.fn().mockImplementation(async (token: string, expiresAt: Date) => {\n      return Promise.resolve();\n    }),\n    \n    isBlacklisted: jest.fn().mockImplementation(async (token: string) => {\n      return Promise.resolve(false);\n    }),\n  } as unknown as BlacklistTokenService;\n}\n                    \n                \n\n\n        \n    \n\n    src/test/mocks/prisma.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createMockPrismaService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {\n  return {\n    // Add mock implementations for any Prisma models used in tests\n    user: {\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      findMany: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n      count: jest.fn(),\n    },\n    refreshToken: {\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      findMany: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n      deleteMany: jest.fn(),\n    },\n    blacklistedToken: {\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      create: jest.fn(),\n      delete: jest.fn(),\n    },\n    paymentMode: {\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      findMany: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    payment: {\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      findMany: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    appointment: {\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      findMany: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    document: {\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      findMany: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    // Add transaction mock\n    $transaction: jest.fn((callback) => callback()),\n    // Add connect/disconnect mocks\n    $connect: jest.fn(),\n    $disconnect: jest.fn(),\n  } as unknown as PrismaService;\n}\n                    \n                \n\n\n        \n    \n\n    src/test/mocks/response.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createMockResponseService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {\n  return {\n    success: jest.fn().mockImplementation((data, message = 'Opération réussie') => ({\n      statusCode: 200,\n      message,\n      data,\n      timestamp: expect.any(String),\n    })),\n    \n    created: jest.fn().mockImplementation((data, message = 'Ressource créée avec succès') => ({\n      statusCode: 201,\n      message,\n      data,\n      timestamp: expect.any(String),\n    })),\n    \n    badRequest: jest.fn().mockImplementation((errors, message = 'Requête invalide') => ({\n      statusCode: 400,\n      message,\n      errors,\n      timestamp: expect.any(String),\n    })),\n    \n    forbidden: jest.fn().mockImplementation((message = 'Accès interdit') => ({\n      statusCode: 403,\n      message,\n      timestamp: expect.any(String),\n    })),\n    \n    notFound: jest.fn().mockImplementation((message = 'Ressource non trouvée') => ({\n      statusCode: 404,\n      message,\n      timestamp: expect.any(String),\n    })),\n    \n    internalError: jest.fn().mockImplementation((message = 'Erreur interne du serveur') => ({\n      statusCode: 500,\n      message,\n      timestamp: expect.any(String),\n    })),\n    \n    conflict: jest.fn().mockImplementation((message = 'Conflit détecté') => ({\n      statusCode: 409,\n      message,\n      timestamp: expect.any(String),\n    })),\n    \n    error: jest.fn().mockImplementation((message = 'Erreur interne du serveur') => ({\n      statusCode: 500,\n      message,\n      timestamp: expect.any(String),\n    })),\n    \n    unauthorized: jest.fn().mockImplementation((message = 'Non autorisé') => ({\n      statusCode: 401,\n      message,\n      timestamp: expect.any(String),\n    })),\n    \n    inactiveAccount: jest.fn().mockImplementation((userId) => ({\n      statusCode: 400,\n      message: 'Compte inactif',\n      errors: [\n        \"Votre compte n'est pas encore activé. Veuillez vérifier votre numéro de téléphone.\",\n      ],\n      data: {\n        user: {\n          id: userId,\n        },\n      },\n      timestamp: expect.any(String),\n    })),\n  } as unknown as ResponseService;\n}\n                    \n                \n\n\n        \n    \n\n    src/upload/interfaces/upload.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DATABASE_CONNECTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'UPLOAD'\n                    \n                \n\n\n        \n    \n\n    src/common/decorator/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/sms/sms.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SMS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SmsServiceInterface'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
