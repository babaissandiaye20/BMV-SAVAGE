var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.547,1,2.981]],["body/controllers/AppController.html",[0,2.684,1,5.173,2,2.405,3,0.155,4,0.136,5,0.117,6,5.174,7,0.405,8,1.349,9,6.897,10,1.825,11,0.012,12,0.599,13,5.924,14,1.162,15,0.719,16,0.304,17,0.679,18,4.849,19,5.174,20,0.155,21,0.101,22,2.595,23,1.553,24,1.201,25,5.924,26,0.01,27,0.01]],["title/modules/AppModule.html",[28,1.108,29,2.777]],["body/modules/AppModule.html",[1,3.938,2,1.837,3,0.079,4,0.069,5,0.06,11,0.013,16,0.357,17,0.348,18,4.282,19,2.652,20,0.079,21,0.052,26,0.007,27,0.007,28,1.464,29,5.808,30,1.188,31,1.188,32,1.33,33,1.33,34,1.233,35,2.28,36,1.33,37,2.652,38,2.652,39,2.652,40,4.282,41,4.282,42,4.282,43,4.56,44,4.282,45,3.332,46,3.856,47,3.835,48,4.043,49,4.043,50,4.282,51,4.043,52,3.835,53,4.043,54,4.56,55,4.043,56,2.369,57,3.064,58,2.214,59,4.282,60,4.043,61,4.043,62,4.282,63,1.982,64,1.188,65,1.33,66,3.036,67,3.669,68,3.669,69,2.569,70,3.294,71,3.42,72,1.573,73,3.036,74,1.33,75,1.933,76,1.732,77,3.036,78,2.21,79,3.036,80,1.933,81,2.21,82,2.21,83,2.399,84,3.036,85,3.036,86,3.036,87,1.28,88,3.036,89,2.652,90,3.036,91,3.036,92,2.399,93,3.036,94,2.197,95,3.669,96,2.399,97,2.652,98,3.036,99,2.652,100,3.036,101,3.036,102,3.036,103,3.036,104,3.036,105,3.036,106,3.036,107,3.036,108,2.399,109,3.036,110,3.036,111,3.036,112,1.442,113,3.036,114,1.933,115,2.652,116,0.231,117,2.652,118,1.826,119,3.036]],["title/injectables/AppService.html",[18,2.608,120,0.362]],["body/injectables/AppService.html",[3,0.159,4,0.139,5,0.12,7,0.417,8,1.372,9,6.962,11,0.012,12,0.617,14,1.196,15,0.731,16,0.261,17,0.699,18,4.604,20,0.159,21,0.104,24,1.235,26,0.011,27,0.011,120,0.639,121,1.547,122,5.324,123,6.095,124,6.095,125,6.095]],["title/controllers/AppointmentController.html",[0,1.547,68,2.777]],["body/controllers/AppointmentController.html",[0,1.005,2,1.08,3,0.069,4,0.061,5,0.052,7,0.182,8,0.777,10,2.117,11,0.013,12,0.695,14,1.348,15,0.505,16,0.302,17,0.305,20,0.069,21,0.045,22,1.165,23,0.697,24,1.543,26,0.006,27,0.006,51,3.001,68,2.776,94,1.08,116,0.507,126,2.323,127,1.517,128,4.867,129,4.895,130,3.034,131,3.575,132,3.196,133,3.575,134,2.335,135,4.093,136,2.873,137,2.66,138,5.239,139,2.66,140,5.604,141,4.034,142,2.511,143,3.575,144,5.604,145,3.843,146,3.31,147,2.66,148,1.349,149,1.264,150,1.182,151,4.376,152,2.66,153,4.334,154,1.936,155,1.845,156,3.196,157,3.196,158,3.37,159,4.895,160,3.569,161,2.66,162,2.66,163,4.334,164,2.66,165,2.66,166,2.66,167,1.804,168,2.323,169,4.967,170,2.66,171,2.66,172,3.569,173,2.323,174,2.345,175,3.384,176,2.66,177,2.323,178,1.936,179,2.66,180,2.66,181,4.093,182,2.66,183,4.428,184,3.8,185,3.8,186,4.093,187,2.66,188,1.82,189,2.323,190,4.66,191,2.66,192,2.607,193,2.66,194,2.222,195,2.462,196,2.335,197,2.66,198,4.239,199,4.576,200,1.599,201,1.804,202,0.743,203,2.323,204,2.222,205,4.359,206,2.979,207,3.234,208,3.234,209,1.517,210,2.607,211,1.804,212,2.66,213,1.804,214,1.165,215,2.66,216,4.132,217,3.431,218,3.196,219,2.101,220,2.66,221,2.66,222,2.66,223,2.66,224,2.66,225,1.804,226,1.395,227,2.101,228,2.66,229,2.323,230,2.66,231,2.66,232,2.66,233,2.66,234,2.66,235,2.66,236,2.66,237,2.66,238,2.66]],["title/modules/AppointmentModule.html",[28,1.108,40,2.608]],["body/modules/AppointmentModule.html",[2,2.68,3,0.137,4,0.12,5,0.103,11,0.012,16,0.334,17,0.602,20,0.137,21,0.089,26,0.01,27,0.01,28,1.954,30,2.056,31,2.056,32,2.301,33,2.301,34,2.133,35,3.043,36,3.162,40,5.322,45,3.946,51,5.05,58,2.622,63,2.892,64,2.056,65,2.301,68,4.896,69,3.134,75,3.345,87,2.214,203,4.588,239,4.588,240,4.588,241,5.252,242,5.252,243,5.252,244,5.252]],["title/injectables/AppointmentService.html",[51,2.462,120,0.362]],["body/injectables/AppointmentService.html",[3,0.064,4,0.056,5,0.048,7,0.167,8,0.727,11,0.013,12,0.695,14,1.31,15,0.764,16,0.286,17,0.28,20,0.064,21,0.041,23,1.004,24,1.354,26,0.006,27,0.006,51,2.303,56,1.885,58,2.124,74,1.069,87,1.029,112,2.929,116,0.509,120,0.338,121,0.62,128,4.585,129,3.345,130,2.541,131,3.345,132,3.052,133,3.345,134,2.184,136,2.244,143,2.132,146,1.984,148,1.354,149,1.268,150,1.186,153,3.629,157,2.184,163,3.629,169,4.658,174,2.524,183,3.734,184,1.655,185,3.943,188,2.25,190,4.529,192,1.554,204,2.079,205,4.128,206,3.44,209,1.392,217,2.811,218,1.392,226,1.803,245,2.132,246,2.466,247,3.829,248,1.106,249,1.392,250,2.441,251,1.745,252,3.829,253,2.441,254,3.309,255,3.026,256,2.441,257,2.619,258,3.829,259,2.441,260,2.441,261,3.829,262,2.441,263,2.439,264,2.441,265,3.829,266,2.441,267,2.439,268,2.441,269,1.929,270,1.264,271,2.597,272,1.304,273,3.734,274,3.734,275,1.706,276,2.319,277,3.829,278,2.441,279,2.787,280,3.829,281,2.787,282,3.829,283,2.787,284,3.829,285,2.787,286,3.829,287,2.787,288,3.829,289,2.787,290,3.829,291,1.929,292,2.441,293,4.128,294,3.345,295,4.128,296,2.905,297,2.439,298,4.228,299,3.943,300,3.408,301,3.829,302,1.304,303,1.304,304,1.304,305,1.304,306,1.304,307,2.787,308,2.173,309,1.614,310,3.829,311,3.829,312,2.441,313,2.441,314,2.597,315,1.678,316,3.829,317,3.829,318,2.448,319,1.468,320,1.929,321,3.829,322,2.132,323,1.655,324,3.829,325,1.777,326,1.929,327,1.897,328,2.441,329,2.441,330,1.929,331,3.026,332,2.441,333,1.468,334,2.132,335,1.655,336,2.441,337,1.655,338,2.441,339,1.112,340,2.441,341,1.777,342,1.264,343,1.777,344,1.929,345,1.209,346,2.132,347,2.441,348,2.441,349,1.554,350,2.441]],["title/controllers/AuthController.html",[0,1.547,351,2.981]],["body/controllers/AuthController.html",[0,1.289,2,1.385,3,0.089,4,0.078,5,0.067,7,0.233,8,0.936,10,2.072,11,0.013,12,0.68,14,1.319,15,0.641,16,0.31,17,0.391,20,0.089,21,0.058,22,1.494,23,0.894,24,1.363,26,0.007,27,0.007,64,1.335,116,0.55,127,1.946,141,3.804,142,2.16,148,1.363,149,1.277,150,1.194,194,3.142,196,1.946,198,4.215,199,3.813,200,2.051,202,0.954,210,4.282,211,2.314,214,2.535,216,4.044,217,2.638,275,0.812,327,3.141,351,3.588,352,2.98,353,2.695,354,3.895,355,4.306,356,3.588,357,4.306,358,4.306,359,3.411,360,5.101,361,3.411,362,5.538,363,3.411,364,3.588,365,3.411,366,3.411,367,3.411,368,4.306,369,3.303,370,3.588,371,3.411,372,4.93,373,3.411,374,3.895,375,3.411,376,4.93,377,5.01,378,2.964,379,3.411,380,3.411,381,4.615,382,3.411,383,3.411,384,4.93,385,3.631,386,4.93,387,6.122,388,3.411,389,4.93,390,4.215,391,4.037,392,3.411,393,4.3,394,3.411,395,4.615,396,3.411,397,3.411,398,4.93,399,3.616,400,5.874,401,3.411,402,4.93,403,3.411,404,2.98,405,3.686,406,2.98,407,3.411,408,3.411,409,3.411,410,3.411,411,3.411,412,3.411,413,3.411,414,3.411,415,3.411,416,3.411,417,3.411,418,3.411,419,3.411,420,3.411,421,3.411,422,3.411,423,3.411,424,3.411,425,2.695,426,3.411,427,3.411,428,3.411,429,3.411,430,3.411,431,2.172,432,3.411,433,3.411,434,2.98,435,3.411]],["title/modules/AuthModule.html",[28,1.108,41,2.608]],["body/modules/AuthModule.html",[2,2.256,3,0.105,4,0.092,5,0.08,11,0.013,16,0.351,17,0.464,20,0.105,21,0.069,26,0.008,27,0.008,28,1.718,30,1.583,31,1.583,32,1.771,33,1.771,34,1.641,35,2.676,36,2.781,41,5.351,45,3.669,47,4.223,49,4.453,58,2.438,63,2.434,64,1.583,65,1.771,69,3.014,70,4.621,71,3.621,72,2.094,75,2.574,87,1.704,89,3.531,92,3.194,114,2.574,115,3.531,351,4.621,356,2.942,378,3.341,405,5.143,406,3.531,436,3.531,437,4.042,438,3.531,439,3.531,440,4.019,441,5.021,442,4.715,443,5.556,444,5.556,445,2.942,446,4.042,447,2.574,448,2.574,449,4.044,450,2.942,451,4.042,452,4.044,453,3.194,454,4.042,455,5.556,456,2.942,457,4.042,458,2.431,459,4.042,460,3.531,461,4.042,462,4.042,463,4.042,464,4.042,465,3.194,466,3.194,467,3.531,468,3.194,469,3.531]],["title/injectables/AuthService.html",[120,0.362,405,2.608]],["body/injectables/AuthService.html",[3,0.059,4,0.052,5,0.044,7,0.154,8,0.682,11,0.013,12,0.657,14,1.227,15,0.825,16,0.287,17,0.258,20,0.059,21,0.038,23,1.639,24,1.268,26,0.005,27,0.005,56,1.803,58,2.059,64,1.407,71,2.919,72,1.167,74,0.987,87,0.95,114,1.435,116,0.495,120,0.318,121,0.572,136,1.07,145,2.162,146,1.862,148,1.316,149,1.233,150,1.153,155,2.259,158,2.162,174,2.469,188,1.311,214,2.845,218,1.285,226,1.005,246,2.401,248,1.038,249,1.285,251,1.638,254,2.953,257,0.915,271,2.438,272,2.337,275,1.748,276,2.411,296,2.434,297,2.333,299,3.041,302,2.211,303,2.211,304,2.211,305,2.211,306,2.211,308,2.637,318,3.24,319,1.355,320,3.543,327,3.534,331,2.84,333,1.355,339,1.027,346,1.968,354,2.84,355,3.14,356,3.264,357,3.14,358,3.14,362,1.968,364,2.617,368,1.968,385,3.24,405,2.289,425,4.044,440,2.778,442,3.982,445,1.64,447,1.435,448,1.435,449,2.617,450,1.64,458,2.697,470,1.968,471,3.595,472,3.595,473,6.254,474,3.543,475,3.917,476,2.778,477,2.253,478,3.595,479,2.253,480,1.358,481,3.595,482,2.253,483,3.595,484,2.253,485,3.595,486,2.253,487,3.595,488,2.253,489,3.595,490,3.917,491,2.253,492,3.595,493,2.253,494,1.64,495,2.253,496,3.595,497,5.206,498,1.435,499,1.968,500,1.968,501,2.647,502,2.846,503,1.951,504,2.655,505,2.549,506,2.253,507,2.253,508,2.253,509,2.253,510,1.78,511,2.253,512,2.253,513,2.253,514,2.253,515,2.253,516,3.595,517,1.968,518,2.253,519,1.64,520,2.222,521,4.485,522,2.253,523,1.968,524,1.528,525,2.253,526,2.253,527,2.617,528,2.253,529,2.253,530,2.253,531,2.84,532,2.84,533,2.253,534,2.253,535,2.253,536,2.253,537,2.253,538,1.78,539,2.253,540,2.253,541,2.253,542,2.253,543,1.968,544,3.14,545,1.528,546,2.617,547,2.617,548,3.14,549,1.968,550,1.435,551,1.78,552,1.435,553,1.968,554,1.968,555,1.64,556,1.78,557,1.64,558,1.968,559,1.167,560,2.253,561,1.968]],["title/interfaces/AuthenticatedRequest.html",[562,1.493,563,2.981]],["body/interfaces/AuthenticatedRequest.html",[0,1.241,3,0.086,4,0.075,5,0.123,7,0.225,11,0.013,15,0.756,16,0.32,17,0.377,20,0.086,21,0.056,22,1.439,23,0.861,24,1.343,26,0.007,27,0.007,52,3.231,116,0.603,136,1.56,141,3.381,142,2.301,145,3.407,151,3.608,156,1.874,158,1.976,160,3.967,174,2.194,188,1.749,194,3.596,195,2.885,196,1.874,198,4.16,199,4.564,200,1.976,201,2.228,202,0.918,204,1.783,207,2.596,208,2.596,209,1.874,213,2.228,214,1.439,216,3.984,217,3.404,225,2.228,226,1.341,227,2.596,257,1.334,275,1.142,296,1.783,297,2.186,318,1.702,327,1.628,335,2.228,337,2.228,339,1.497,341,2.392,353,2.596,369,2.022,370,2.392,374,3.79,377,4.476,390,1.976,391,2.092,399,1.874,524,2.228,562,1.749,563,4.534,564,1.783,565,2.596,566,2.604,567,1.265,568,2.392,569,3.055,570,4.19,571,2.87,572,4.534,573,2.596,574,2.87,575,2.596,576,3.79,577,4.124,578,2.87,579,3.253,580,4.19,581,3.842,582,4.225,583,4.029,584,4.405,585,2.596,586,2.596,587,2.596,588,2.87,589,2.87,590,2.87,591,2.87,592,2.87,593,2.482,594,2.87,595,2.87,596,2.87,597,2.228,598,2.87,599,2.87,600,2.87,601,2.87,602,2.87,603,2.596,604,2.87,605,2.092,606,2.392,607,2.87,608,2.87,609,2.736,610,2.228,611,2.392,612,1.976,613,4.19,614,2.87,615,4.19,616,2.87,617,2.596,618,3.253,619,2.392,620,2.596,621,2.392,622,2.392,623,2.87,624,2.87,625,2.596,626,2.596,627,4.534,628,3.608,629,2.87,630,2.392,631,2.87,632,3.79,633,2.87,634,2.596,635,2.87,636,2.392,637,2.596,638,2.092,639,2.092,640,2.87,641,2.87]],["title/injectables/BlacklistTokenService.html",[120,0.362,440,2.223]],["body/injectables/BlacklistTokenService.html",[3,0.125,4,0.11,5,0.095,7,0.329,8,1.184,11,0.013,12,0.7,14,1.223,15,0.787,16,0.297,17,0.551,20,0.125,21,0.082,23,1.26,24,0.974,26,0.009,27,0.009,56,2.581,58,2.608,74,2.105,87,2.026,116,0.527,120,0.551,121,1.22,148,1.403,149,1.314,150,1.23,214,3.21,246,2.398,248,1.8,249,2.741,251,2.842,257,1.951,272,2.123,275,1.144,276,1.986,440,3.385,447,3.971,448,4.666,480,2.768,517,4.197,519,4.54,593,3.033,642,6.401,643,3.797,644,5.448,645,4.806,646,6.237,647,5.79,648,4.806,649,6.237,650,4.806,651,4.806]],["title/interfaces/CacheEvictOptions.html",[562,1.493,652,2.777]],["body/interfaces/CacheEvictOptions.html",[3,0.153,4,0.135,5,0.116,7,0.402,11,0.013,15,0.797,16,0.252,17,0.674,20,0.198,26,0.01,27,0.01,116,0.448,151,3.743,275,1.685,562,2.144,564,3.191,567,1.58,652,5.147,653,4.645,654,4.645,655,5.015,656,5.135,657,4.279,658,5.135,659,4.645,660,4.505,661,5.135]],["title/injectables/CacheInterceptor.html",[120,0.362,662,3.236]],["body/injectables/CacheInterceptor.html",[3,0.097,4,0.085,5,0.073,7,0.253,8,0.993,11,0.013,12,0.529,14,0.727,16,0.324,17,0.425,20,0.097,21,0.063,23,1.371,24,1.407,26,0.008,27,0.008,57,3.375,76,2.114,116,0.398,120,0.462,121,0.941,127,3.457,148,1.06,149,0.993,150,0.929,151,2.36,160,2.36,248,1.51,272,1.781,275,1.877,276,1.18,297,1.689,302,2.242,303,2.242,304,2.521,305,2.242,306,2.242,345,1.836,456,2.698,501,2.622,502,2.461,504,1.76,505,1.689,520,1.836,523,4.568,552,3.33,559,1.92,652,2.513,655,4.192,657,3.807,662,4.132,663,3.237,664,5.23,665,3.706,666,6.293,667,3.706,668,5.23,669,5.202,670,6.583,671,3.706,672,2.928,673,6.061,674,5.23,675,3.237,676,3.706,677,3.706,678,3.706,679,2.928,680,5.23,681,3.706,682,3.807,683,2.513,684,3.706,685,3.706,686,1.836,687,6.061,688,3.237,689,3.807,690,3.237,691,3.706,692,3.33,693,5.23,694,6.061,695,2.928,696,3.706,697,2.983,698,5.23,699,3.33,700,3.706,701,5.23,702,5.23,703,5.23,704,5.23,705,3.706,706,3.706,707,2.513,708,5.23,709,3.706,710,3.706,711,3.706,712,2.928,713,3.706,714,3.706,715,3.706,716,3.706,717,3.706,718,3.706,719,3.706]],["title/modules/CacheModule.html",[28,1.108,720,2.981]],["body/modules/CacheModule.html",[3,0.144,4,0.126,5,0.109,11,0.012,16,0.316,17,0.634,20,0.144,21,0.094,26,0.01,27,0.01,28,2,30,2.164,31,2.164,32,2.422,33,2.422,34,2.245,35,3.114,36,3.236,46,4.851,63,2.985,64,2.164,65,2.422,69,3.236,720,6.057,721,4.828,722,5.528,723,4.828,724,4.828,725,5.734,726,5.528,727,5.528,728,5.528]],["title/injectables/CacheService.html",[120,0.362,725,2.777]],["body/injectables/CacheService.html",[3,0.089,4,0.078,5,0.067,7,0.232,8,0.933,11,0.013,12,0.64,14,1.373,15,0.762,16,0.211,17,0.389,20,0.089,21,0.058,22,1.488,23,0.89,24,1.17,26,0.007,27,0.01,57,3.189,76,1.937,80,2.163,116,0.511,120,0.434,121,0.862,142,1.779,146,2.545,148,1.361,149,1.201,150,1.124,174,1.731,195,4.037,246,2.356,248,0.981,275,1.507,276,2.229,297,1.548,322,4.292,323,3.332,345,2.861,480,2.726,552,3.129,569,2.163,655,5.031,692,2.163,699,4.275,707,5.309,712,3.883,725,3.332,729,2.967,730,5.774,731,5.527,732,4.914,733,3.396,734,3.396,735,3.396,736,6.304,737,2.303,738,5.864,739,2.545,740,3.396,741,2.303,742,4.914,743,3.631,744,4.914,745,4.914,746,4.292,747,4.914,748,3.883,749,3.129,750,4.914,751,4.914,752,3.396,753,6.327,754,4.914,755,4.914,756,3.396,757,6.304,758,7.39,759,4.914,760,4.914,761,5.774,762,3.396,763,3.396,764,4.914,765,4.914,766,2.967,767,3.396,768,5.043,769,3.396,770,3.396,771,3.396,772,3.396,773,2.303,774,2.967,775,3.396,776,3.396,777,1.197,778,3.396,779,3.396,780,2.472,781,2.967,782,2.967,783,3.396,784,2.472]],["title/interfaces/CacheableOptions.html",[562,1.493,683,2.777]],["body/interfaces/CacheableOptions.html",[3,0.15,4,0.132,5,0.114,7,0.394,11,0.013,15,0.791,16,0.247,17,0.661,20,0.196,26,0.01,27,0.01,116,0.532,151,3.669,275,1.664,562,2.101,564,3.127,567,1.561,655,4.981,656,5.033,660,4.451,682,4.194,683,5.102,692,3.669,739,3.897,785,4.552,786,7.823,787,5.033,788,5.033]],["title/injectables/CloudinaryService.html",[120,0.362,789,2.777]],["body/injectables/CloudinaryService.html",[3,0.095,4,0.083,5,0.118,7,0.248,8,0.978,11,0.013,12,0.697,14,1.176,15,0.745,16,0.257,17,0.416,20,0.095,21,0.062,24,1.396,26,0.008,27,0.008,116,0.456,118,2.183,120,0.455,121,0.922,148,1.215,149,1.138,150,1.064,155,1.973,226,1.015,246,2.358,248,1.73,272,2.04,275,0.865,276,1.641,302,2.346,303,2.346,304,2.346,305,2.346,306,2.346,309,2.526,345,2.969,480,2.703,501,2.78,502,2.906,503,2.798,504,2.447,505,2.349,520,2.554,552,3.282,567,1.151,609,2.071,612,4.304,618,4.424,639,2.312,686,1.799,743,2.845,789,3.496,790,3.171,791,5.154,792,4.073,793,4.362,794,4.362,795,5.154,796,5.154,797,3.631,798,5.993,799,2.869,800,5.475,801,3.631,802,3.752,803,2.869,804,3.631,805,5.154,806,3.631,807,5.154,808,3.1,809,2.183,810,3.171,811,3.631,812,3.631,813,3.631,814,3.631,815,3.631,816,3.631,817,3.631,818,3.631,819,3.631,820,3.631,821,3.631,822,3.171,823,2.462,824,3.631,825,3.631,826,3.631,827,3.631,828,3.631,829,4.502,830,3.631,831,5.154,832,3.631,833,3.631,834,3.631,835,3.171,836,2.869,837,3.171,838,3.171,839,2.312,840,3.631,841,2.643,842,2.643,843,2.643,844,2.312,845,3.171,846,2.869,847,3.631]],["title/classes/CreateAppointmentDto.html",[21,0.07,153,2.777]],["body/classes/CreateAppointmentDto.html",[3,0.09,4,0.079,5,0.068,7,0.235,10,2.284,11,0.012,12,0.75,15,0.818,16,0.249,20,0.09,21,0.084,26,0.007,27,0.007,116,0.584,142,2.49,150,1.317,153,3.361,174,1.746,188,2.12,202,0.961,226,1.778,279,4.631,281,4.231,283,4.231,285,4.231,287,4.231,289,4.231,291,4.592,315,1.505,333,2.98,342,3.494,369,2.962,431,4.051,567,1.107,593,2.787,777,2.612,848,1.211,849,5.967,850,2.502,851,3.437,852,3.916,853,3.916,854,4.956,855,3.232,856,3.916,857,3.916,858,5.396,859,3.437,860,3.301,861,3.916,862,3.607,863,3.916,864,3.916,865,3.916,866,3.916,867,3.826,868,3.826,869,4.592,870,3.437,871,3.916,872,4.765,873,3.437,874,3.607,875,3.916,876,3.916,877,3.607,878,3.916,879,3.437,880,3.916,881,3.002,882,3.002,883,2.567,884,3.002,885,2.089,886,3.916,887,3.361,888,3.437,889,3.916,890,3.002,891,3.002,892,3.916,893,3.916,894,4.592,895,3.002,896,3.002,897,2.957,898,2.955,899,4.024,900,3.361,901,5.329,902,1.131,903,2.189,904,2.715,905,2.502,906,2.715]],["title/classes/CreateDocumentDto.html",[21,0.07,579,2.777]],["body/classes/CreateDocumentDto.html",[3,0.148,4,0.13,5,0.112,7,0.387,10,1.745,11,0.012,12,0.573,16,0.32,20,0.148,21,0.118,26,0.01,27,0.01,116,0.618,142,2.131,202,1.583,270,2.933,567,1.545,579,4.69,583,2.933,605,3.606,777,2.436,848,1.995,855,2.915,897,2.708,898,3.03,902,1.864,907,6.041,908,4.475,909,5.805,910,4.122,911,3.841,912,4.947,913,4.947,914,4.475,915,4.947,916,4.947]],["title/classes/CreateGuestAppointmentDto.html",[21,0.07,163,2.777]],["body/classes/CreateGuestAppointmentDto.html",[3,0.083,4,0.073,5,0.063,7,0.218,10,2.322,11,0.012,12,0.773,15,0.831,16,0.201,20,0.083,21,0.08,26,0.007,27,0.007,116,0.595,142,2.513,150,1.216,163,3.184,202,0.892,206,5.628,279,4.471,281,4.054,283,4.054,285,4.054,287,4.054,289,4.054,291,4.401,297,2.14,318,3.391,335,3.777,337,3.777,339,2.539,342,2.885,369,2.886,431,2.99,567,1.049,593,2.057,777,2.655,848,1.124,849,6.11,850,2.322,855,3.368,858,4.983,860,3.435,861,3.709,862,3.417,863,3.709,864,3.709,865,3.709,866,3.709,867,3.694,868,3.694,869,4.401,871,3.709,872,4.925,874,3.417,875,3.709,876,3.709,877,3.417,878,3.709,880,3.709,881,2.787,882,2.787,889,3.709,890,2.787,891,2.787,892,3.709,893,2.521,894,4.401,895,2.787,896,2.787,897,2.992,898,3.181,899,4.091,901,4.853,902,1.05,906,2.521,917,4.101,918,3.191,919,4.101,920,4.101,921,5.57,922,3.191,923,3.191,924,4.101,925,3.709,926,3.191,927,3.191,928,4.695,929,3.417,930,3.191,931,3.191,932,3.191,933,3.191,934,3.184,935,4.853,936,2.787]],["title/classes/CreatePaymentDto.html",[21,0.07,937,2.981]],["body/classes/CreatePaymentDto.html",[3,0.11,4,0.096,5,0.083,7,0.287,10,2.239,11,0.013,12,0.735,15,0.789,16,0.244,20,0.11,21,0.097,26,0.008,27,0.008,94,2.317,112,3.45,116,0.553,142,2.239,174,2.01,188,2.363,202,1.175,226,1.942,349,3.634,369,2.929,370,4.154,567,1.275,620,5.49,621,5.453,626,4.509,697,3.963,739,2.956,777,2.639,782,6.346,848,1.481,855,2.406,867,4.179,868,3.896,883,2.956,897,2.933,898,3.044,899,3.943,902,1.384,937,4.154,938,6.544,939,3.672,940,5.659,941,5.119,942,5.119,943,5.659,944,6.346,945,5.707,946,4.204,947,4.204,948,4.204,949,5.707,950,4.204,951,4.204,952,5.707,953,5.707,954,4.204,955,4.204,956,5.707,957,4.204,958,4.204,959,6.479,960,6.479,961,5.707,962,4.204,963,4.204,964,4.204,965,4.204]],["title/classes/CreatePaymentModeDto.html",[21,0.07,966,2.608]],["body/classes/CreatePaymentModeDto.html",[3,0.139,4,0.122,5,0.105,7,0.364,10,1.641,11,0.012,12,0.539,15,0.674,16,0.311,20,0.139,21,0.113,26,0.01,27,0.01,94,3.09,116,0.406,142,2.051,149,1.539,202,1.488,273,4.207,274,4.207,315,2.917,319,4.004,349,3.391,369,2.807,567,1.487,697,4.341,777,1.876,848,1.876,855,2.807,860,2.427,885,2.807,897,2.606,898,2.917,899,3.614,902,1.753,925,5.261,966,4.24,967,4.24,968,5.815,969,4.207,970,6.658,971,6.658,972,5.325,973,5.325,974,3.202,975,4.651,976,5.325]],["title/classes/CreateUserDto.html",[21,0.07,977,2.608]],["body/classes/CreateUserDto.html",[3,0.112,4,0.098,5,0.084,7,0.293,10,2.253,11,0.013,12,0.74,15,0.811,16,0.28,20,0.112,21,0.098,26,0.008,27,0.008,116,0.557,142,2.471,202,1.197,315,3.067,318,4.056,319,4.21,327,3.24,335,4.435,337,4.435,339,3.509,369,2.951,387,5.047,400,5.047,567,1.29,739,2.993,777,2.575,848,1.508,860,3.332,885,2.951,897,2.949,898,3.3,899,3.8,902,1.41,917,5.047,919,5.047,920,3.74,924,5.047,925,4.565,929,3.116,934,3.918,974,2.575,975,3.74,977,3.679,978,6.58,979,3.383,980,5.778,981,4.282,982,4.282,983,4.282,984,4.282,985,4.282,986,4.282,987,5.047,988,4.282,989,4.282,990,5.778,991,4.282,992,4.282,993,3.116,994,5.778,995,5.778,996,4.282,997,4.282,998,3.383]],["title/controllers/DocumentController.html",[0,1.547,597,2.777]],["body/controllers/DocumentController.html",[0,0.99,2,1.064,3,0.068,4,0.06,5,0.118,7,0.179,8,0.768,10,1.852,11,0.013,12,0.608,14,1.179,15,0.71,16,0.301,17,0.301,20,0.068,21,0.045,22,1.148,23,0.687,24,1.218,26,0.006,27,0.006,52,2.82,116,0.61,127,1.495,132,2.308,134,2.308,136,2.347,141,3.712,142,2.416,145,3.82,148,1.218,149,1.141,150,1.067,151,4.045,156,2.308,158,2.434,160,3.148,167,1.777,174,0.923,175,1.777,177,2.289,178,1.907,188,1.476,189,2.289,194,3.81,195,2.434,196,1.495,198,3.82,199,4.311,200,1.576,201,1.777,202,0.732,204,1.422,207,2.07,208,2.07,209,1.495,213,1.777,214,1.148,216,3.614,217,3.199,225,1.777,226,1.131,227,2.07,257,1.064,275,0.964,296,1.422,297,1.844,318,1.357,327,1.298,335,1.777,337,1.777,339,1.194,341,1.907,353,2.07,369,2.344,370,2.946,377,5.019,390,2.434,391,2.577,399,2.308,524,1.777,562,1.476,563,4.82,565,2.07,566,1.422,567,0.585,568,1.907,569,2.577,570,3.535,571,2.289,572,4.82,573,2.07,574,2.289,575,2.07,576,3.198,577,3.599,578,2.289,579,3.771,580,3.535,581,4.076,582,4.862,583,4.15,584,4.045,585,2.07,586,2.07,587,2.07,588,2.289,589,2.289,590,2.289,591,2.289,592,2.289,593,2.166,594,2.289,595,2.289,596,2.289,597,2.744,598,2.289,599,2.289,600,3.535,601,2.289,602,2.289,603,2.07,604,2.289,605,1.669,606,1.907,607,2.289,608,2.289,609,3.428,610,2.744,611,2.946,612,2.973,613,3.535,614,2.289,615,3.535,616,3.535,617,3.198,618,4.076,619,1.907,620,3.198,621,2.946,622,1.907,623,2.289,624,2.289,625,3.198,626,3.198,627,4.978,628,4.045,629,2.289,630,1.907,631,3.535,632,4.393,633,3.535,634,3.198,635,2.289,636,1.907,637,3.198,638,2.577,639,2.577,640,2.289,641,2.289,904,2.07,911,1.777,999,2.434,1000,2.62,1001,2.62,1002,2.62,1003,5.56,1004,2.62,1005,2.62,1006,2.07,1007,2.62,1008,2.62,1009,2.07,1010,2.62,1011,2.62,1012,2.62,1013,2.62,1014,2.62,1015,2.62,1016,2.62,1017,2.62,1018,2.62]],["title/modules/DocumentModule.html",[28,1.108,42,2.608]],["body/modules/DocumentModule.html",[2,2.665,3,0.136,4,0.119,5,0.103,11,0.013,16,0.34,17,0.597,20,0.136,21,0.088,26,0.01,27,0.01,28,1.946,30,2.038,31,2.038,32,2.28,33,2.28,34,2.113,35,3.03,36,2.28,42,5.341,48,4.778,52,4.532,56,2.799,58,2.616,63,2.875,64,2.038,65,2.28,69,3.116,74,2.28,87,2.194,99,4.546,573,4.113,597,4.875,1019,5.205,1020,5.205,1021,5.205,1022,6.564,1023,5.205]],["title/classes/DocumentResponseDto.html",[21,0.07,584,2.608]],["body/classes/DocumentResponseDto.html",[3,0.104,4,0.091,5,0.079,7,0.273,10,2.273,11,0.012,12,0.746,15,0.746,16,0.236,20,0.104,21,0.068,26,0.008,27,0.008,116,0.609,118,3.313,142,2.483,188,2.3,202,1.116,226,2.113,270,2.069,296,3.424,297,3.252,342,2.854,369,2.867,567,1.231,583,4.099,584,3.509,593,3.374,605,2.543,622,2.907,628,3.509,639,3.509,777,2.663,841,4.011,846,4.353,848,1.407,855,3.397,856,4.353,858,4.011,860,3.252,874,4.011,897,2.96,904,3.156,909,5.194,910,2.907,911,3.737,915,3.488,974,3.313,1024,6.603,1025,3.488,1026,5.51,1027,6.308,1028,3.994,1029,5.51,1030,3.994,1031,6.801,1032,6.801,1033,6.801,1034,6.801,1035,6.801,1036,3.994,1037,3.994,1038,5.51,1039,5.51,1040,3.994,1041,3.994,1042,5.51,1043,3.994,1044,3.994]],["title/injectables/DocumentService.html",[52,2.336,120,0.362]],["body/injectables/DocumentService.html",[3,0.081,4,0.071,5,0.134,7,0.213,8,0.874,11,0.013,12,0.686,14,1.271,15,0.8,16,0.291,17,0.357,20,0.081,21,0.053,23,1.438,24,1.375,26,0.007,27,0.007,52,2.627,56,2.137,58,2.311,60,3.299,74,1.362,87,1.311,114,1.98,116,0.597,120,0.407,121,0.789,132,2.627,134,2.627,136,2.187,148,1.375,149,1.288,150,1.205,155,1.024,188,2.212,226,1.896,246,2.435,248,1.33,249,1.773,251,2.099,254,3.209,257,2.228,263,2.933,267,2.933,270,1.611,272,1.868,275,1.832,276,2.236,296,2.5,297,2.765,302,1.059,303,1.059,304,1.059,305,1.059,306,1.059,307,2.263,308,2.228,309,1.311,531,2.457,583,3.355,584,4.319,585,2.457,586,2.457,593,1.362,609,3.129,612,3.299,618,3.124,627,3.353,628,1.98,632,2.457,634,2.457,639,1.98,808,3.648,809,2.77,841,3.353,857,2.457,909,5.11,999,2.77,1026,2.716,1045,2.716,1046,3.109,1047,4.606,1048,3.109,1049,3.109,1050,3.124,1051,3.109,1052,3.109,1053,4.606,1054,3.109,1055,3.109,1056,3.109,1057,3.109,1058,4.606,1059,3.639,1060,4.606,1061,3.109,1062,2.716,1063,3.109,1064,3.109,1065,3.109,1066,3.109,1067,3.109,1068,7.491,1069,3.109,1070,3.109,1071,6.066,1072,3.109,1073,3.109,1074,3.109,1075,3.109,1076,3.109,1077,3.109,1078,3.109,1079,3.109,1080,5.486,1081,4.606,1082,3.109]],["title/injectables/EvolutionApiService.html",[120,0.362,1083,2.777]],["body/injectables/EvolutionApiService.html",[3,0.073,4,0.064,5,0.055,7,0.192,8,0.811,11,0.013,12,0.708,14,0.838,15,0.797,16,0.266,17,0.322,20,0.073,21,0.048,23,2.066,24,1.257,26,0.006,27,0.006,57,3.094,71,3.29,72,1.456,76,1.603,80,2.72,116,0.533,120,0.377,121,0.714,148,1.047,149,0.98,150,0.917,155,1.406,184,1.906,194,2.318,217,2.629,246,2.012,248,1.233,272,2.683,275,1.768,276,1.837,308,1.734,309,2.431,314,3.502,325,2.046,326,2.221,333,3.106,339,3.094,345,1.393,385,4.131,404,2.456,458,2.568,476,2.318,480,2.179,545,3.502,547,3.109,550,1.79,555,2.046,557,4.198,567,0.954,603,2.221,686,1.393,739,2.675,743,1.335,748,2.221,773,2.896,780,2.046,839,1.79,844,1.79,885,2.431,999,1.691,1083,2.896,1084,6.257,1085,5.66,1086,2.456,1087,6.788,1088,6.531,1089,5.929,1090,6.531,1091,4.511,1092,2.896,1093,2.896,1094,2.046,1095,4.271,1096,3.109,1097,2.811,1098,3.109,1099,2.811,1100,2.811,1101,2.811,1102,2.811,1103,2.811,1104,2.046,1105,3.374,1106,2.456,1107,2.811,1108,2.811,1109,2.811,1110,2.456,1111,4.081,1112,4.511,1113,2.046,1114,2.221,1115,2.456,1116,2.456,1117,2.456,1118,2.221,1119,2.046,1120,1.79,1121,2.811,1122,2.811,1123,4.271,1124,4.511,1125,2.221,1126,2.456,1127,2.456,1128,2.456,1129,2.456,1130,2.221,1131,2.456,1132,3.73,1133,3.73,1134,2.456,1135,2.456,1136,3.374,1137,2.456,1138,4.081,1139,2.456,1140,3.374,1141,3.73,1142,2.436,1143,2.456,1144,3.374,1145,3.73,1146,2.456,1147,2.456,1148,2.811,1149,2.811,1150,2.811,1151,2.811,1152,2.811,1153,4.271,1154,2.811,1155,2.811,1156,2.811,1157,2.811,1158,2.811,1159,2.811,1160,2.811,1161,2.811,1162,2.811,1163,2.811,1164,2.811,1165,2.811,1166,2.221,1167,4.511,1168,2.456,1169,2.456,1170,2.456,1171,2.456,1172,2.456]],["title/injectables/ExceptionService.html",[53,2.462,120,0.362]],["body/injectables/ExceptionService.html",[3,0.1,4,0.088,5,0.076,7,0.262,8,1.017,11,0.013,12,0.756,14,1.429,15,0.826,16,0.264,17,0.44,20,0.1,21,0.091,22,1.68,23,1.005,24,1.425,26,0.008,27,0.008,53,3.221,58,2.2,116,0.569,120,0.473,121,0.974,148,1.515,149,1.419,150,1.328,155,2.315,248,1.107,272,2.102,275,1.735,302,1.306,303,1.306,304,1.306,305,1.306,306,1.306,308,1.557,369,1.617,497,6.768,501,1.449,737,2.601,784,2.791,823,2.601,842,2.791,843,2.791,885,2.602,902,1.263,1142,3.812,1173,3.35,1174,5.357,1175,5.357,1176,5.357,1177,5.357,1178,5.357,1179,5.357,1180,3.835,1181,3.835,1182,5.357,1183,5.357,1184,3.835,1185,3.835,1186,5.357,1187,3.835,1188,5.357,1189,3.835,1190,5.357,1191,3.835,1192,5.357,1193,6.53,1194,3.835,1195,3.633,1196,5.357,1197,3.835,1198,3.835,1199,3.835,1200,3.35,1201,3.35,1202,5.837,1203,3.835,1204,3.835,1205,3.35,1206,6.683,1207,3.835,1208,3.835,1209,3.835,1210,3.835,1211,3.835,1212,3.835,1213,3.835,1214,3.835,1215,3.835,1216,3.835,1217,3.835,1218,3.835,1219,3.835,1220,3.835]],["title/injectables/ExistsConstraint.html",[120,0.362,1221,3.236]],["body/injectables/ExistsConstraint.html",[3,0.105,4,0.092,5,0.079,7,0.275,8,1.052,11,0.013,12,0.691,14,1.087,15,0.792,16,0.292,17,0.462,20,0.145,21,0.108,24,1.384,26,0.008,27,0.008,56,2.405,74,1.765,112,1.913,116,0.483,120,0.49,121,1.023,148,1.123,149,1.052,150,0.984,246,2.103,248,1.829,251,2.888,272,2.158,275,1.509,276,1.283,302,2.158,303,2.158,304,2.158,305,2.158,306,2.158,315,1.765,323,3.759,342,2.087,480,2.094,501,2.794,502,3.003,503,2.187,504,2.632,505,2.526,520,1.996,524,2.732,559,2.871,567,1.238,660,2.565,686,1.996,689,2.932,699,3.53,743,2.632,902,2.086,1221,5.007,1222,3.183,1223,4.841,1224,4.034,1225,5.543,1226,4.841,1227,6.619,1228,4.028,1229,5.962,1230,4.841,1231,4.028,1232,4.841,1233,5.393,1234,4.841,1235,4.841,1236,3.519,1237,3.519,1238,3.519,1239,3.519,1240,3.519,1241,4.841,1242,5.962,1243,4.841,1244,3.519,1245,3.519,1246,4.034,1247,3.519,1248,4.034,1249,4.38,1250,4.841,1251,3.519,1252,3.519]],["title/interfaces/FileStorageService.html",[562,1.493,808,2.462]],["body/interfaces/FileStorageService.html",[3,0.135,4,0.118,5,0.141,7,0.353,8,1.241,11,0.012,12,0.725,14,1.406,15,0.843,20,0.187,26,0.01,27,0.01,116,0.546,118,3.109,148,1.453,149,1.36,150,1.273,226,1.445,275,1.231,480,2.996,562,2.383,564,2.806,609,2.949,612,4.77,792,5.164,793,5.217,794,5.217,799,4.085,800,5.774,802,4.757,803,4.085,808,3.93,809,3.109,1253,3.763,1254,5.164,1255,5.17,1256,4.516,1257,5.17,1258,4.757,1259,5.17,1260,3.763]],["title/interfaces/FileUploadResult.html",[562,1.493,809,2.462]],["body/interfaces/FileUploadResult.html",[3,0.15,4,0.131,5,0.137,7,0.392,11,0.012,15,0.847,20,0.196,26,0.01,27,0.01,116,0.531,118,4.696,226,2.183,275,1.365,480,2.836,562,2.541,564,3.112,567,1.556,609,3.27,612,4.19,793,4.173,794,4.173,800,5.072,802,4.173,808,3.448,809,4.19,1253,4.173,1254,4.53,1260,4.173]],["title/injectables/FirebaseAdminService.html",[54,2.777,120,0.362]],["body/injectables/FirebaseAdminService.html",[3,0.132,4,0.116,5,0.1,7,0.346,8,1.225,11,0.013,12,0.653,14,1.266,15,0.718,16,0.304,17,0.581,20,0.132,21,0.086,24,1.027,26,0.009,27,0.009,54,4.377,78,3.689,108,5.611,116,0.386,120,0.57,121,1.287,148,1.027,149,0.962,150,0.9,155,1.669,214,2.22,246,2.188,254,2.511,276,1.614,302,1.726,303,1.726,304,1.726,305,1.726,306,1.726,308,2.058,309,2.136,501,1.914,527,3.689,686,2.511,737,3.437,839,3.228,842,3.689,843,3.689,844,3.228,1261,6.202,1262,4.427,1263,6.894,1264,6.454,1265,5.068,1266,6.454,1267,5.068,1268,5.068,1269,5.637,1270,5.637,1271,6.454,1272,5.068,1273,5.068,1274,5.068,1275,5.068,1276,5.068,1277,5.068,1278,5.068,1279,5.068,1280,5.068,1281,5.068]],["title/injectables/JwtAuthGuard.html",[120,0.362,452,2.981]],["body/injectables/JwtAuthGuard.html",[3,0.112,4,0.099,5,0.085,7,0.294,8,1.101,11,0.013,12,0.587,14,0.845,16,0.323,17,0.494,20,0.112,21,0.073,23,1.719,24,1.176,26,0.008,27,0.008,58,2.539,87,1.815,112,2.044,116,0.442,120,0.512,121,1.093,148,1.176,149,1.101,150,1.03,155,1.909,211,2.92,214,2.873,246,2.021,248,1.674,272,2.233,275,1.671,276,1.371,302,1.975,303,1.975,304,1.975,305,1.975,306,1.975,308,2.355,440,3.809,447,3.693,448,2.742,449,3.134,452,4.221,453,5.182,456,3.134,474,4.582,480,2.477,494,4.774,501,2.65,502,2.849,503,2.337,504,2.044,505,1.962,519,4.221,520,2.133,559,2.23,566,3.148,572,3.134,666,6.735,669,5.544,672,3.402,688,3.761,690,3.761,695,3.402,857,3.402,1282,5.182,1283,3.402,1284,5.066,1285,5.066,1286,3.761,1287,4.305,1288,5.066,1289,4.305,1290,3.761,1291,2.92,1292,3.402,1293,3.134,1294,5.066,1295,4.305,1296,3.761,1297,4.305,1298,3.761,1299,4.305,1300,3.761]],["title/injectables/JwtStrategy.html",[120,0.362,441,2.777]],["body/injectables/JwtStrategy.html",[3,0.118,4,0.104,5,0.089,7,0.309,8,1.138,11,0.013,12,0.606,14,0.887,15,0.458,16,0.319,17,0.519,20,0.118,21,0.077,23,1.571,24,0.917,26,0.009,27,0.009,56,2.522,71,4.083,72,2.343,74,1.982,116,0.545,120,0.53,121,1.149,146,2.343,148,1.215,149,1.138,150,1.065,155,1.489,174,2.368,226,1.265,246,2.072,248,1.731,251,3.064,254,2.242,272,2.041,275,1.077,276,1.441,302,2.041,303,2.041,304,2.041,305,2.041,306,2.041,308,1.837,374,4.737,378,2.721,399,2.58,441,4.065,458,3.605,460,3.952,467,3.952,494,3.293,501,2.704,502,2.907,503,2.456,504,2.148,505,2.062,538,3.575,543,3.952,559,2.343,566,3.254,1094,3.293,1224,4.363,1282,5.312,1291,3.068,1293,3.293,1301,3.952,1302,5.995,1303,4.524,1304,5.995,1305,4.524,1306,4.524,1307,4.524,1308,4.524,1309,4.524,1310,3.575,1311,3.293,1312,4.524,1313,4.524,1314,4.524,1315,4.524,1316,4.524,1317,4.524,1318,3.068,1319,4.524,1320,3.952,1321,4.524,1322,3.952,1323,4.524]],["title/classes/LoginDto.html",[21,0.07,360,2.981]],["body/classes/LoginDto.html",[3,0.147,4,0.129,5,0.111,7,0.385,10,2.125,11,0.012,12,0.698,15,0.785,16,0.295,20,0.147,21,0.117,26,0.01,27,0.01,116,0.525,202,1.575,318,3.86,327,3.692,360,5.019,567,1.54,777,2.429,848,1.985,860,3.143,897,2.917,898,3.021,899,3.743,902,1.855,934,4.676,987,4.922,993,4.102,998,4.453,1324,4.922,1325,4.453,1326,5.636,1327,5.636,1328,5.636,1329,4.453]],["title/injectables/OptionalJwtAuthGuard.html",[120,0.362,1330,3.236]],["body/injectables/OptionalJwtAuthGuard.html",[3,0.121,4,0.106,5,0.091,7,0.317,8,1.156,11,0.013,12,0.616,14,0.909,16,0.291,17,0.531,20,0.121,21,0.079,22,2.029,23,1.214,24,1.379,26,0.009,27,0.009,112,2.891,116,0.464,120,0.538,121,1.176,148,1.234,149,1.156,150,1.081,214,2.98,246,2.096,248,1.337,275,1.62,276,1.475,302,2.073,303,2.073,304,2.073,305,2.073,306,2.073,378,4.633,440,3.922,447,2.95,448,2.95,449,3.372,474,4.811,480,2.569,501,2.729,502,2.934,503,2.515,504,2.2,505,2.111,519,4.432,520,2.295,559,2.4,566,3.305,572,3.372,610,3.142,669,5.709,672,3.66,695,3.66,1283,3.66,1284,5.319,1285,5.319,1286,4.046,1288,5.319,1290,4.046,1291,3.142,1293,3.372,1296,4.046,1298,4.046,1300,4.046,1330,4.811,1331,5.941,1332,5.941,1333,4.633,1334,4.633,1335,6.089,1336,4.046,1337,4.633,1338,4.046,1339,4.633,1340,3.372,1341,4.633]],["title/classes/ParamAppointmentIdDto.html",[21,0.07,138,2.981]],["body/classes/ParamAppointmentIdDto.html",[3,0.143,4,0.125,5,0.108,7,0.373,10,1.683,11,0.012,12,0.553,15,0.684,16,0.315,20,0.143,21,0.115,26,0.01,27,0.01,116,0.416,128,4.618,138,4.924,142,2.084,202,1.527,226,2.279,315,2.393,567,1.511,777,1.924,848,1.924,855,2.852,860,2.49,867,4.618,868,4.419,883,3.504,885,2.852,887,4.588,897,2.648,898,2.963,900,4.588,902,1.798,903,3.479,1342,5.345,1343,3.705,1344,5.463,1345,4.772,1346,5.463]],["title/classes/ParamDocumentIdDto.html",[21,0.07,582,2.777]],["body/classes/ParamDocumentIdDto.html",[3,0.144,4,0.126,5,0.109,7,0.377,10,1.699,11,0.012,12,0.558,15,0.688,16,0.316,20,0.144,21,0.116,26,0.01,27,0.01,116,0.42,142,2.097,202,1.541,226,2.283,315,2.416,567,1.52,582,4.615,583,4.232,777,1.943,848,1.943,855,2.868,860,2.513,883,3.525,885,2.868,887,4.615,897,2.664,898,2.981,900,4.615,902,1.816,903,3.512,1343,3.74,1347,5.376,1348,5.515,1349,4.817,1350,5.515]],["title/classes/ParamUserIdDto.html",[21,0.07,172,2.608]],["body/classes/ParamUserIdDto.html",[3,0.144,4,0.126,5,0.109,7,0.377,10,1.699,11,0.012,12,0.558,15,0.688,16,0.316,20,0.144,21,0.116,26,0.01,27,0.01,116,0.42,142,2.097,172,4.333,174,2.715,188,2.691,202,1.541,226,2.154,315,2.416,369,2.868,567,1.52,622,4.014,777,1.943,848,1.943,860,2.513,883,3.525,884,4.817,885,2.868,886,5.376,887,4.615,897,2.664,898,2.981,900,4.615,902,1.816,903,3.512,905,4.014,1342,5.376,1343,3.74,1345,4.817]],["title/classes/ParamUserIdDto-1.html",[21,0.058,172,2.172,749,2.172]],["body/classes/ParamUserIdDto-1.html",[3,0.145,4,0.127,5,0.109,7,0.379,10,1.707,11,0.012,12,0.561,15,0.69,16,0.317,20,0.145,21,0.116,26,0.01,27,0.01,116,0.422,142,2.103,172,4.346,174,2.719,188,2.697,202,1.549,226,2.157,315,2.427,567,1.524,777,1.952,848,1.952,860,2.525,883,3.535,885,2.877,886,5.843,887,4.628,897,2.672,898,2.99,900,4.628,902,1.824,903,3.529,905,4.033,1343,3.758,1347,5.392,1349,4.84,1351,5.541]],["title/controllers/PaymentController.html",[0,1.547,1352,2.981]],["body/controllers/PaymentController.html",[0,1.686,2,1.211,3,0.078,4,0.068,5,0.059,7,0.204,8,0.847,10,1.961,11,0.013,12,0.644,14,1.248,15,0.737,16,0.273,17,0.342,20,0.078,21,0.051,22,1.306,23,0.781,24,1.29,26,0.007,27,0.007,94,2.712,116,0.485,127,1.7,130,2.12,141,3.865,142,2.49,145,3.573,146,2.312,148,1.204,149,1.268,150,1.055,154,2.17,156,2.546,158,2.684,159,3.899,160,2.843,167,2.022,168,2.604,169,2.022,173,2.604,174,2.612,175,2.022,185,2.022,188,2.167,194,1.618,195,1.793,196,2.546,198,4.016,199,4.378,200,1.793,201,2.022,202,0.833,204,1.618,210,2.843,211,2.022,213,2.022,214,1.306,216,3.826,217,3.245,218,1.7,226,1.935,229,2.604,246,2.418,254,3.153,257,1.211,300,3.784,349,3.784,390,2.684,391,1.898,393,3.027,431,1.898,527,3.249,532,3.527,577,3.249,749,2.843,777,2.093,855,1.882,883,3.688,937,4.861,1352,3.249,1353,2.604,1354,3.899,1355,5.19,1356,3.899,1357,3.899,1358,4.464,1359,2.604,1360,3.899,1361,4.464,1362,3.899,1363,4.464,1364,2.981,1365,3.899,1366,2.981,1367,2.981,1368,2.981,1369,5.471,1370,2.981,1371,2.604,1372,2.981,1373,5.277,1374,4.695,1375,5.834,1376,4.016,1377,2.981,1378,3.527,1379,4.464,1380,4.464,1381,4.325,1382,5.942,1383,4.464,1384,4.464,1385,2.981,1386,2.604,1387,2.981,1388,2.981,1389,2.981,1390,3.527,1391,3.249,1392,4.464,1393,2.981,1394,2.981,1395,2.981,1396,4.228,1397,4.464,1398,3.408,1399,2.604,1400,2.981,1401,5.351,1402,2.981,1403,2.981,1404,2.981,1405,2.981,1406,2.981,1407,2.981,1408,2.981,1409,2.981,1410,2.981,1411,2.981,1412,4.464,1413,2.604,1414,2.981,1415,2.17,1416,2.604,1417,2.356,1418,2.981]],["title/controllers/PaymentModeController.html",[0,1.547,67,2.777]],["body/controllers/PaymentModeController.html",[0,1.302,2,1.4,3,0.09,4,0.079,5,0.068,7,0.236,8,0.943,10,2.081,11,0.013,12,0.683,14,1.325,15,0.765,16,0.289,17,0.395,20,0.09,21,0.059,22,1.51,23,0.904,24,1.369,26,0.007,27,0.007,55,3.501,67,3.368,94,3.384,95,4.77,96,2.724,116,0.485,127,1.966,130,3.025,132,3.633,134,2.833,136,3.206,141,4.027,142,2.364,148,1.291,149,1.209,150,1.131,154,2.509,155,1.635,156,2.833,157,2.833,167,2.338,175,3.948,178,2.509,192,3.163,194,2.696,195,2.073,196,2.833,198,4.23,199,4.23,200,2.073,201,2.338,202,0.963,204,1.871,209,1.966,213,2.338,214,1.51,216,4.061,217,3.077,218,2.833,219,2.724,225,2.338,226,2.113,263,2.195,267,2.195,300,3.163,568,2.509,569,3.707,630,2.509,636,2.509,638,4.057,697,4.584,966,4.479,967,4.479,999,2.987,1006,2.724,1009,2.724,1050,2.338,1318,3.368,1419,3.011,1420,6.144,1421,3.447,1422,3.447,1423,3.447,1424,3.447,1425,3.368,1426,3.447,1427,3.447,1428,3.447,1429,5.032,1430,3.447,1431,3.924,1432,3.447,1433,3.447,1434,3.447,1435,3.447,1436,3.011,1437,3.447,1438,3.447,1439,3.447,1440,3.011,1441,3.447]],["title/modules/PaymentModeModule.html",[28,1.108,43,2.777]],["body/modules/PaymentModeModule.html",[2,2.7,3,0.139,4,0.122,5,0.105,11,0.013,16,0.335,17,0.609,20,0.139,21,0.09,26,0.01,27,0.01,28,1.964,30,2.08,31,2.08,32,2.327,33,2.327,34,2.157,35,3.059,36,2.912,43,5.644,45,3.958,55,4.803,58,2.63,63,2.912,64,2.08,65,2.327,67,4.921,69,3.157,75,3.383,87,2.239,94,2.7,95,3.603,96,4.198,97,4.64,967,3.383,1442,5.312,1443,5.312,1444,5.312,1445,5.312]],["title/injectables/PaymentModeService.html",[55,2.462,120,0.362]],["body/injectables/PaymentModeService.html",[3,0.093,4,0.082,5,0.07,7,0.244,8,0.967,11,0.013,12,0.72,14,1.343,15,0.771,16,0.293,17,0.409,20,0.093,21,0.061,23,1.335,24,1.387,26,0.007,27,0.007,55,3.062,56,2.28,58,2.411,74,1.563,87,1.505,94,2.974,95,4.967,116,0.521,120,0.45,121,0.906,130,2.418,132,3.692,134,2.904,136,2.418,146,1.849,148,1.387,149,1.299,150,1.215,155,1.175,157,2.036,192,2.273,204,1.937,209,2.036,218,3.386,226,1.989,246,2.49,248,1.47,249,2.036,251,2.321,254,3.391,255,4.023,257,2.974,263,3.243,267,3.243,272,1.734,275,1.63,276,2.18,294,3.118,296,3.222,297,2.321,299,4.026,300,3.243,302,1.215,303,1.215,304,1.215,305,1.215,306,1.215,307,2.598,308,2.068,309,1.505,593,1.563,638,2.273,697,3.904,966,4.122,967,4.664,999,3.062,1050,3.453,1318,2.42,1420,3.118,1425,2.42,1429,4.39,1431,4.023,1446,3.118,1447,3.569,1448,3.569,1449,3.569,1450,3.569,1451,3.569,1452,3.569,1453,5.451,1454,3.569,1455,5.092,1456,3.569,1457,3.569,1458,3.569,1459,3.569,1460,5.092]],["title/modules/PaymentModule.html",[28,1.108,44,2.608]],["body/modules/PaymentModule.html",[2,2.543,3,0.126,4,0.111,5,0.095,11,0.013,16,0.34,17,0.555,20,0.126,21,0.082,26,0.009,27,0.009,28,1.88,30,1.893,31,1.893,32,2.118,33,2.118,34,1.963,35,2.927,36,3.042,44,5.357,45,3.862,58,2.566,63,2.743,64,1.893,65,2.118,69,2.973,75,3.079,87,2.038,94,2.543,114,3.079,1352,5.055,1376,2.908,1398,5.287,1399,4.224,1461,4.224,1462,4.224,1463,4.836,1464,4.224,1465,4.964,1466,4.964,1467,4.836,1468,4.224,1469,4.836,1470,4.224,1471,5.47,1472,4.224,1473,4.836]],["title/interfaces/PaymentProcessor.html",[562,1.493,1474,2.777]],["body/interfaces/PaymentProcessor.html",[3,0.126,4,0.11,5,0.095,7,0.33,8,1.187,11,0.012,12,0.742,14,1.44,15,0.858,20,0.126,26,0.009,27,0.009,116,0.559,148,1.488,149,1.393,150,1.383,480,3.036,562,1.76,564,2.619,739,4.035,942,6.155,1246,5.05,1258,3.512,1381,4.552,1474,4.241,1475,6.008,1476,4.215,1477,6.06,1478,5.482,1479,5.462,1480,5.462,1481,4.826,1482,6.938,1483,4.826,1484,5.799,1485,4.215,1486,6.06,1487,6.06,1488,5.05,1489,4.826,1490,5.462,1491,4.826,1492,5.462,1493,4.826]],["title/injectables/PaymentProcessorFactory.html",[120,0.362,1465,2.608]],["body/injectables/PaymentProcessorFactory.html",[3,0.139,4,0.122,5,0.105,7,0.364,8,1.264,11,0.013,12,0.674,14,1.045,15,0.735,16,0.311,17,0.611,20,0.139,21,0.091,22,2.332,23,1.396,24,1.079,26,0.01,27,0.01,94,2.703,116,0.507,120,0.588,121,1.352,148,1.35,149,1.264,150,1.182,155,1.753,248,1.537,273,4.207,274,4.207,308,2.162,345,2.638,1376,3.202,1465,4.24,1466,5.089,1468,4.651,1474,4.926,1475,5.74,1494,4.651,1495,6.658,1496,5.325,1497,5.325,1498,6.658,1499,5.325,1500,7.264,1501,4.651,1502,5.325,1503,5.325,1504,5.325,1505,5.325,1506,5.325]],["title/injectables/PaymentService.html",[120,0.362,1398,2.608]],["body/injectables/PaymentService.html",[0,0.798,3,0.055,4,0.048,5,0.042,7,0.144,8,0.648,11,0.013,12,0.616,14,1.062,15,0.663,16,0.248,17,0.242,20,0.055,21,0.036,23,1.126,24,1.174,26,0.005,27,0.005,56,1.738,58,2.006,74,0.926,78,3.127,87,0.891,94,2.66,112,3.384,116,0.412,120,0.302,121,0.537,128,3.482,146,1.095,148,1.097,149,1.028,150,0.962,155,1.124,169,3.927,174,1.738,183,1.67,185,4.302,188,2.112,217,2.248,226,1.513,246,2.255,248,0.986,249,1.205,251,1.556,254,2.683,257,1.386,269,1.67,270,1.095,272,1.463,275,1.81,276,2.302,293,1.846,295,2.983,296,2.939,297,2.468,298,4.576,299,3.927,300,2.736,308,2.793,319,1.271,330,1.67,349,3.448,390,1.271,393,1.433,399,1.205,431,1.346,527,1.538,532,1.67,556,1.67,617,3.394,621,1.538,625,1.67,627,1.538,697,1.205,749,1.346,784,2.485,836,1.67,852,1.67,853,1.67,855,1.439,867,1.271,868,1.271,877,2.485,940,1.846,941,3.898,943,5.058,1059,1.67,1062,4.309,1125,1.67,1136,1.67,1320,1.846,1322,1.846,1336,4.729,1338,1.846,1340,1.538,1354,2.983,1355,4.309,1356,2.983,1357,2.983,1359,2.983,1360,1.846,1369,3.394,1371,2.983,1373,2.698,1376,4.216,1378,1.67,1381,4.617,1386,2.983,1390,2.698,1391,2.485,1396,5.012,1398,2.174,1413,2.983,1415,2.485,1416,4.309,1417,3.898,1453,4.215,1465,3.141,1470,1.846,1471,2.983,1472,3.753,1478,1.67,1484,3.394,1488,3.127,1507,1.846,1508,3.415,1509,2.114,1510,2.114,1511,2.114,1512,2.114,1513,2.114,1514,3.415,1515,2.114,1516,3.415,1517,4.296,1518,3.753,1519,2.114,1520,3.415,1521,2.114,1522,1.846,1523,2.114,1524,4.296,1525,2.114,1526,3.415,1527,3.415,1528,3.415,1529,4.296,1530,4.296,1531,3.415,1532,2.114,1533,3.415,1534,2.114,1535,5.414,1536,2.114,1537,2.114,1538,2.114,1539,3.415,1540,2.114,1541,3.753,1542,2.114,1543,2.114,1544,2.114,1545,1.846,1546,2.114,1547,2.114,1548,1.846,1549,2.114,1550,1.846,1551,4.296,1552,2.114,1553,2.114,1554,2.114,1555,2.114,1556,2.114,1557,2.114,1558,2.114,1559,2.114,1560,2.114,1561,3.415,1562,1.846,1563,1.846,1564,2.114,1565,1.846,1566,1.846,1567,2.114,1568,2.114,1569,2.114,1570,2.698,1571,2.114,1572,2.114,1573,2.114,1574,2.114,1575,2.114,1576,2.114,1577,2.114,1578,2.114,1579,5.058,1580,6.343,1581,2.114,1582,1.846,1583,3.415,1584,2.114,1585,2.114,1586,3.415,1587,2.114,1588,3.415,1589,2.114,1590,2.114,1591,2.114,1592,2.114,1593,2.114,1594,2.114,1595,2.114,1596,2.114,1597,2.114,1598,2.114,1599,2.114,1600,2.114,1601,2.114,1602,2.114,1603,2.114,1604,2.114,1605,1.846,1606,1.67,1607,2.114,1608,2.114,1609,2.114,1610,2.114,1611,2.114,1612,2.114,1613,2.114,1614,2.114,1615,2.114,1616,2.114,1617,2.114]],["title/modules/PrismaModule.html",[28,1.108,45,2.029]],["body/modules/PrismaModule.html",[3,0.149,4,0.131,5,0.113,11,0.012,16,0.298,17,0.656,20,0.149,21,0.097,26,0.01,27,0.01,28,2.03,30,2.239,31,2.239,32,2.505,33,2.505,34,2.322,35,3.161,36,3.285,45,4.078,56,2.991,63,3.048,64,2.239,65,2.505,69,2.715,1618,4.995,1619,4.995,1620,5.719,1621,5.719,1622,5.719]],["title/injectables/PrismaService.html",[56,1.443,120,0.362]],["body/injectables/PrismaService.html",[3,0.124,4,0.109,5,0.094,7,0.326,8,1.178,11,0.013,12,0.698,14,1.217,16,0.313,17,0.547,20,0.124,21,0.081,26,0.009,27,0.009,56,2.185,120,0.548,121,1.21,246,2.392,248,1.991,270,2.469,276,1.975,302,2.487,303,2.487,304,2.487,305,2.487,306,2.487,309,2.615,501,2.759,502,2.966,566,3.367,619,3.469,686,2.361,839,3.035,844,3.035,1263,6.782,1293,3.469,1311,5.317,1415,4.515,1623,4.163,1624,6.897,1625,7.764,1626,4.766,1627,4.766,1628,4.766,1629,4.766,1630,4.163,1631,4.163,1632,4.766,1633,4.766,1634,4.766,1635,4.766,1636,4.163,1637,5.418,1638,4.163,1639,3.766,1640,4.766,1641,4.766,1642,4.163,1643,4.766,1644,4.766]],["title/modules/RedisModule.html",[28,1.108,46,2.462]],["body/modules/RedisModule.html",[3,0.149,4,0.131,5,0.113,11,0.012,16,0.298,17,0.656,20,0.149,21,0.097,26,0.01,27,0.01,28,2.03,30,2.239,31,2.239,32,2.505,33,2.505,34,2.322,35,3.161,36,3.285,46,4.95,57,3.87,63,3.048,64,2.239,65,2.505,69,2.715,1645,4.995,1646,5.719,1647,4.995,1648,5.719,1649,5.719]],["title/injectables/RedisService.html",[57,1.866,120,0.362]],["body/injectables/RedisService.html",[3,0.082,4,0.072,5,0.062,7,0.214,8,0.88,11,0.013,12,0.688,14,1.275,15,0.801,16,0.236,17,0.359,20,0.082,21,0.053,23,0.822,24,1.317,26,0.007,27,0.007,57,2.112,80,4.699,81,2.282,82,2.282,116,0.55,120,0.409,121,0.796,148,1.465,149,1.291,150,1.208,246,2.47,248,0.905,257,2.639,272,1.067,275,1.548,276,2.301,297,2.112,302,2.396,303,2.396,304,2.396,305,2.396,306,2.396,315,2.03,399,3.473,480,2.875,501,2.966,502,3.189,503,3.527,504,3.086,505,2.962,552,2.951,559,2.4,655,4.699,692,3.51,699,1.996,707,3.142,712,4.356,736,5.32,737,2.126,738,6.445,739,3.524,741,3.142,743,2.617,749,1.996,856,3.661,1258,2.282,1311,2.282,1375,4.047,1415,4.012,1417,3.661,1582,4.047,1650,2.738,1651,5.513,1652,4.815,1653,3.135,1654,3.135,1655,3.135,1656,3.135,1657,4.634,1658,4.634,1659,4.634,1660,4.634,1661,4.634,1662,4.634,1663,4.634,1664,3.135,1665,4.634,1666,3.135,1667,4.634,1668,3.135,1669,4.634,1670,3.135,1671,3.135,1672,2.738,1673,3.135,1674,3.135,1675,3.135,1676,5.513,1677,3.135,1678,4.634,1679,3.135,1680,3.135,1681,3.135,1682,3.135,1683,3.135]],["title/injectables/RefreshTokenService.html",[120,0.362,442,2.608]],["body/injectables/RefreshTokenService.html",[3,0.103,4,0.09,5,0.078,7,0.269,8,1.036,11,0.013,12,0.684,14,1.229,15,0.777,16,0.304,17,0.452,20,0.103,21,0.067,23,1.431,24,0.798,26,0.008,27,0.008,56,2.382,71,3.856,72,2.041,74,1.726,116,0.515,120,0.482,121,1,130,2.592,148,1.37,149,1.283,150,1.201,188,1.99,214,3.218,246,2.366,248,1.576,249,2.247,251,2.487,257,1.6,272,1.858,275,1.61,276,1.994,302,2.302,303,2.302,304,2.302,305,2.302,306,2.302,442,3.476,450,5.168,458,3.766,480,2.682,494,2.867,501,2.775,502,2.983,520,2.704,559,2.827,593,2.391,643,3.113,647,3.113,883,3.244,1140,4.312,1224,3.973,1311,3.973,1606,3.113,1684,6.202,1685,5.458,1686,3.939,1687,5.458,1688,3.939,1689,3.939,1690,3.939,1691,5.458,1692,5.458,1693,3.939,1694,3.939,1695,3.939,1696,3.113,1697,5.458,1698,3.939,1699,3.939,1700,3.939,1701,3.939,1702,5.458,1703,3.939,1704,3.939,1705,5.458,1706,3.939,1707,3.939]],["title/classes/RequestPasswordResetDto.html",[21,0.07,381,2.981]],["body/classes/RequestPasswordResetDto.html",[3,0.153,4,0.135,5,0.116,7,0.402,10,1.811,11,0.012,12,0.595,15,0.716,16,0.303,20,0.153,21,0.12,26,0.01,27,0.01,116,0.448,202,1.643,318,3.931,327,3.505,381,5.15,567,1.58,777,2.071,848,2.071,860,2.679,897,2.77,898,3.099,902,1.935,934,4.798,1325,4.645,1329,4.645,1708,6.18,1709,5.135,1710,5.879]],["title/classes/ResetPasswordDto.html",[21,0.07,395,2.981]],["body/classes/ResetPasswordDto.html",[3,0.139,4,0.122,5,0.105,7,0.365,10,2.241,11,0.012,12,0.736,15,0.809,16,0.286,20,0.139,21,0.113,26,0.01,27,0.01,116,0.554,202,1.492,318,3.767,385,3.767,395,4.853,490,6.352,567,1.489,777,2.562,848,1.88,860,3.314,897,2.982,898,3.185,899,3.947,902,1.757,934,4.522,993,3.885,998,4.217,1325,4.217,1329,4.217,1711,6.653,1712,4.662,1713,5.337,1714,5.337,1715,5.337,1716,5.337,1717,5.337,1718,4.662,1719,5.337]],["title/interfaces/Response.html",[562,1.493,1142,2.336]],["body/interfaces/Response.html",[3,0.144,4,0.126,5,0.108,7,0.376,11,0.012,15,0.855,20,0.144,26,0.01,27,0.01,116,0.614,150,1.465,257,3.126,562,2.006,564,2.986,567,1.518,739,3.819,741,5,885,3.245,1142,3.875,1195,5.221,1720,4.806,1721,6.725,1722,6.083,1723,6.083]],["title/injectables/ResponseService.html",[58,1.348,120,0.362]],["body/injectables/ResponseService.html",[3,0.076,4,0.067,5,0.058,7,0.2,8,0.835,11,0.013,12,0.746,14,1.448,15,0.828,16,0.189,17,0.335,20,0.076,21,0.05,24,1.496,26,0.006,27,0.006,58,1.449,116,0.578,120,0.389,121,0.743,141,1.588,145,1.759,148,1.539,149,1.401,150,1.31,155,2.429,156,1.668,157,2.51,158,2.646,174,1.03,188,1.605,226,0.818,257,2.563,309,1.855,345,3.589,364,3.203,369,1.233,390,2.646,391,2.802,510,2.311,610,2.984,611,3.203,628,3.748,741,4.801,743,3.439,823,3.991,855,2.481,872,1.984,885,3.462,929,2.129,1142,4.618,1195,3.588,1340,2.129,1374,4.65,1391,3.203,1570,2.311,1722,5.83,1723,5.83,1724,2.555,1725,3.844,1726,3.844,1727,3.844,1728,3.844,1729,3.844,1730,3.844,1731,3.844,1732,4.4,1733,2.925,1734,4.4,1735,2.925,1736,3.844,1737,3.844,1738,4.4,1739,2.925,1740,5.141,1741,3.844,1742,4.4,1743,2.925,1744,5.141,1745,4.4,1746,2.925,1747,3.844,1748,3.844,1749,4.4,1750,2.925,1751,4.4,1752,2.925,1753,4.4,1754,2.925,1755,3.844,1756,4.4,1757,2.925,1758,3.844,1759,4.4,1760,2.925,1761,3.844,1762,2.925,1763,7.379,1764,2.555,1765,3.844,1766,2.555,1767,3.844,1768,2.555,1769,3.844,1770,2.555,1771,2.555,1772,2.555,1773,2.555]],["title/modules/SmsModule.html",[28,1.108,47,2.336]],["body/modules/SmsModule.html",[3,0.133,4,0.116,5,0.1,11,0.013,16,0.344,17,0.582,20,0.133,21,0.086,26,0.009,27,0.009,28,1.924,30,1.988,31,1.988,32,2.225,33,2.225,34,2.063,35,2.996,36,2.831,47,4.713,57,3.599,59,5.109,63,2.831,64,1.988,65,2.225,69,2.412,70,4.704,72,2.631,76,2.897,302,1.729,303,1.729,304,1.729,305,1.729,306,1.729,465,4.013,466,4.013,498,4.526,501,1.919,502,2.063,520,2.517,1083,5.355,1085,4.013,1104,3.697,1111,4.013,1774,4.437,1775,4.437,1776,5.079,1777,5.079,1778,3.697,1779,5.079,1780,5.079]],["title/interfaces/SmsServiceInterface.html",[476,2.223,562,1.493]],["body/interfaces/SmsServiceInterface.html",[3,0.148,4,0.13,5,0.112,7,0.388,8,1.315,11,0.012,12,0.701,14,1.359,15,0.845,20,0.181,26,0.01,27,0.01,116,0.528,148,1.404,149,1.315,150,1.23,275,1.352,339,3.157,385,3.872,476,4.057,480,2.94,498,3.615,562,2.07,564,3.081,1092,4.697,1093,4.697,1096,5.042,1098,5.042,1781,4.486,1782,5.677,1783,5.677]],["title/injectables/StripeService.html",[120,0.362,1466,2.608]],["body/injectables/StripeService.html",[3,0.093,4,0.082,5,0.07,7,0.244,8,0.968,11,0.013,12,0.758,14,1.271,15,0.818,16,0.255,17,0.41,20,0.093,21,0.061,23,1.557,24,1.313,26,0.007,27,0.007,94,2.07,116,0.493,118,2.15,120,0.45,121,0.908,148,1.204,149,1.23,150,1.055,155,2.255,188,1.304,246,2.435,248,1.715,272,2.424,275,1.214,276,1.623,302,1.217,303,1.217,304,1.217,305,1.217,306,1.217,308,2.07,309,1.507,342,1.852,345,2.526,349,2.276,480,2.83,501,1.35,502,1.451,504,1.697,505,1.629,567,1.139,686,1.771,697,2.039,739,3.078,743,2.42,749,2.276,766,3.122,791,5.118,839,2.276,844,2.276,852,2.824,853,2.824,867,2.15,868,2.15,941,2.824,942,5.118,1166,2.824,1246,4.325,1376,4.505,1381,4.715,1396,2.824,1466,3.246,1474,3.457,1477,5.658,1478,4.695,1479,5.19,1480,5.19,1484,4.028,1485,3.122,1486,5.19,1487,5.658,1488,4.715,1490,3.122,1492,4.453,1501,3.122,1541,3.122,1548,3.122,1550,3.122,1562,3.122,1563,3.122,1565,3.122,1566,3.122,1605,3.122,1642,3.122,1784,3.122,1785,5.098,1786,3.575,1787,3.575,1788,3.575,1789,3.575,1790,5.098,1791,3.575,1792,3.575,1793,3.575,1794,3.575,1795,3.575,1796,3.575,1797,3.575,1798,3.575,1799,3.575,1800,3.575,1801,3.575,1802,3.575,1803,3.575,1804,3.575,1805,3.575,1806,3.575,1807,3.575,1808,3.575,1809,3.575,1810,3.575,1811,3.575,1812,3.575,1813,3.575,1814,3.575]],["title/injectables/TwilioService.html",[59,2.608,120,0.362]],["body/injectables/TwilioService.html",[3,0.114,4,0.1,5,0.086,7,0.298,8,1.111,11,0.013,12,0.744,14,1.148,15,0.821,16,0.302,17,0.5,20,0.114,21,0.074,22,1.911,23,1.143,24,1.186,26,0.009,27,0.009,59,3.726,71,4.023,72,2.26,116,0.56,120,0.517,121,1.107,148,1.338,149,1.253,150,1.172,155,1.436,246,2.334,248,1.259,254,2.899,272,2.579,275,1.572,308,1.771,309,2.466,314,2.958,339,3.215,385,3.654,458,3.518,476,3.176,548,3.81,567,1.307,686,2.161,935,5.216,1092,3.968,1093,3.968,1094,3.175,1096,4.259,1098,4.259,1104,3.175,1113,3.175,1114,3.447,1119,3.175,1120,2.778,1815,3.81,1816,7.574,1817,5.851,1818,4.362,1819,4.362,1820,5.11,1821,4.362,1822,5.216,1823,5.11,1824,3.81,1825,5.766,1826,3.81,1827,4.362,1828,3.81,1829,3.81,1830,4.362,1831,4.362,1832,3.81,1833,3.81,1834,5.851,1835,5.851,1836,4.362,1837,4.362,1838,4.362]],["title/injectables/UniqueConstraint.html",[120,0.362,1839,3.236]],["body/injectables/UniqueConstraint.html",[3,0.105,4,0.092,5,0.079,7,0.275,8,1.051,11,0.013,12,0.69,14,1.086,15,0.792,16,0.292,17,0.461,20,0.144,21,0.108,24,1.383,26,0.008,27,0.008,56,2.403,74,1.762,112,1.909,116,0.482,120,0.489,121,1.021,148,1.122,149,1.051,150,0.983,246,2.102,248,1.828,251,2.885,272,2.156,275,1.508,276,1.281,302,2.156,303,2.156,304,2.156,305,2.156,306,2.156,315,1.762,319,2.418,323,2.727,342,2.083,480,2.091,501,2.792,502,3.002,503,2.183,504,2.629,505,2.523,520,1.992,524,2.727,559,2.868,567,1.236,660,2.561,686,1.992,689,2.927,699,3.525,743,2.629,902,2.084,974,2.418,1223,4.836,1224,4.03,1226,4.836,1227,6.616,1229,5.958,1230,4.836,1232,4.836,1233,5.389,1234,4.836,1235,4.836,1236,3.513,1237,3.513,1238,3.513,1239,3.513,1240,3.513,1241,4.836,1242,5.958,1243,4.836,1244,3.513,1245,3.513,1246,4.03,1247,3.513,1248,4.03,1249,4.374,1250,4.836,1251,3.513,1252,3.513,1839,5.002,1840,3.177,1841,5.536,1842,4.021,1843,4.021]],["title/classes/UpdateAppointmentDto.html",[21,0.07,190,2.777]],["body/classes/UpdateAppointmentDto.html",[3,0.094,4,0.082,5,0.071,7,0.245,10,2.26,11,0.012,12,0.742,15,0.8,16,0.255,20,0.094,21,0.087,26,0.007,27,0.007,116,0.581,142,2.476,150,1.427,190,3.465,202,1.002,217,2.712,269,5.417,270,1.857,279,4.991,281,4.332,283,4.332,285,4.332,287,4.332,289,4.332,342,3.799,369,2.734,431,3.253,567,1.141,593,2.238,605,2.283,777,2.641,848,1.263,850,2.61,855,3.262,858,5.848,860,3.248,861,4.037,862,3.719,863,4.037,864,4.037,865,4.037,866,4.037,867,4.286,868,4.286,869,5.631,871,4.037,872,4.834,874,3.719,875,4.037,876,4.037,877,3.719,878,4.037,880,4.037,889,4.037,892,4.037,893,2.833,894,5.125,897,2.935,899,3.981,901,5.924,902,1.181,906,4.037,910,2.61,911,2.432,914,2.833,936,3.132,1844,6.549,1845,3.586,1846,3.586,1847,3.586,1848,5.109,1849,3.586,1850,3.586,1851,3.586,1852,3.586,1853,3.586,1854,3.586,1855,3.586]],["title/classes/UpdateDocumentDto.html",[21,0.07,581,2.777]],["body/classes/UpdateDocumentDto.html",[3,0.147,4,0.129,5,0.111,7,0.385,10,1.736,11,0.012,12,0.57,16,0.319,20,0.147,21,0.117,26,0.01,27,0.01,116,0.617,142,2.125,202,1.575,270,2.919,567,1.54,581,4.676,583,2.919,605,3.589,777,2.429,848,1.985,855,2.907,897,2.699,898,3.021,902,1.855,908,4.453,909,5.797,910,4.102,911,3.822,912,4.922,913,4.922,914,4.453,916,4.922,1856,6.023,1857,6.896,1858,5.636]],["title/classes/UpdatePaymentModeDto.html",[21,0.07,1429,2.777]],["body/classes/UpdatePaymentModeDto.html",[3,0.162,4,0.142,5,0.122,11,0.012,16,0.313,20,0.162,21,0.105,26,0.011,27,0.011,94,2.963,130,2.941,202,1.731,566,3.961,848,2.182,966,3.944,967,3.944,969,4.893,1429,4.949,1431,4.893,1859,5.409,1860,7.298,1861,5.409]],["title/classes/UpdateUserDto.html",[21,0.07,1862,2.777]],["body/classes/UpdateUserDto.html",[3,0.162,4,0.142,5,0.123,11,0.012,16,0.314,20,0.162,21,0.106,26,0.011,27,0.011,130,2.956,566,3.974,848,2.193,977,3.965,979,4.92,1861,5.438,1862,4.965,1863,5.438,1864,7.321,1865,6.226,1866,6.226,1867,4.92]],["title/modules/UploadModule.html",[28,1.108,48,2.462]],["body/modules/UploadModule.html",[3,0.143,4,0.125,5,0.108,11,0.012,16,0.29,17,0.626,20,0.143,21,0.093,26,0.01,27,0.01,28,1.989,30,2.139,31,2.139,32,2.393,33,2.393,34,2.218,35,3.098,36,3.219,48,4.903,60,4.903,63,2.963,64,2.139,65,2.393,302,1.86,303,1.86,304,1.86,305,1.86,306,1.86,465,4.316,466,4.316,468,5.345,501,2.063,502,2.218,520,2.707,789,5.529,1868,4.772,1869,4.772,1870,4.772,1871,6.765,1872,5.463]],["title/injectables/UploadService.html",[60,2.462,120,0.362]],["body/injectables/UploadService.html",[3,0.077,4,0.067,5,0.105,7,0.201,8,0.838,11,0.013,12,0.734,14,1.303,15,0.812,16,0.271,17,0.337,20,0.077,21,0.05,24,1.282,26,0.006,27,0.006,60,2.656,112,1.396,116,0.525,118,1.768,120,0.39,121,0.746,148,1.347,149,1.261,150,1.18,155,1.747,226,0.822,246,2.342,248,1.532,272,2.588,275,1.688,276,2.014,302,2.262,303,2.262,304,2.262,305,2.262,306,2.262,308,2.155,309,2.666,345,2.629,369,2.237,399,1.677,480,2.678,501,2.603,502,2.568,504,2.801,505,2.689,558,2.568,567,0.987,612,4.361,637,2.323,639,1.872,686,1.456,737,1.994,743,2.52,791,4.662,792,3.49,793,3.862,794,3.862,799,2.323,800,5.279,802,3.215,803,2.323,808,2.656,809,1.768,810,2.568,822,2.568,823,1.994,829,2.568,835,2.568,836,2.323,837,2.568,838,2.568,839,3.379,841,3.862,842,3.215,843,3.215,844,3.379,845,2.568,855,1.239,1166,2.323,1200,2.568,1201,2.568,1254,3.49,1256,5.525,1721,3.858,1873,2.568,1874,5.306,1875,4.417,1876,4.417,1877,4.417,1878,4.417,1879,2.94,1880,4.417,1881,2.94,1882,4.417,1883,2.94,1884,2.94,1885,4.417,1886,2.94,1887,2.568,1888,2.94,1889,5.9,1890,5.9,1891,2.94,1892,4.417,1893,2.94,1894,2.94,1895,2.94,1896,4.417,1897,2.94,1898,2.94,1899,2.568,1900,5.306,1901,4.417,1902,2.94,1903,2.94,1904,2.94,1905,2.94,1906,2.94,1907,2.94,1908,2.94,1909,5.306,1910,2.94,1911,2.94,1912,2.94,1913,2.94,1914,2.94,1915,4.417,1916,2.94,1917,2.94,1918,2.94,1919,2.94,1920,2.94,1921,2.94,1922,2.94,1923,2.94,1924,2.94,1925,2.94,1926,2.94]],["title/controllers/UserController.html",[0,1.547,1927,2.981]],["body/controllers/UserController.html",[0,1.157,2,1.244,3,0.08,4,0.07,5,0.06,7,0.209,8,0.865,10,2.153,11,0.013,12,0.707,14,1.371,15,0.776,16,0.299,17,0.351,20,0.08,21,0.052,22,1.342,23,0.803,24,1.416,26,0.007,27,0.007,61,2.74,116,0.547,117,3.98,127,1.748,130,2.86,132,3.435,134,2.599,136,2.86,141,4.162,142,2.41,146,2.36,148,1.368,149,1.281,150,1.198,154,2.23,155,1.5,156,2.599,157,2.599,167,2.078,174,2.845,175,3.689,178,2.23,192,1.951,194,2.473,195,1.843,196,2.599,198,4.317,199,4.317,200,1.843,202,0.856,204,1.663,209,1.748,210,2.901,211,2.078,216,4.201,217,3.184,218,1.748,219,2.421,225,2.078,226,2.117,263,1.951,267,1.951,339,2.745,343,4.384,344,3.6,393,3.09,545,3.09,546,5.225,550,2.901,551,3.6,568,2.23,569,3.464,577,3.959,630,2.23,636,2.23,638,3.835,977,4.571,999,2.74,1006,2.421,1009,2.421,1050,2.078,1092,3.09,1093,3.09,1318,3.09,1425,3.09,1436,2.676,1440,2.676,1862,5.062,1867,3.6,1927,3.316,1928,2.676,1929,3.064,1930,3.064,1931,3.064,1932,3.064,1933,3.064,1934,3.064,1935,3.064,1936,3.064,1937,3.064,1938,4.556,1939,4.556,1940,4.556,1941,3.064,1942,3.064,1943,3.064,1944,3.064,1945,4.085,1946,4.556,1947,4.556,1948,3.064,1949,2.676,1950,2.676,1951,2.676,1952,3.064,1953,3.064,1954,3.064,1955,3.064,1956,3.064,1957,3.064,1958,3.064,1959,3.064,1960,3.064,1961,3.064,1962,3.064,1963,3.064,1964,3.064]],["title/modules/UserModule.html",[28,1.108,49,2.462]],["body/modules/UserModule.html",[2,2.592,3,0.13,4,0.114,5,0.098,11,0.013,16,0.342,17,0.571,20,0.13,21,0.085,26,0.009,27,0.009,28,1.906,30,1.95,31,1.95,32,2.182,33,2.182,34,2.023,35,2.969,36,2.182,45,3.958,47,4.481,49,5.058,57,3.581,58,2.587,61,4.724,63,2.796,64,1.95,65,2.182,69,3.031,75,3.172,76,2.841,87,2.1,92,3.936,469,4.351,1927,5.127,1949,4.351,1965,4.981,1966,4.981,1967,4.981,1968,4.981,1969,4.981,1970,4.981,1971,4.981,1972,4.981]],["title/injectables/UserService.html",[61,2.462,120,0.362]],["body/injectables/UserService.html",[3,0.066,4,0.058,5,0.05,7,0.172,8,0.745,11,0.013,12,0.683,14,1.281,15,0.742,16,0.297,17,0.289,20,0.066,21,0.043,23,1.428,24,1.369,26,0.006,27,0.006,56,1.918,57,2.975,58,2.149,61,2.361,74,1.104,76,1.438,87,1.063,112,1.197,114,1.605,116,0.497,120,0.347,121,0.64,130,1.865,132,3.106,134,2.24,136,2.29,146,2.499,148,1.323,149,1.239,150,1.159,155,0.83,157,1.438,174,2.651,188,1.432,192,1.605,204,1.368,209,1.438,218,3.106,226,1.939,246,2.455,248,1.134,249,1.438,251,1.79,254,3.235,255,3.103,257,2.817,263,2.501,267,2.501,271,2.663,272,1.854,275,1.652,276,2.421,296,2.618,297,1.79,299,1.709,300,2.501,302,2.362,303,2.362,304,2.362,305,2.362,306,2.362,307,3.964,308,2.742,309,2.296,320,1.992,327,1.249,331,3.103,333,2.361,334,2.202,339,1.79,341,2.858,342,1.306,343,2.858,344,1.992,385,1.306,393,1.709,399,2.751,434,2.202,475,4.214,476,2.956,498,1.605,499,2.202,500,2.202,501,2.62,502,2.817,503,2.131,504,2.29,505,2.199,520,1.946,531,3.103,538,3.103,544,4.214,546,2.858,549,2.202,550,1.605,552,1.605,553,2.202,554,2.202,555,1.835,556,1.992,559,2.034,561,4.214,593,1.104,638,1.605,707,3.271,773,1.709,846,1.992,977,3.468,999,2.361,1050,2.663,1318,1.709,1425,1.709,1518,4.214,1545,3.43,1579,2.202,1862,3.693,1867,3.103,1945,3.693,1950,2.202,1951,2.202,1973,2.202,1974,3.927,1975,3.927,1976,2.521,1977,2.521,1978,2.521,1979,2.521,1980,2.521,1981,3.927,1982,2.521,1983,2.521,1984,3.927,1985,2.521,1986,3.927,1987,4.824,1988,4.824,1989,2.521,1990,2.521,1991,2.521,1992,2.521,1993,3.927,1994,3.927]],["title/modules/ValidationModule.html",[28,1.108,50,2.608]],["body/modules/ValidationModule.html",[3,0.131,4,0.115,5,0.099,11,0.013,16,0.33,17,0.575,20,0.131,21,0.085,26,0.009,27,0.009,28,1.912,30,1.963,31,1.963,32,2.196,33,2.196,34,2.036,35,2.978,36,3.095,50,5.379,53,5.018,56,2.772,58,2.747,62,5.314,63,2.808,64,1.963,65,2.196,74,2.196,468,5.064,1995,4.379,1996,5.014,1997,4.379,1998,5.014,1999,5.014,2000,4.379,2001,5.014]],["title/injectables/ValidationService.html",[62,2.608,120,0.362]],["body/injectables/ValidationService.html",[3,0.132,4,0.116,5,0.1,7,0.346,11,0.013,12,0.653,16,0.32,17,0.74,20,0.132,21,0.11,22,2.22,23,1.96,24,1.027,26,0.009,27,0.009,53,4.746,62,4.11,112,3.55,116,0.492,120,0.57,121,1.287,148,1.027,149,0.962,150,0.9,248,1.463,275,1.207,342,3.343,566,3.503,567,1.441,660,5.026,689,3.689,743,2.407,902,1.669,1193,6.202,1195,3.437,2000,4.427,2002,4.427,2003,7.101,2004,5.068,2005,6.454,2006,7.476,2007,4.427,2008,4.427,2009,4.427,2010,5.068,2011,5.068,2012,5.068,2013,5.068,2014,5.068,2015,5.068,2016,5.068,2017,5.068,2018,5.068]],["title/classes/VerifyOtpDto.html",[21,0.07,1945,2.777]],["body/classes/VerifyOtpDto.html",[3,0.126,4,0.11,5,0.095,7,0.329,10,1.924,11,0.012,12,0.632,15,0.742,16,0.297,20,0.126,21,0.106,26,0.009,27,0.009,116,0.476,142,1.924,174,2.584,188,2.528,202,1.346,226,2.05,315,2.109,323,4.235,333,4.569,339,2.846,385,4.106,546,5.338,550,3.977,567,1.395,777,2.584,848,1.696,885,3.091,897,2.713,899,3.762,902,1.585,903,3.066,905,3.505,944,5.455,993,4.546,1059,5.795,1522,4.206,1718,5.455,1945,4.235,2019,6.054,2020,4.206,2021,5.455,2022,6.245,2023,4.816,2024,5.455,2025,6.245,2026,4.816,2027,6.245,2028,6.245,2029,6.245,2030,6.245,2031,6.245,2032,4.816,2033,4.816,2034,4.816,2035,4.816]],["title/injectables/WhatsAppService.html",[120,0.362,1778,2.981]],["body/injectables/WhatsAppService.html",[3,0.089,4,0.078,5,0.067,7,0.233,8,0.935,11,0.013,12,0.709,14,0.966,15,0.784,16,0.288,17,0.391,20,0.089,21,0.058,23,1.762,24,1.362,26,0.007,27,0.007,57,3.292,71,3.614,72,1.765,76,1.943,80,3.136,116,0.512,120,0.435,121,0.865,148,1.172,149,1.098,150,1.027,155,1.121,184,2.31,194,2.673,217,2.636,246,2.159,248,1.422,272,2.639,275,1.72,276,1.842,308,1.383,309,2.076,314,3.922,325,2.479,326,2.692,333,3.478,339,3.063,345,1.688,385,4.203,458,2.961,476,2.673,480,2.393,545,3.34,547,2.479,555,2.479,557,4.209,567,1.1,686,1.688,739,2.551,743,1.617,748,2.692,773,3.34,780,2.479,885,2.076,935,4.569,1089,6.309,1091,5.051,1092,3.34,1093,3.34,1094,2.479,1096,3.584,1098,3.584,1104,2.479,1106,2.975,1110,2.975,1113,2.479,1114,2.692,1118,2.692,1119,2.479,1120,2.169,1124,4.301,1125,2.692,1126,2.975,1127,2.975,1128,2.975,1129,2.975,1130,2.692,1131,2.975,1132,4.301,1133,4.301,1134,2.975,1135,2.975,1136,3.891,1137,2.975,1138,4.569,1139,2.975,1140,3.891,1141,4.301,1142,1.943,1143,2.975,1144,2.692,1145,2.975,1146,2.975,1147,2.975,1167,5.051,1168,2.975,1169,2.975,1170,2.975,1171,2.975,1172,2.975,1778,3.584,1820,4.301,1822,3.891,1823,4.301,1824,2.975,1825,5.051,1826,2.975,1828,2.975,1829,2.975,1832,2.975,1833,2.975,2036,2.975,2037,4.924,2038,3.406,2039,3.406,2040,3.406,2041,3.406,2042,3.406,2043,3.406,2044,3.406]],["title/coverage.html",[2045,4.429]],["body/coverage.html",[0,2.502,1,1.91,5,0.052,6,2.291,11,0.013,18,1.671,21,0.134,26,0.006,27,0.006,34,1.065,51,1.578,52,1.496,53,1.578,54,1.779,55,1.578,56,0.924,57,1.196,58,0.864,59,1.671,60,1.578,61,1.578,62,1.671,67,1.779,68,1.779,94,1.645,95,2.747,108,2.073,116,0.2,120,0.725,122,2.291,126,2.291,128,1.578,138,1.91,153,1.779,155,0.864,163,1.779,172,2.579,174,1.427,190,1.779,206,1.91,210,1.671,245,2.291,315,1.149,327,1.3,351,1.91,352,2.291,360,1.91,378,2.436,381,1.91,395,1.91,405,1.671,440,1.424,441,1.779,442,1.671,448,1.671,450,1.91,452,1.91,453,2.073,470,2.291,476,1.424,498,1.671,562,2.495,563,1.91,565,3.2,579,1.779,581,1.779,582,1.779,583,1.359,584,1.671,597,1.779,642,2.291,643,3.2,652,1.779,653,4.751,654,3.909,657,1.91,659,2.073,662,2.073,663,2.291,679,2.073,682,1.91,683,1.779,692,1.671,699,3.151,725,1.779,729,2.291,773,1.779,784,6.268,785,3.909,789,1.779,790,2.291,808,1.578,809,1.578,849,3.2,850,3.601,907,2.291,908,3.2,937,1.91,938,2.291,939,2.291,966,1.671,967,3.543,968,2.291,969,3.2,974,1.578,977,1.671,978,2.291,979,3.2,1024,2.291,1025,2.291,1045,2.291,1083,1.779,1084,2.291,1085,2.073,1086,2.291,1142,1.496,1173,2.291,1221,2.073,1222,3.2,1253,3.601,1260,1.91,1261,2.291,1262,2.291,1282,3.2,1283,3.2,1292,2.073,1301,2.291,1324,2.291,1330,2.073,1331,2.291,1332,2.291,1342,3.2,1343,3.773,1347,3.2,1352,1.91,1353,2.291,1398,1.671,1419,2.291,1429,1.779,1446,2.291,1465,1.671,1466,1.671,1474,1.779,1475,3.2,1476,2.291,1494,2.291,1507,2.291,1623,2.291,1650,2.291,1684,2.291,1708,2.291,1709,2.291,1711,2.291,1712,2.291,1720,2.291,1724,2.291,1778,1.91,1781,3.2,1784,2.291,1815,2.291,1839,2.073,1840,3.2,1844,2.291,1856,2.291,1859,2.291,1862,1.779,1863,2.291,1873,2.291,1927,1.91,1928,2.291,1945,1.779,1973,2.291,2002,2.291,2019,2.291,2020,2.291,2036,2.291,2045,2.073,2046,2.291,2047,2.291,2048,2.623,2049,7.409,2050,6.013,2051,4.05,2052,2.623,2053,5.564,2054,6.842,2055,5.564,2056,7.409,2057,5.564,2058,2.623,2059,7.505,2060,7.842,2061,3.538,2062,2.291,2063,3.538,2064,6.013,2065,2.291,2066,4.05,2067,4.05,2068,2.291,2069,2.291,2070,2.291,2071,2.291,2072,2.291,2073,2.291,2074,2.291,2075,2.623,2076,2.623,2077,2.623]],["title/dependencies.html",[31,1.93,83,2.696]],["body/dependencies.html",[11,0.013,17,0.606,21,0.113,26,0.01,27,0.01,31,2.07,72,2.739,81,3.849,82,3.849,202,1.478,270,2.739,271,3.586,378,3.18,445,3.849,456,3.849,575,5.238,576,4.178,593,2.317,675,4.619,807,4.178,883,2.739,902,1.741,1105,4.178,1269,4.619,1270,4.619,1291,3.586,1310,4.178,1376,3.18,1488,3.849,1630,4.619,1631,4.619,1672,4.619,1696,4.178,1822,4.178,2078,5.288,2079,6.629,2080,5.288,2081,5.288,2082,5.288,2083,5.288,2084,7.592,2085,5.288,2086,5.288,2087,5.288,2088,5.288,2089,5.288,2090,5.288,2091,4.619,2092,5.288,2093,5.288,2094,5.288,2095,5.288,2096,5.288,2097,5.288,2098,5.288,2099,5.288,2100,5.288,2101,5.288,2102,5.288,2103,5.288,2104,5.288,2105,5.288,2106,5.288]],["title/miscellaneous/functions.html",[2107,2.483,2108,4.306]],["body/miscellaneous/functions.html",[7,0.399,11,0.011,15,0.843,26,0.01,27,0.01,34,3.072,116,0.536,148,1.427,149,1.337,150,1.251,315,3.085,974,4.235,1222,4.61,1233,6.588,1248,5.126,1249,6.207,1258,5.126,1840,4.61,2065,5.096,2107,4.247,2108,5.096,2109,5.834,2110,5.834,2111,5.834,2112,5.834,2113,5.834]],["title/index.html",[7,0.233,2114,3.412,2115,3.412]],["body/index.html",[0,1.53,2,0.788,4,0.073,5,0.092,8,0.368,11,0.012,21,0.054,26,0.005,27,0.005,28,1.096,29,1.316,30,1.586,31,1.835,35,0.818,40,1.235,41,1.235,42,1.235,44,1.235,45,0.961,46,1.167,47,1.107,48,1.167,49,1.167,50,1.235,64,2.301,69,0.921,70,1.412,78,3.412,80,3.908,81,4.467,82,1.412,94,2.102,128,1.915,130,1.923,136,0.921,142,0.598,149,0.769,155,1.543,160,2.028,169,3.179,174,2.071,184,1.316,185,2.16,196,2.953,202,0.542,214,2.688,217,0.884,251,2.359,257,1.904,270,1.005,271,1.316,298,2.516,309,0.818,314,1.316,318,1.005,319,1.167,325,2.948,327,3.505,343,2.318,354,1.533,356,1.412,378,3.822,385,3.045,445,1.412,505,2.137,545,2.16,547,1.412,550,1.235,551,1.533,557,3.412,562,0.708,583,2.098,587,3.201,593,1.395,606,1.412,609,1.816,618,2.747,655,1.235,697,1.816,707,2.16,731,1.695,741,1.316,746,1.695,757,1.695,768,1.695,774,1.695,777,2.361,781,5.134,807,4.091,862,2.318,883,1.005,885,1.342,902,0.639,974,1.167,1105,1.533,1111,5.295,1112,6.787,1113,3.768,1115,1.695,1116,1.695,1117,1.695,1118,1.533,1119,4.278,1120,3.297,1130,1.533,1138,5.168,1142,1.107,1144,2.516,1202,1.695,1205,3.538,1248,1.412,1291,1.316,1310,1.533,1362,2.782,1365,2.782,1369,1.533,1376,3.346,1378,3.704,1390,1.533,1425,1.316,1453,1.412,1636,1.695,1637,5.551,1638,2.782,1639,1.533,1652,1.695,1696,1.533,1887,4.095,1899,2.782,2007,2.782,2008,1.695,2009,1.695,2021,1.695,2024,1.695,2045,1.533,2046,5.854,2047,1.695,2091,1.695,2116,4.688,2117,5.564,2118,4.051,2119,3.185,2120,1.94,2121,5.177,2122,5.177,2123,3.185,2124,4.051,2125,3.185,2126,3.185,2127,4.051,2128,1.94,2129,1.94,2130,3.185,2131,3.185,2132,6.702,2133,4.688,2134,5.177,2135,3.185,2136,3.185,2137,3.185,2138,4.051,2139,5.564,2140,4.051,2141,6.842,2142,1.94,2143,1.94,2144,3.185,2145,1.94,2146,1.94,2147,3.185,2148,5.177,2149,1.94,2150,6.702,2151,4.051,2152,4.688,2153,1.94,2154,1.94,2155,4.688,2156,1.94,2157,1.94,2158,4.051,2159,1.94,2160,3.185,2161,4.051,2162,4.688,2163,1.94,2164,1.94,2165,4.051,2166,3.185,2167,1.94,2168,1.94,2169,1.94,2170,1.94,2171,1.94,2172,1.94,2173,1.94,2174,1.94,2175,5.878,2176,1.94,2177,1.94,2178,1.94,2179,1.94,2180,1.94,2181,1.94,2182,3.185,2183,3.185,2184,1.94,2185,3.185,2186,1.94,2187,3.185,2188,1.94,2189,3.185,2190,3.185,2191,1.94,2192,1.94,2193,3.185,2194,4.051,2195,3.185,2196,1.94,2197,1.94,2198,3.185,2199,4.051,2200,3.185,2201,1.94,2202,1.94,2203,1.94,2204,4.051,2205,1.94,2206,1.94,2207,1.94,2208,1.94,2209,1.94,2210,1.94,2211,1.94,2212,1.94,2213,1.94,2214,1.94,2215,1.94,2216,1.94,2217,1.94,2218,1.94,2219,1.94,2220,1.94,2221,3.185,2222,3.185,2223,1.94,2224,1.94,2225,4.688,2226,1.94,2227,1.94,2228,1.94,2229,1.94,2230,1.94,2231,1.94,2232,1.94,2233,3.185,2234,5.177,2235,3.185,2236,1.94,2237,1.94,2238,5.878,2239,1.94,2240,1.94,2241,3.185,2242,4.688,2243,3.185,2244,3.185,2245,1.94,2246,5.564,2247,1.94,2248,1.94,2249,1.94,2250,1.94,2251,4.051,2252,1.94,2253,3.185,2254,1.94,2255,1.94,2256,2.782,2257,1.94,2258,1.94,2259,1.94,2260,1.94,2261,7.474,2262,5.878,2263,1.94,2264,3.185,2265,1.94,2266,3.185,2267,1.94,2268,4.688,2269,1.94,2270,1.94,2271,1.94,2272,1.94,2273,1.94,2274,1.94,2275,1.94,2276,1.94,2277,3.185,2278,1.94,2279,4.051,2280,4.051,2281,1.94,2282,5.177,2283,1.94,2284,3.185,2285,1.94,2286,1.94,2287,3.185,2288,1.94,2289,1.94,2290,1.94,2291,4.051,2292,1.94,2293,4.051,2294,1.94,2295,1.94,2296,3.185,2297,1.94,2298,1.94,2299,1.94,2300,1.94,2301,1.94,2302,1.94,2303,1.94,2304,1.94,2305,1.94,2306,1.94,2307,1.94,2308,1.94,2309,1.94,2310,1.94,2311,1.94,2312,1.695,2313,1.94,2314,1.94,2315,1.94,2316,1.94,2317,1.94,2318,1.94,2319,1.94,2320,1.94,2321,1.94,2322,3.185,2323,1.94,2324,3.185,2325,1.94,2326,1.94,2327,1.94,2328,1.94,2329,1.94,2330,1.94,2331,4.051,2332,1.94,2333,1.94,2334,1.695,2335,1.94,2336,1.94,2337,1.94,2338,1.94,2339,3.185,2340,1.94,2341,1.94,2342,1.94,2343,1.94,2344,1.94,2345,1.94,2346,1.94,2347,1.94,2348,1.94,2349,1.94,2350,1.94,2351,1.94,2352,1.94,2353,1.94,2354,1.94]],["title/modules.html",[30,2.194]],["body/modules.html",[11,0.01,26,0.01,27,0.01,29,3.822,30,2.206,40,3.589,41,3.589,42,3.589,43,3.822,44,3.589,45,2.792,46,3.389,47,3.214,48,3.389,49,3.389,50,3.589,720,4.102,2312,7.429,2355,8.505,2356,8.505,2357,8.505]],["title/overview.html",[2358,4.896]],["body/overview.html",[2,1.206,11,0.013,18,3.4,26,0.007,27,0.007,28,0.804,29,5.793,30,1.163,31,1.163,32,1.301,33,1.301,34,1.206,35,1.252,36,1.301,37,2.594,38,2.594,39,2.594,40,4.717,41,5.144,42,4.789,43,4.932,44,4.952,45,3.726,46,4.158,47,4.289,48,4.158,49,4.676,50,4.952,51,4.277,52,3.382,53,4.277,54,3.621,55,3.566,56,2.609,57,3.376,58,2.56,59,3.776,60,4.158,61,3.566,62,4.529,63,1.95,64,1.163,65,1.301,121,0.754,239,2.594,240,2.594,330,2.346,405,4.404,436,2.594,438,2.594,439,2.594,440,2.898,441,3.621,442,3.4,564,1.612,720,5.033,721,2.594,723,2.594,724,2.594,725,4.69,789,3.621,848,1.046,1083,3.621,1398,4.404,1461,2.594,1462,2.594,1464,2.594,1465,3.4,1466,3.4,1606,2.346,1618,2.594,1619,2.594,1645,2.594,1647,2.594,1774,2.594,1775,2.594,1868,2.594,1869,2.594,1870,2.594,1995,2.594,1997,2.594,2358,2.594,2359,2.97,2360,2.97,2361,2.97]],["title/properties.html",[83,2.696,567,1.101]],["body/properties.html",[11,0.012,26,0.011,27,0.011,142,2.005,567,1.453,606,4.736,2362,6.506,2363,6.506,2364,6.506,2365,6.506]],["title/miscellaneous/variables.html",[1120,3.139,2107,2.483]],["body/miscellaneous/variables.html",[7,0.191,11,0.013,15,0.724,24,1.255,26,0.006,27,0.006,56,0.987,58,0.922,94,1.137,112,1.33,116,0.497,127,2.429,128,1.684,130,3.219,136,3.097,141,1.52,145,1.684,156,1.598,157,1.598,158,2.561,174,1.5,188,1.021,210,2.712,214,1.866,226,0.783,251,1.277,254,2.553,257,2.092,309,1.181,345,3.771,364,2.039,369,1.181,390,1.684,391,1.784,425,2.213,440,1.52,447,1.784,476,1.52,498,2.712,510,2.213,569,4.317,583,1.451,593,1.227,609,1.598,610,1.9,611,2.039,619,2.039,628,2.712,644,2.447,647,2.213,652,1.9,653,3.365,654,4.071,657,3.1,658,2.447,659,3.365,660,3.666,661,2.447,679,3.365,682,3.1,683,1.9,692,2.712,743,3.614,780,3.1,785,2.213,787,2.447,788,2.447,823,2.888,855,1.795,872,1.9,885,3.208,929,2.039,1120,1.784,1195,2.888,1253,2.039,1260,3.1,1292,3.365,1294,2.447,1340,2.039,1373,3.365,1374,3.365,1391,2.039,1453,2.039,1570,2.213,1639,2.213,1722,5.766,1723,5.766,1725,2.447,1726,2.447,1727,2.447,1728,2.447,1729,2.447,1730,2.447,1731,2.447,1736,2.447,1737,2.447,1740,3.72,1741,2.447,1744,3.72,1747,2.447,1748,2.447,1755,2.447,1758,2.447,1761,2.447,1764,2.447,1765,3.72,1766,2.447,1767,3.72,1768,2.447,1769,3.72,1770,2.447,1771,2.447,1772,2.447,1773,2.447,1781,2.213,2061,4.501,2062,3.72,2063,2.447,2068,2.447,2069,3.72,2070,3.72,2071,2.447,2072,3.72,2073,2.447,2074,3.72,2107,2.039,2256,2.447,2334,4.501,2366,5.757,2367,4.259,2368,2.801,2369,2.801,2370,2.801,2371,2.801,2372,4.259,2373,2.801,2374,2.801,2375,2.801,2376,4.259,2377,2.801,2378,2.801,2379,2.801,2380,2.801,2381,6.779,2382,8.464,2383,6.779,2384,6.522,2385,2.801,2386,2.801,2387,2.801,2388,2.801,2389,2.801,2390,2.801,2391,2.801,2392,2.801,2393,4.259,2394,7.298,2395,2.801,2396,6.522,2397,2.801,2398,2.801]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":784,"title":{},"body":{"injectables/CacheService.html":{},"injectables/ExceptionService.html":{},"injectables/PaymentService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2363,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":2093,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2103,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2092,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2060,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2051,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2075,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2052,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2049,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2056,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2055,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2057,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2054,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2064,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2053,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2050,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1038,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["01t00:00:00.000z",{"_index":1039,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["04",{"_index":853,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["06",{"_index":875,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["1",{"_index":749,"title":{"classes/ParamUserIdDto-1.html":{}},"body":{"injectables/CacheService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/StripeService.html":{}}}],["1.4.5",{"_index":2099,"title":{},"body":{"dependencies.html":{}}}],["1.6.7",{"_index":2089,"title":{},"body":{"dependencies.html":{}}}],["1/7",{"_index":2067,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":333,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"classes/CreateAppointmentDto.html":{},"injectables/EvolutionApiService.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{}}}],["100",{"_index":1605,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["1000",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["1024",{"_index":1060,"title":{},"body":{"injectables/DocumentService.html":{}}}],["10})@isstring()@length(4",{"_index":2023,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["11.0.0",{"_index":2082,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":2079,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":2083,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":2084,"title":{},"body":{"dependencies.html":{}}}],["11.1.5",{"_index":2086,"title":{},"body":{"dependencies.html":{}}}],["123",{"_index":861,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["123456",{"_index":1718,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/VerifyOtpDto.html":{}}}],["123456'})@isstring()@isnotempty",{"_index":1713,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["1234567890",{"_index":928,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["1234567890ef",{"_index":2035,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["1234567890ef'})@isstring()@exists('user",{"_index":2032,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["123e4567",{"_index":1031,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["12d3",{"_index":1033,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["13",{"_index":2359,"title":{},"body":{"overview.html":{}}}],["13.3.0",{"_index":2096,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":2066,"title":{},"body":{"coverage.html":{}}}],["14155552671",{"_index":990,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["15m",{"_index":464,"title":{},"body":{"modules/AuthModule.html":{}}}],["15t14:00:00",{"_index":876,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["18.1.0",{"_index":2105,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":2361,"title":{},"body":{"overview.html":{}}}],["1hgcm82633a123456",{"_index":892,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["2",{"_index":1569,"title":{},"body":{"injectables/PaymentService.html":{}}}],["2.0.2",{"_index":2078,"title":{},"body":{"dependencies.html":{}}}],["2.6.0",{"_index":2094,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":141,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["201",{"_index":156,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["2023",{"_index":874,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/DocumentResponseDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["2025",{"_index":852,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["29",{"_index":2360,"title":{},"body":{"overview.html":{}}}],["3",{"_index":1576,"title":{},"body":{"injectables/PaymentService.html":{}}}],["3.0.1",{"_index":2081,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":2058,"title":{},"body":{"coverage.html":{}}}],["30.basil",{"_index":1566,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["3600",{"_index":745,"title":{},"body":{"injectables/CacheService.html":{}}}],["4",{"_index":1059,"title":{},"body":{"injectables/DocumentService.html":{},"injectables/PaymentService.html":{},"classes/VerifyOtpDto.html":{}}}],["4.0.1",{"_index":2101,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":2080,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2095,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":158,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["401",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["403",{"_index":1764,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["404",{"_index":145,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["409",{"_index":1766,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["426614174000",{"_index":1035,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["5",{"_index":1592,"title":{},"body":{"injectables/PaymentService.html":{}}}],["5.1.1",{"_index":2090,"title":{},"body":{"dependencies.html":{}}}],["5.5.2",{"_index":2106,"title":{},"body":{"dependencies.html":{}}}],["5.6.1",{"_index":2097,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":1765,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":1125,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/PaymentService.html":{},"injectables/WhatsAppService.html":{}}}],["6.6.0",{"_index":2088,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":773,"title":{},"body":{"injectables/CacheService.html":{},"injectables/EvolutionApiService.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{}}}],["7",{"_index":1606,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/RefreshTokenService.html":{},"overview.html":{}}}],["7.8.1",{"_index":2104,"title":{},"body":{"dependencies.html":{}}}],["7890",{"_index":2030,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["8",{"_index":330,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/PaymentService.html":{},"overview.html":{}}}],["900000).tostring",{"_index":1129,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["a1b2c3d4",{"_index":2028,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["a456",{"_index":1034,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["abc123456",{"_index":880,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["abcd",{"_index":2031,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["ability",{"_index":2310,"title":{},"body":{"index.html":{}}}],["access",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/RedisService.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["accessible",{"_index":2008,"title":{},"body":{"injectables/ValidationService.html":{},"index.html":{}}}],["accessing",{"_index":2305,"title":{},"body":{"index.html":{}}}],["account",{"_index":2197,"title":{},"body":{"index.html":{}}}],["account.json",{"_index":1272,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["accountsid",{"_index":1823,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["accès",{"_index":1747,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["activ",{"_index":1772,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["activate",{"_index":1947,"title":{},"body":{"controllers/UserController.html":{}}}],["actually",{"_index":1143,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["add",{"_index":2334,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["adddays",{"_index":1695,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["adddays(new",{"_index":1701,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["adding",{"_index":2330,"title":{},"body":{"index.html":{}}}],["admin",{"_index":1269,"title":{},"body":{"injectables/FirebaseAdminService.html":{},"dependencies.html":{}}}],["admin.apps.length",{"_index":1275,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["admin.auth().verifyidtoken(idtoken",{"_index":1280,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["admin.credential.cert",{"_index":1278,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["admin.initializeapp",{"_index":1276,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["admin.service",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["admin.service.ts",{"_index":1262,"title":{},"body":{"injectables/FirebaseAdminService.html":{},"coverage.html":{}}}],["admin.service.ts:18",{"_index":1267,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["admin.service.ts:8",{"_index":1265,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["admin.serviceaccount",{"_index":1279,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["admin/firebase",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"injectables/FirebaseAdminService.html":{},"coverage.html":{}}}],["administrators",{"_index":2130,"title":{},"body":{"index.html":{}}}],["adresse",{"_index":980,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ajout",{"_index":1970,"title":{},"body":{"modules/UserModule.html":{}}}],["allows",{"_index":2125,"title":{},"body":{"index.html":{}}}],["allpayments",{"_index":1617,"title":{},"body":{"injectables/PaymentService.html":{}}}],["already",{"_index":319,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"injectables/PaymentService.html":{},"injectables/UniqueConstraint.html":{},"index.html":{}}}],["alreadyblacklisted",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["alternative",{"_index":2214,"title":{},"body":{"index.html":{}}}],["amount",{"_index":1484,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["amounts",{"_index":940,"title":{},"body":{"classes/CreatePaymentDto.html":{},"injectables/PaymentService.html":{}}}],["anti",{"_index":1577,"title":{},"body":{"injectables/PaymentService.html":{}}}],["api",{"_index":1112,"title":{},"body":{"injectables/EvolutionApiService.html":{},"index.html":{}}}],["api.service",{"_index":1780,"title":{},"body":{"modules/SmsModule.html":{}}}],["api.service.ts",{"_index":1086,"title":{},"body":{"injectables/EvolutionApiService.html":{},"coverage.html":{}}}],["api.service.ts:10",{"_index":1103,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["api.service.ts:11",{"_index":1100,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["api.service.ts:12",{"_index":1102,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["api.service.ts:13",{"_index":1095,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["api.service.ts:36",{"_index":1097,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["api.service.ts:9",{"_index":1101,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["api.service.ts:91",{"_index":1099,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["api/evolution",{"_index":1085,"title":{},"body":{"injectables/EvolutionApiService.html":{},"modules/SmsModule.html":{},"coverage.html":{}}}],["api_key",{"_index":814,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["api_secret",{"_index":816,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["apibearerauth",{"_index":201,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{}}}],["apibearerauth('access",{"_index":213,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{}}}],["apibody",{"_index":577,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/UserController.html":{}}}],["apiconsumes",{"_index":578,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["apiconsumes('multipart/form",{"_index":601,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["apikey",{"_index":1087,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["apioperation",{"_index":198,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["apiparam",{"_index":1401,"title":{},"body":{"controllers/PaymentController.html":{}}}],["apiproperty",{"_index":897,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"classes/DocumentResponseDto.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/VerifyOtpDto.html":{}}}],["apiproperty({description",{"_index":944,"title":{},"body":{"classes/CreatePaymentDto.html":{},"classes/VerifyOtpDto.html":{}}}],["apiproperty({enum",{"_index":910,"title":{},"body":{"classes/CreateDocumentDto.html":{},"classes/DocumentResponseDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{}}}],["apiproperty({example",{"_index":860,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"classes/DocumentResponseDto.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["apiresponse",{"_index":199,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":200,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["apitags('appointments",{"_index":212,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["apitags('auth",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('documents",{"_index":595,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["apitags('payment",{"_index":1432,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["apitags('payments",{"_index":1402,"title":{},"body":{"controllers/PaymentController.html":{}}}],["apitags('users",{"_index":1952,"title":{},"body":{"controllers/UserController.html":{}}}],["apiversion",{"_index":1565,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["app",{"_index":2267,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":455,"title":{},"body":{"modules/AuthModule.html":{}}}],["appbuilding",{"_index":2289,"title":{},"body":{"index.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appel",{"_index":1516,"title":{},"body":{"injectables/PaymentService.html":{}}}],["application",{"_index":2141,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":1160,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["applications",{"_index":2219,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["appointment",{"_index":128,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/ParamAppointmentIdDto.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["appointment'})@apiresponse({status",{"_index":140,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment.controller",{"_index":244,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["appointment.dto",{"_index":205,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["appointment.dto.ts",{"_index":850,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["appointment.dto.ts:10",{"_index":888,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:13",{"_index":926,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:14",{"_index":1852,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts:18",{"_index":896,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:19",{"_index":1851,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts:23",{"_index":891,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:24",{"_index":1846,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts:28",{"_index":882,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:29",{"_index":1847,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts:33",{"_index":933,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:34",{"_index":1845,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts:37",{"_index":873,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:38",{"_index":932,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:39",{"_index":1850,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts:43",{"_index":930,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:46",{"_index":879,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:48",{"_index":931,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:53",{"_index":927,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:54",{"_index":923,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:55",{"_index":870,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:63",{"_index":859,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:8",{"_index":922,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["appointment.dto.ts:9",{"_index":1853,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.id",{"_index":1529,"title":{},"body":{"injectables/PaymentService.html":{}}}],["appointment.service",{"_index":203,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{}}}],["appointment/appointment.controller",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["appointment/appointment.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["appointment/appointment.service",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["appointmentcontroller",{"_index":68,"title":{"controllers/AppointmentController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"coverage.html":{}}}],["appointmentid",{"_index":1528,"title":{},"body":{"injectables/PaymentService.html":{}}}],["appointmentids",{"_index":941,"title":{},"body":{"classes/CreatePaymentDto.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["appointmentmodule",{"_index":40,"title":{"modules/AppointmentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["appointments",{"_index":169,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"index.html":{}}}],["appointments'})@apiresponse({status",{"_index":168,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/PaymentController.html":{}}}],["appointments.length",{"_index":1524,"title":{},"body":{"injectables/PaymentService.html":{}}}],["appointments.map((appointment",{"_index":1612,"title":{},"body":{"injectables/PaymentService.html":{}}}],["appointmentservice",{"_index":51,"title":{"injectables/AppointmentService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"coverage.html":{},"overview.html":{}}}],["appointmentstatus",{"_index":269,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/PaymentService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["appointmentstatus.canceled",{"_index":312,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.confirmed",{"_index":1854,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointmentstatus.pending",{"_index":293,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/PaymentService.html":{}}}],["appropriate",{"_index":2271,"title":{},"body":{"index.html":{}}}],["approved",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["après",{"_index":1518,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["architecture",{"_index":2140,"title":{},"body":{"index.html":{}}}],["arg0",{"_index":1185,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["args",{"_index":1229,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["args.constraints",{"_index":1243,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["argument,@typescript",{"_index":1912,"title":{},"body":{"injectables/UploadService.html":{}}}],["arraynotempty",{"_index":960,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["assignment",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UserService.html":{}}}],["assignment,@typescript",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UserService.html":{}}}],["associ",{"_index":350,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["async",{"_index":246,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{}}}],["aucun",{"_index":348,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["auth",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["auth)'})@apiconsumes('multipart/form",{"_index":1015,"title":{},"body":{"controllers/DocumentController.html":{}}}],["auth.controller",{"_index":451,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":454,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":1283,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":1334,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{}}}],["auth.guard.ts:14",{"_index":1287,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:23",{"_index":1289,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:6",{"_index":1333,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{}}}],["auth.service",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":453,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth/login",{"_index":2176,"title":{},"body":{"index.html":{}}}],["auth/logout",{"_index":2179,"title":{},"body":{"index.html":{}}}],["auth/optional",{"_index":1332,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{}}}],["auth/refresh",{"_index":2181,"title":{},"body":{"index.html":{}}}],["auth/request",{"_index":2182,"title":{},"body":{"index.html":{}}}],["auth/reset",{"_index":2183,"title":{},"body":{"index.html":{}}}],["authcontroller",{"_index":351,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":2177,"title":{},"body":{"index.html":{}}}],["authenticated",{"_index":589,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["authenticatedrequest",{"_index":563,"title":{"interfaces/AuthenticatedRequest.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"coverage.html":{}}}],["authentication",{"_index":2132,"title":{},"body":{"index.html":{}}}],["authentifi",{"_index":1341,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{}}}],["authguard",{"_index":1290,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1284,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["authheader",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.replace('bearer",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":41,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2365,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":2133,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":405,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtoken",{"_index":1825,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["autoris",{"_index":1761,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["autoriser",{"_index":1335,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{}}}],["available",{"_index":1638,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["avec",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":276,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{}}}],["aws",{"_index":2344,"title":{},"body":{"index.html":{}}}],["axios",{"_index":1105,"title":{},"body":{"injectables/EvolutionApiService.html":{},"dependencies.html":{},"index.html":{}}}],["axios.post",{"_index":1156,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["backend",{"_index":2118,"title":{},"body":{"index.html":{}}}],["backups",{"_index":2349,"title":{},"body":{"index.html":{}}}],["bad",{"_index":159,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/PaymentController.html":{}}}],["badrequest",{"_index":1725,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["badrequest(errors",{"_index":1732,"title":{},"body":{"injectables/ResponseService.html":{}}}],["badrequestexception",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('token",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{}}}],["bancaire",{"_index":971,"title":{},"body":{"classes/CreatePaymentModeDto.html":{}}}],["base",{"_index":1556,"title":{},"body":{"injectables/PaymentService.html":{}}}],["based",{"_index":2144,"title":{},"body":{"index.html":{}}}],["basedir",{"_index":1874,"title":{},"body":{"injectables/UploadService.html":{}}}],["baseurl",{"_index":1088,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["batch",{"_index":1922,"title":{},"body":{"injectables/UploadService.html":{}}}],["bcrypt",{"_index":271,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["bcrypt.compare(password",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(data.password",{"_index":1986,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(newpassword",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(temppassword",{"_index":332,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bearer",{"_index":2317,"title":{},"body":{"index.html":{}}}],["being",{"_index":2211,"title":{},"body":{"index.html":{}}}],["best",{"_index":2145,"title":{},"body":{"index.html":{}}}],["between",{"_index":2024,"title":{},"body":{"classes/VerifyOtpDto.html":{},"index.html":{}}}],["binary",{"_index":604,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["blacklist",{"_index":447,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["blacklist(token",{"_index":646,"title":{},"body":{"injectables/BlacklistTokenService.html":{}}}],["blacklisted",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["blacklistedtoken",{"_index":2387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blacklistservice",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["blacklisttokenservice",{"_index":440,"title":{"injectables/BlacklistTokenService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":194,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/EvolutionApiService.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{},"injectables/WhatsAppService.html":{}}}],["body.type",{"_index":615,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["boolean",{"_index":590,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":2357,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2312,"title":{},"body":{"index.html":{},"modules.html":{}}}],["build",{"_index":2291,"title":{},"body":{"index.html":{}}}],["building",{"_index":2217,"title":{},"body":{"index.html":{}}}],["built",{"_index":2120,"title":{},"body":{"index.html":{}}}],["business",{"_index":2204,"title":{},"body":{"index.html":{}}}],["cache",{"_index":707,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["cache.service",{"_index":727,"title":{},"body":{"modules/CacheModule.html":{}}}],["cache_evict_key",{"_index":657,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cache_evict_metadata",{"_index":658,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"miscellaneous/variables.html":{}}}],["cache_prefix_key",{"_index":679,"title":{},"body":{"injectables/CacheInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cache_prefix_metadata",{"_index":2374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cacheable",{"_index":692,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/RedisService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cacheable(key",{"_index":1655,"title":{},"body":{"injectables/RedisService.html":{}}}],["cacheable.key",{"_index":708,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["cacheable.key(params",{"_index":709,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["cacheable.ttl",{"_index":717,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["cacheable_key",{"_index":682,"title":{},"body":{"injectables/CacheInterceptor.html":{},"interfaces/CacheableOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cacheable_metadata",{"_index":787,"title":{},"body":{"interfaces/CacheableOptions.html":{},"miscellaneous/variables.html":{}}}],["cacheableoptions",{"_index":683,"title":{"interfaces/CacheableOptions.html":{}},"body":{"injectables/CacheInterceptor.html":{},"interfaces/CacheableOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cached",{"_index":712,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/RedisService.html":{}}}],["cachedvalue",{"_index":761,"title":{},"body":{"injectables/CacheService.html":{}}}],["cacheevict",{"_index":659,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cacheevictoptions",{"_index":652,"title":{"interfaces/CacheEvictOptions.html":{}},"body":{"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cacheinterceptor",{"_index":662,"title":{"injectables/CacheInterceptor.html":{}},"body":{"injectables/CacheInterceptor.html":{},"coverage.html":{}}}],["cachemodule",{"_index":720,"title":{"modules/CacheModule.html":{}},"body":{"modules/CacheModule.html":{},"modules.html":{},"overview.html":{}}}],["cacheprefix",{"_index":2062,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cacheservice",{"_index":725,"title":{"injectables/CacheService.html":{}},"body":{"modules/CacheModule.html":{},"injectables/CacheService.html":{},"coverage.html":{},"overview.html":{}}}],["caching",{"_index":2138,"title":{},"body":{"index.html":{}}}],["calcul",{"_index":1599,"title":{},"body":{"injectables/PaymentService.html":{}}}],["call",{"_index":1311,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{}}}],["call,@typescript",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/RedisService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UserService.html":{}}}],["callback",{"_index":2389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callhandler",{"_index":670,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["canactivate",{"_index":1285,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["canactivate(context",{"_index":1288,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["cancel",{"_index":129,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["cancel(@param",{"_index":233,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["cancel(id",{"_index":252,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["cancel(params",{"_index":137,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["cancel_url",{"_index":1813,"title":{},"body":{"injectables/StripeService.html":{}}}],["canceled",{"_index":143,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["cancelurl",{"_index":1487,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["capabilities",{"_index":2153,"title":{},"body":{"index.html":{}}}],["card",{"_index":1804,"title":{},"body":{"injectables/StripeService.html":{}}}],["carte",{"_index":970,"title":{},"body":{"classes/CreatePaymentModeDto.html":{}}}],["case",{"_index":1504,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["catch",{"_index":844,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/EvolutionApiService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/PrismaService.html":{},"injectables/StripeService.html":{},"injectables/UploadService.html":{}}}],["ce",{"_index":1319,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["centimes",{"_index":1603,"title":{},"body":{"injectables/PaymentService.html":{}}}],["cette",{"_index":1598,"title":{},"body":{"injectables/PaymentService.html":{}}}],["chambres",{"_index":1890,"title":{},"body":{"injectables/UploadService.html":{}}}],["channel",{"_index":1837,"title":{},"body":{"injectables/TwilioService.html":{}}}],["characters",{"_index":2025,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["charge",{"_index":1477,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["charge(amount",{"_index":1481,"title":{},"body":{"interfaces/PaymentProcessor.html":{}}}],["check",{"_index":314,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["checkout",{"_index":1550,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["checkouturl",{"_index":1547,"title":{},"body":{"injectables/PaymentService.html":{}}}],["chemin",{"_index":1273,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["chmod",{"_index":2297,"title":{},"body":{"index.html":{}}}],["choose",{"_index":1473,"title":{},"body":{"modules/PaymentModule.html":{}}}],["chouée",{"_index":847,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["ci/cd",{"_index":2340,"title":{},"body":{"index.html":{}}}],["city",{"_index":864,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["class",{"_index":21,"title":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"classes/DocumentResponseDto.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":848,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"classes/DocumentResponseDto.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{},"overview.html":{}}}],["clear",{"_index":1170,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["client",{"_index":935,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["client'})@isemail()@isnotempty",{"_index":918,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["client'})@isstring()@isnotempty",{"_index":921,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{}}}],["cloud",{"_index":2227,"title":{},"body":{"index.html":{}}}],["cloud_name",{"_index":812,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary",{"_index":807,"title":{},"body":{"injectables/CloudinaryService.html":{},"dependencies.html":{},"index.html":{}}}],["cloudinary.config",{"_index":811,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary.uploader.destroy(fileid",{"_index":840,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary.uploader.upload_stream",{"_index":821,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary/cloudinary.service",{"_index":1872,"title":{},"body":{"modules/UploadModule.html":{}}}],["cloudinaryservice",{"_index":789,"title":{"injectables/CloudinaryService.html":{}},"body":{"injectables/CloudinaryService.html":{},"modules/UploadModule.html":{},"coverage.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule",{"_index":239,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_exports",{"_index":240,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_imports",{"_index":241,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["cluster_appointmentmodule_providers",{"_index":242,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["cluster_authmodule",{"_index":436,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":439,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":437,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":438,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cachemodule",{"_index":721,"title":{},"body":{"modules/CacheModule.html":{},"overview.html":{}}}],["cluster_cachemodule_exports",{"_index":723,"title":{},"body":{"modules/CacheModule.html":{},"overview.html":{}}}],["cluster_cachemodule_imports",{"_index":722,"title":{},"body":{"modules/CacheModule.html":{}}}],["cluster_cachemodule_providers",{"_index":724,"title":{},"body":{"modules/CacheModule.html":{},"overview.html":{}}}],["cluster_documentmodule",{"_index":1019,"title":{},"body":{"modules/DocumentModule.html":{}}}],["cluster_documentmodule_imports",{"_index":1020,"title":{},"body":{"modules/DocumentModule.html":{}}}],["cluster_documentmodule_providers",{"_index":1021,"title":{},"body":{"modules/DocumentModule.html":{}}}],["cluster_paymentmodemodule",{"_index":1442,"title":{},"body":{"modules/PaymentModeModule.html":{}}}],["cluster_paymentmodemodule_imports",{"_index":1443,"title":{},"body":{"modules/PaymentModeModule.html":{}}}],["cluster_paymentmodemodule_providers",{"_index":1444,"title":{},"body":{"modules/PaymentModeModule.html":{}}}],["cluster_paymentmodule",{"_index":1461,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_paymentmodule_exports",{"_index":1462,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_paymentmodule_imports",{"_index":1463,"title":{},"body":{"modules/PaymentModule.html":{}}}],["cluster_paymentmodule_providers",{"_index":1464,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1618,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1619,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1620,"title":{},"body":{"modules/PrismaModule.html":{}}}],["cluster_redismodule",{"_index":1645,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_exports",{"_index":1647,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_providers",{"_index":1646,"title":{},"body":{"modules/RedisModule.html":{}}}],["cluster_smsmodule",{"_index":1774,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_smsmodule_providers",{"_index":1775,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_uploadmodule",{"_index":1868,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_uploadmodule_exports",{"_index":1869,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_uploadmodule_providers",{"_index":1870,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1965,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_imports",{"_index":1966,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1967,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_validationmodule",{"_index":1995,"title":{},"body":{"modules/ValidationModule.html":{},"overview.html":{}}}],["cluster_validationmodule_exports",{"_index":1997,"title":{},"body":{"modules/ValidationModule.html":{},"overview.html":{}}}],["cluster_validationmodule_providers",{"_index":1996,"title":{},"body":{"modules/ValidationModule.html":{}}}],["code",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"classes/ResetPasswordDto.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/TwilioService.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["codeotp",{"_index":591,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["codes",{"_index":2191,"title":{},"body":{"index.html":{}}}],["command",{"_index":776,"title":{},"body":{"injectables/CacheService.html":{}}}],["commercial",{"_index":2215,"title":{},"body":{"index.html":{}}}],["common/decorator/public.decorator",{"_index":211,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/UserController.html":{}}}],["common/decorator/validators/exists.decorator",{"_index":903,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/VerifyOtpDto.html":{}}}],["common/decorator/validators/unique.decorator",{"_index":975,"title":{},"body":{"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{}}}],["communicate",{"_index":2129,"title":{},"body":{"index.html":{}}}],["communication",{"_index":2174,"title":{},"body":{"index.html":{}}}],["completed",{"_index":1575,"title":{},"body":{"injectables/PaymentService.html":{}}}],["compose",{"_index":2262,"title":{},"body":{"index.html":{}}}],["comprehensive",{"_index":2119,"title":{},"body":{"index.html":{}}}],["compte",{"_index":1767,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["concernés",{"_index":1593,"title":{},"body":{"injectables/PaymentService.html":{}}}],["config",{"_index":458,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["config.get('jwt_expires_in",{"_index":463,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_secret",{"_index":460,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SmsModule.html":{},"index.html":{}}}],["configmodule.forroot",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["configservice.get('redis_url",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":1113,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["configured",{"_index":2270,"title":{},"body":{"index.html":{}}}],["configuring",{"_index":2350,"title":{},"body":{"index.html":{}}}],["conflict",{"_index":1726,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["conflict(message",{"_index":1734,"title":{},"body":{"injectables/ResponseService.html":{}}}],["conflictexception",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflit",{"_index":1736,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["connect",{"_index":619,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["connect/disconnect",{"_index":2390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connected",{"_index":1636,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["connection",{"_index":2277,"title":{},"body":{"index.html":{}}}],["connecté'})@apiresponse({status",{"_index":1001,"title":{},"body":{"controllers/DocumentController.html":{}}}],["connexion",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["consider",{"_index":2338,"title":{},"body":{"index.html":{}}}],["consists",{"_index":2265,"title":{},"body":{"index.html":{}}}],["console.error",{"_index":1641,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.error('error",{"_index":1164,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["console.error(`model",{"_index":1245,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["console.log",{"_index":1415,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{}}}],["console.log('toutes",{"_index":1555,"title":{},"body":{"injectables/PaymentService.html":{}}}],["console.log('transaction",{"_index":1553,"title":{},"body":{"injectables/PaymentService.html":{}}}],["console.log(`cannot",{"_index":1137,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["const",{"_index":275,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{}}}],["constraints",{"_index":1252,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["constructor",{"_index":248,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{}}}],["constructor(@injectredis",{"_index":1673,"title":{},"body":{"injectables/RedisService.html":{}}}],["constructor(blacklistservice",{"_index":1286,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["constructor(config",{"_index":1094,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/JwtStrategy.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["constructor(exceptionservice",{"_index":2004,"title":{},"body":{"injectables/ValidationService.html":{}}}],["constructor(httpresponseservice",{"_index":1180,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["constructor(prisma",{"_index":249,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/DocumentService.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/RefreshTokenService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/CacheService.html":{},"controllers/DocumentController.html":{},"injectables/ExceptionService.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/TwilioService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["constructor(redis",{"_index":1653,"title":{},"body":{"injectables/RedisService.html":{}}}],["constructor(redisservice",{"_index":733,"title":{},"body":{"injectables/CacheService.html":{}}}],["constructor(reflector",{"_index":665,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["constructor(stripeservice",{"_index":1496,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["contain",{"_index":2321,"title":{},"body":{"index.html":{}}}],["container",{"_index":2268,"title":{},"body":{"index.html":{}}}],["containerized",{"_index":2260,"title":{},"body":{"index.html":{}}}],["containers",{"_index":2282,"title":{},"body":{"index.html":{}}}],["content",{"_index":1159,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["context",{"_index":672,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["context.getclass",{"_index":690,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":688,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/JwtAuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":695,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentService.html":{},"controllers/UserController.html":{},"coverage.html":{},"index.html":{}}}],["controller('appointment",{"_index":215,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["controller('auth",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('documents",{"_index":596,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["controller('payment",{"_index":1433,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["controller('payments",{"_index":1403,"title":{},"body":{"controllers/PaymentController.html":{}}}],["controller('users",{"_index":1953,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["copy",{"_index":2274,"title":{},"body":{"index.html":{}}}],["core",{"_index":2147,"title":{},"body":{"index.html":{}}}],["correct",{"_index":1274,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["correctly",{"_index":2296,"title":{},"body":{"index.html":{}}}],["cost",{"_index":2212,"title":{},"body":{"index.html":{}}}],["count",{"_index":2385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coverage",{"_index":2045,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cp",{"_index":2243,"title":{},"body":{"index.html":{}}}],["create",{"_index":130,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"injectables/RefreshTokenService.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":219,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["create(createappointmentdto",{"_index":152,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["create(createpaymentmodedto",{"_index":1421,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["create(createuserdto",{"_index":1929,"title":{},"body":{"controllers/UserController.html":{}}}],["create(data",{"_index":255,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/PaymentModeService.html":{},"injectables/UserService.html":{}}}],["create(userid",{"_index":1687,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["createappointmentdto",{"_index":153,"title":{"classes/CreateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"coverage.html":{}}}],["createasguest",{"_index":131,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["createasguest(@body",{"_index":222,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["createasguest(createguestappointmentdto",{"_index":162,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["createasguest(data",{"_index":258,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["createbadrequestexception",{"_index":1174,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createbadrequestexception(arg0",{"_index":1183,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createcheckoutsession",{"_index":1478,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["createcheckoutsession(amount",{"_index":1485,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["created",{"_index":157,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["created(data",{"_index":1738,"title":{},"body":{"injectables/ResponseService.html":{}}}],["createdat",{"_index":592,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["createdocumentdto",{"_index":579,"title":{"classes/CreateDocumentDto.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/CreateDocumentDto.html":{},"controllers/DocumentController.html":{},"coverage.html":{}}}],["createforbiddenexception",{"_index":1175,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createforbiddenexception(message",{"_index":1186,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createguestappointmentdto",{"_index":163,"title":{"classes/CreateGuestAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateGuestAppointmentDto.html":{},"coverage.html":{}}}],["createinternalserverexception",{"_index":1176,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createinternalserverexception(message",{"_index":1188,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createmockblacklisttokenservice",{"_index":2070,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createmockprismaservice",{"_index":2072,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createmockresponseservice",{"_index":2074,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createnotfoundexception",{"_index":1177,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createnotfoundexception(message",{"_index":1190,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createpayment",{"_index":1354,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["createpayment(@body",{"_index":1404,"title":{},"body":{"controllers/PaymentController.html":{}}}],["createpayment(dto",{"_index":1359,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["createpaymentdto",{"_index":937,"title":{"classes/CreatePaymentDto.html":{}},"body":{"classes/CreatePaymentDto.html":{},"controllers/PaymentController.html":{},"coverage.html":{}}}],["createpaymentmodedto",{"_index":966,"title":{"classes/CreatePaymentModeDto.html":{}},"body":{"classes/CreatePaymentModeDto.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"classes/UpdatePaymentModeDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":977,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createvalidationexception",{"_index":1178,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createvalidationexception(errors",{"_index":1192,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["credential",{"_index":1277,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["credentials",{"_index":2278,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":1896,"title":{},"body":{"injectables/UploadService.html":{}}}],["crypto.randombytes(8).tostring('hex",{"_index":1906,"title":{},"body":{"injectables/UploadService.html":{}}}],["création",{"_index":1579,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["créée",{"_index":1741,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["cs_",{"_index":1383,"title":{},"body":{"controllers/PaymentController.html":{}}}],["cs_test_xxx",{"_index":1384,"title":{},"body":{"controllers/PaymentController.html":{}}}],["currency",{"_index":942,"title":{},"body":{"classes/CreatePaymentDto.html":{},"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["current",{"_index":2180,"title":{},"body":{"index.html":{}}}],["custom",{"_index":588,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["d'identification",{"_index":893,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["d'une",{"_index":1659,"title":{},"body":{"injectables/RedisService.html":{}}}],["d'upload",{"_index":1040,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["d\\'identification",{"_index":936,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["d\\'upload",{"_index":1044,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["dans",{"_index":1322,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PaymentService.html":{}}}],["data",{"_index":257,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data')@apibody({schema",{"_index":1016,"title":{},"body":{"controllers/DocumentController.html":{}}}],["data.'})@apibody({type",{"_index":1366,"title":{},"body":{"controllers/PaymentController.html":{}}}],["data.email",{"_index":321,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.firstname",{"_index":336,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.issuesdate",{"_index":292,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.lastname",{"_index":338,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.location",{"_index":290,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.password",{"_index":1994,"title":{},"body":{"injectables/UserService.html":{}}}],["data.phone",{"_index":340,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.receiptnumber",{"_index":286,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.scheduledat",{"_index":288,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.titlenumber",{"_index":284,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.userid",{"_index":278,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.vehicletype",{"_index":282,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["data.vin",{"_index":280,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["database",{"_index":1637,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["database_connection",{"_index":1260,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":593,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/PaymentModeService.html":{},"injectables/RefreshTokenService.html":{},"classes/UpdateAppointmentDto.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":1763,"title":{},"body":{"injectables/ResponseService.html":{}}}],["date(decoded.exp",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{}}}],["days",{"_index":1697,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["de",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/ExceptionService.html":{},"classes/ParamUserIdDto.html":{},"injectables/ResponseService.html":{},"classes/UpdateAppointmentDto.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["debug",{"_index":1416,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["decoded",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoded.exp",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorator/cache/cache",{"_index":680,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["decorator/cache/cacheable.decorator",{"_index":684,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"controllers/UserController.html":{},"classes/VerifyOtpDto.html":{}}}],["default",{"_index":345,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/EvolutionApiService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/UploadService.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":1223,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["defaultmessage(args",{"_index":1226,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["define",{"_index":587,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"index.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{}}}],["defines",{"_index":2173,"title":{},"body":{"index.html":{}}}],["del",{"_index":1651,"title":{},"body":{"injectables/RedisService.html":{}}}],["del(key",{"_index":1663,"title":{},"body":{"injectables/RedisService.html":{}}}],["delete",{"_index":569,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/CacheService.html":{},"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["delete(':id",{"_index":636,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":1006,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["delete)'})@apiresponse({status",{"_index":1007,"title":{},"body":{"controllers/DocumentController.html":{}}}],["deleted",{"_index":1318,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deletedat",{"_index":296,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["deletefile",{"_index":792,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"injectables/UploadService.html":{}}}],["deletefile(fileid",{"_index":796,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["deletefile(filepath",{"_index":1254,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["deletemany",{"_index":2386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delivered",{"_index":1147,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["demander",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{}}}],["demonstration",{"_index":769,"title":{},"body":{"injectables/CacheService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployed",{"_index":2335,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":2264,"title":{},"body":{"index.html":{}}}],["deployments",{"_index":2337,"title":{},"body":{"index.html":{}}}],["des",{"_index":621,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/CreatePaymentDto.html":{},"controllers/DocumentController.html":{},"injectables/PaymentService.html":{}}}],["description",{"_index":142,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/CacheService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"controllers/UserController.html":{},"classes/VerifyOtpDto.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":1378,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"index.html":{}}}],["dev/test",{"_index":1413,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["dev/test)'})@apiresponse({status",{"_index":1393,"title":{},"body":{"controllers/PaymentController.html":{}}}],["development",{"_index":2251,"title":{},"body":{"index.html":{}}}],["devise",{"_index":952,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["devrunning",{"_index":2250,"title":{},"body":{"index.html":{}}}],["digit",{"_index":1126,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["directly",{"_index":2311,"title":{},"body":{"index.html":{}}}],["dirpath",{"_index":1900,"title":{},"body":{"injectables/UploadService.html":{}}}],["disable",{"_index":303,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["disabled",{"_index":1795,"title":{},"body":{"injectables/StripeService.html":{}}}],["disconnect",{"_index":2392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doc",{"_index":1068,"title":{},"body":{"injectables/DocumentService.html":{}}}],["docker",{"_index":2261,"title":{},"body":{"index.html":{}}}],["docker.sh",{"_index":2299,"title":{},"body":{"index.html":{}}}],["docker.shthis",{"_index":2301,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1073,"title":{},"body":{"injectables/DocumentService.html":{}}}],["docs.map(doc",{"_index":1076,"title":{},"body":{"injectables/DocumentService.html":{}}}],["document",{"_index":583,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/CreateDocumentDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"classes/ParamDocumentIdDto.html":{},"classes/UpdateDocumentDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["document'})@apibody({type",{"_index":1010,"title":{},"body":{"controllers/DocumentController.html":{}}}],["document'})@isnotempty()@isenum(documenttype",{"_index":912,"title":{},"body":{"classes/CreateDocumentDto.html":{},"classes/UpdateDocumentDto.html":{}}}],["document'})@isuuid()@isnotempty()@exists('document",{"_index":1348,"title":{},"body":{"classes/ParamDocumentIdDto.html":{}}}],["document.controller",{"_index":1023,"title":{},"body":{"modules/DocumentModule.html":{}}}],["document.dto",{"_index":580,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["document.dto.ts",{"_index":908,"title":{},"body":{"classes/CreateDocumentDto.html":{},"classes/UpdateDocumentDto.html":{},"coverage.html":{}}}],["document.dto.ts:13",{"_index":913,"title":{},"body":{"classes/CreateDocumentDto.html":{},"classes/UpdateDocumentDto.html":{}}}],["document.service",{"_index":573,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{}}}],["document/document.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["document/document.service",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":2046,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentcontroller",{"_index":597,"title":{"controllers/DocumentController.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"coverage.html":{}}}],["documented",{"_index":2302,"title":{},"body":{"index.html":{}}}],["documentmodule",{"_index":42,"title":{"modules/DocumentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DocumentModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["documentresponsedto",{"_index":584,"title":{"classes/DocumentResponseDto.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"coverage.html":{}}}],["documentresponsedto})@apiresponse({status",{"_index":1003,"title":{},"body":{"controllers/DocumentController.html":{}}}],["documents",{"_index":618,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"index.html":{}}}],["documentservice",{"_index":52,"title":{"injectables/DocumentService.html":{}},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"coverage.html":{},"overview.html":{}}}],["documenttype",{"_index":909,"title":{},"body":{"classes/CreateDocumentDto.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"classes/UpdateDocumentDto.html":{}}}],["documenttype.license",{"_index":915,"title":{},"body":{"classes/CreateDocumentDto.html":{},"classes/DocumentResponseDto.html":{}}}],["documenttype.receipt",{"_index":1858,"title":{},"body":{"classes/UpdateDocumentDto.html":{}}}],["doe",{"_index":924,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{}}}],["doesn't",{"_index":322,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/CacheService.html":{}}}],["double",{"_index":1578,"title":{},"body":{"injectables/PaymentService.html":{}}}],["downto",{"_index":2285,"title":{},"body":{"index.html":{}}}],["dthis",{"_index":2281,"title":{},"body":{"index.html":{}}}],["dto",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto.amounts.length",{"_index":1521,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dto.amounts.reduce((sum",{"_index":1536,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dto.appointmentids",{"_index":1523,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dto.appointmentids.join",{"_index":1546,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dto.appointmentids.length",{"_index":1520,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dto.code",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["dto.currency",{"_index":1542,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dto.newpassword",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto.paymentmodeid",{"_index":1533,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dto.userid",{"_index":1545,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["dto/create",{"_index":204,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/document",{"_index":585,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{}}}],["dto/login.dto",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/param",{"_index":207,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["dto/request",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/reset",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":209,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/verify",{"_index":1950,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos",{"_index":2324,"title":{},"body":{"index.html":{}}}],["du",{"_index":855,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/DocumentResponseDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["déconnexion",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["déj",{"_index":1582,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/RedisService.html":{}}}],["détect",{"_index":1737,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["d’un",{"_index":633,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["d’émission",{"_index":854,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["e.g",{"_index":760,"title":{},"body":{"injectables/CacheService.html":{}}}],["e2e",{"_index":2257,"title":{},"body":{"index.html":{}}}],["e5f6",{"_index":2029,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["e89b",{"_index":1032,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["each",{"_index":782,"title":{},"body":{"injectables/CacheService.html":{},"classes/CreatePaymentDto.html":{}}}],["easy",{"_index":2263,"title":{},"body":{"index.html":{}}}],["ecs",{"_index":2345,"title":{},"body":{"index.html":{}}}],["edit",{"_index":2245,"title":{},"body":{"index.html":{}}}],["effective",{"_index":2213,"title":{},"body":{"index.html":{}}}],["effectu",{"_index":1572,"title":{},"body":{"injectables/PaymentService.html":{}}}],["email",{"_index":318,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/LoginDto.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"index.html":{}}}],["email'})@isemail()@isnotempty()@unique('user",{"_index":981,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["emitter",{"_index":1631,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{}}}],["en",{"_index":1417,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{}}}],["enableimplicitconversion",{"_index":2014,"title":{},"body":{"injectables/ValidationService.html":{}}}],["encore",{"_index":1771,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":2175,"title":{},"body":{"index.html":{}}}],["enregistr",{"_index":1583,"title":{},"body":{"injectables/PaymentService.html":{}}}],["ensuredirectory",{"_index":1875,"title":{},"body":{"injectables/UploadService.html":{}}}],["ensuredirectory(folder",{"_index":1880,"title":{},"body":{"injectables/UploadService.html":{}}}],["entities",{"_index":2165,"title":{},"body":{"index.html":{}}}],["enum",{"_index":605,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/CreateDocumentDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{}}}],["env",{"_index":2199,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":2244,"title":{},"body":{"index.html":{}}}],["environment",{"_index":1119,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["envoy",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["envrequired",{"_index":2276,"title":{},"body":{"index.html":{}}}],["erreur",{"_index":823,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":309,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/PaymentModeService.html":{},"injectables/PrismaService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["error('charge",{"_index":1794,"title":{},"body":{"injectables/StripeService.html":{}}}],["error('firebase",{"_index":1281,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["error('method",{"_index":1200,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{}}}],["error('stripe_secret_key",{"_index":1563,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["error('upload",{"_index":827,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["error(`failed",{"_index":1165,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["error(`unsupported",{"_index":1506,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["error(message",{"_index":1742,"title":{},"body":{"injectables/ResponseService.html":{}}}],["error.children",{"_index":1218,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["error.children.length",{"_index":1219,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["error.constraints",{"_index":1215,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["error.message",{"_index":1166,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/StripeService.html":{},"injectables/UploadService.html":{}}}],["error.nmessage",{"_index":1923,"title":{},"body":{"injectables/UploadService.html":{}}}],["errors",{"_index":1195,"title":{},"body":{"injectables/ExceptionService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["errors.foreach((error",{"_index":1214,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["eslint",{"_index":302,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["eslint/no",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["eslint/only",{"_index":307,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/DocumentService.html":{},"injectables/PaymentModeService.html":{},"injectables/UserService.html":{}}}],["est",{"_index":1571,"title":{},"body":{"injectables/PaymentService.html":{}}}],["et",{"_index":877,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"injectables/PaymentService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["etc",{"_index":2209,"title":{},"body":{"index.html":{}}}],["eventemitter2",{"_index":1629,"title":{},"body":{"injectables/PrismaService.html":{}}}],["evict",{"_index":694,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["evict.decorator",{"_index":685,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["evict.decorator.ts",{"_index":654,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["evict.key",{"_index":698,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["evict.key(params",{"_index":700,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["evolution",{"_index":1111,"title":{},"body":{"injectables/EvolutionApiService.html":{},"modules/SmsModule.html":{},"index.html":{}}}],["evolution_api_base_url",{"_index":1115,"title":{},"body":{"injectables/EvolutionApiService.html":{},"index.html":{}}}],["evolution_api_instance",{"_index":1116,"title":{},"body":{"injectables/EvolutionApiService.html":{},"index.html":{}}}],["evolution_api_key",{"_index":1117,"title":{},"body":{"injectables/EvolutionApiService.html":{},"index.html":{}}}],["evolutionapiservice",{"_index":1083,"title":{"injectables/EvolutionApiService.html":{}},"body":{"injectables/EvolutionApiService.html":{},"modules/SmsModule.html":{},"coverage.html":{},"overview.html":{}}}],["ex",{"_index":1679,"title":{},"body":{"injectables/RedisService.html":{}}}],["example",{"_index":777,"title":{},"body":{"injectables/CacheService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"classes/DocumentResponseDto.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["exception/exception.service",{"_index":2000,"title":{},"body":{"modules/ValidationModule.html":{},"injectables/ValidationService.html":{}}}],["exception/response/response.service",{"_index":2001,"title":{},"body":{"modules/ValidationModule.html":{}}}],["exceptionfactory",{"_index":2015,"title":{},"body":{"injectables/ValidationService.html":{}}}],["exceptionservice",{"_index":53,"title":{"injectables/ExceptionService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ExceptionService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"overview.html":{}}}],["executable",{"_index":2300,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":669,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["exist",{"_index":323,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/CacheService.html":{},"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{},"classes/VerifyOtpDto.html":{}}}],["existent",{"_index":1594,"title":{},"body":{"injectables/PaymentService.html":{}}}],["existing",{"_index":1705,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["existing.expiresat",{"_index":1707,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["existing.revoked",{"_index":1706,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["existingappointment",{"_index":316,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingpayment",{"_index":1526,"title":{},"body":{"injectables/PaymentService.html":{}}}],["exists",{"_index":315,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExistsConstraint.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"injectables/RedisService.html":{},"injectables/UniqueConstraint.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["exists('appointment",{"_index":1346,"title":{},"body":{"classes/ParamAppointmentIdDto.html":{}}}],["exists('document",{"_index":1350,"title":{},"body":{"classes/ParamDocumentIdDto.html":{}}}],["exists('user",{"_index":905,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/VerifyOtpDto.html":{}}}],["exists(key",{"_index":1665,"title":{},"body":{"injectables/RedisService.html":{}}}],["exists(model",{"_index":2112,"title":{},"body":{"miscellaneous/functions.html":{}}}],["existsconstraint",{"_index":1221,"title":{"injectables/ExistsConstraint.html":{}},"body":{"injectables/ExistsConstraint.html":{},"coverage.html":{}}}],["expect.any(string",{"_index":2394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiration",{"_index":1131,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["expiresat",{"_index":647,"title":{},"body":{"injectables/BlacklistTokenService.html":{},"injectables/RefreshTokenService.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":462,"title":{},"body":{"modules/AuthModule.html":{}}}],["explore",{"_index":2304,"title":{},"body":{"index.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["expose",{"_index":2333,"title":{},"body":{"index.html":{}}}],["express",{"_index":576,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":612,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["ext",{"_index":1904,"title":{},"body":{"injectables/UploadService.html":{}}}],["extends",{"_index":566,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PrismaService.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"injectables/ValidationService.html":{}}}],["external",{"_index":2224,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":1308,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1313,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extraire",{"_index":1584,"title":{},"body":{"injectables/PaymentService.html":{}}}],["f",{"_index":2288,"title":{},"body":{"index.html":{}}}],["factory",{"_index":1472,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/PaymentService.html":{}}}],["failed",{"_index":1642,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/StripeService.html":{}}}],["false",{"_index":342,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/DocumentResponseDto.html":{},"injectables/ExistsConstraint.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["false})@isenum(appointmentstatus)@isoptional",{"_index":1849,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["false})@isstring()@isoptional",{"_index":869,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["famille",{"_index":996,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["famille'})@isstring()@isnotempty",{"_index":985,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["feature",{"_index":2155,"title":{},"body":{"index.html":{}}}],["features",{"_index":2131,"title":{},"body":{"index.html":{}}}],["fetcher",{"_index":736,"title":{},"body":{"injectables/CacheService.html":{},"injectables/RedisService.html":{}}}],["fichier",{"_index":841,"title":{},"body":{"injectables/CloudinaryService.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/UploadService.html":{}}}],["field",{"_index":1249,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{},"miscellaneous/functions.html":{}}}],["fieldname",{"_index":1242,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"index.html":{}}}],["file.buffer",{"_index":1914,"title":{},"body":{"injectables/UploadService.html":{}}}],["file.size",{"_index":1061,"title":{},"body":{"injectables/DocumentService.html":{}}}],["fileid",{"_index":798,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["fileinterceptor",{"_index":574,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["filename",{"_index":1909,"title":{},"body":{"injectables/UploadService.html":{}}}],["filepath",{"_index":1256,"title":{},"body":{"interfaces/FileStorageService.html":{},"injectables/UploadService.html":{}}}],["files",{"_index":802,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["files.map((file",{"_index":837,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["files?.length",{"_index":835,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["filestorageservice",{"_index":808,"title":{"interfaces/FileStorageService.html":{}},"body":{"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["fileuploadresult",{"_index":809,"title":{"interfaces/FileUploadResult.html":{}},"body":{"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["fileurl",{"_index":1026,"title":{},"body":{"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{}}}],["findall",{"_index":132,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(@req",{"_index":623,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["findall(req",{"_index":1000,"title":{},"body":{"controllers/DocumentController.html":{}}}],["findall(userid",{"_index":1047,"title":{},"body":{"injectables/DocumentService.html":{}}}],["findbyuserid",{"_index":133,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyuserid(@param",{"_index":230,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findbyuserid(params",{"_index":171,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findbyuserid(userid",{"_index":261,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findfirst",{"_index":2383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findmany",{"_index":2384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findone",{"_index":134,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param",{"_index":227,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["findone(@param('id",{"_index":1436,"title":{},"body":{"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":263,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/DocumentService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(params",{"_index":177,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentController.html":{}}}],["findpendingappointmentswithoutpayment",{"_index":247,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findpendingappointmentswithoutpayment(userid",{"_index":265,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findunique",{"_index":2381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["firebase",{"_index":1270,"title":{},"body":{"injectables/FirebaseAdminService.html":{},"dependencies.html":{}}}],["firebase/firebase",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["firebaseadminservice",{"_index":54,"title":{"injectables/FirebaseAdminService.html":{}},"body":{"modules/AppModule.html":{},"injectables/FirebaseAdminService.html":{},"coverage.html":{},"overview.html":{}}}],["firstname",{"_index":335,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{}}}],["flow",{"_index":2184,"title":{},"body":{"index.html":{}}}],["fns",{"_index":1696,"title":{},"body":{"injectables/RefreshTokenService.html":{},"dependencies.html":{},"index.html":{}}}],["folder",{"_index":800,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["following",{"_index":2164,"title":{},"body":{"index.html":{}}}],["follows",{"_index":2142,"title":{},"body":{"index.html":{}}}],["fonction",{"_index":1660,"title":{},"body":{"injectables/RedisService.html":{}}}],["forbidden",{"_index":1727,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["forbidden(message",{"_index":1745,"title":{},"body":{"injectables/ResponseService.html":{}}}],["forbidnonwhitelisted",{"_index":2012,"title":{},"body":{"injectables/ValidationService.html":{}}}],["format",{"_index":603,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/EvolutionApiService.html":{}}}],["formaterrors",{"_index":1179,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["formaterrors(errors",{"_index":1196,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["formattedfromnumber",{"_index":1150,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["formattedtonumber",{"_index":1153,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["found",{"_index":146,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/JwtStrategy.html":{},"controllers/PaymentController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["found.'})@apiparam({name",{"_index":1380,"title":{},"body":{"controllers/PaymentController.html":{}}}],["fourni",{"_index":857,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"injectables/DocumentService.html":{},"injectables/JwtAuthGuard.html":{}}}],["framework",{"_index":2216,"title":{},"body":{"index.html":{}}}],["from([cached",{"_index":713,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["from(this.redisservice.get(fullkey)).pipe",{"_index":710,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["fromnumber",{"_index":1089,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["fs",{"_index":1894,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs.mkdir(dirpath",{"_index":1902,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs.unlink(fullpath",{"_index":1925,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs.writefile(filepath",{"_index":1913,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs/promises",{"_index":1895,"title":{},"body":{"injectables/UploadService.html":{}}}],["fullkey",{"_index":701,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["fullpath",{"_index":1924,"title":{},"body":{"injectables/UploadService.html":{}}}],["function",{"_index":699,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/ExistsConstraint.html":{},"injectables/RedisService.html":{},"injectables/UniqueConstraint.html":{},"coverage.html":{}}}],["functionality",{"_index":2329,"title":{},"body":{"index.html":{}}}],["functions",{"_index":2108,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":325,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["generatefilename",{"_index":1876,"title":{},"body":{"injectables/UploadService.html":{}}}],["generatefilename(originalname",{"_index":1882,"title":{},"body":{"injectables/UploadService.html":{}}}],["generatetoken",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken(userid",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["generation",{"_index":2232,"title":{},"body":{"index.html":{}}}],["get('/success",{"_index":1412,"title":{},"body":{"controllers/PaymentController.html":{}}}],["get('/success')@apioperation({summary",{"_index":1389,"title":{},"body":{"controllers/PaymentController.html":{}}}],["get(':id",{"_index":225,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["get(':id')@apioperation({summary",{"_index":178,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["get(':transactionid",{"_index":1409,"title":{},"body":{"controllers/PaymentController.html":{}}}],["get(':transactionid')@apioperation({summary",{"_index":1372,"title":{},"body":{"controllers/PaymentController.html":{}}}],["get('user/:userid",{"_index":229,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/PaymentController.html":{}}}],["get('user/:userid')@apioperation({summary",{"_index":173,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/PaymentController.html":{}}}],["get('user/:userid/pending/no",{"_index":181,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get()@apioperation({summary",{"_index":167,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["get(key",{"_index":1667,"title":{},"body":{"injectables/RedisService.html":{}}}],["getalltransactions",{"_index":1355,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["getfromcontainer",{"_index":1236,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["getfromcontainer(prismaservice",{"_index":1238,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getorset",{"_index":730,"title":{},"body":{"injectables/CacheService.html":{}}}],["getorset(key",{"_index":735,"title":{},"body":{"injectables/CacheService.html":{}}}],["getpendingappointmentswithoutpayment",{"_index":135,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getpendingappointmentswithoutpayment(@param('userid",{"_index":237,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getpendingappointmentswithoutpayment(userid",{"_index":180,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getprocessor",{"_index":1495,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["getprocessor(provider",{"_index":1498,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["gets",{"_index":742,"title":{},"body":{"injectables/CacheService.html":{}}}],["getting",{"_index":2114,"title":{"index.html":{}},"body":{}}],["gettransaction",{"_index":1356,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["gettransaction(@param('transactionid",{"_index":1410,"title":{},"body":{"controllers/PaymentController.html":{}}}],["gettransaction(transactionid",{"_index":1371,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["gettransactiondetails",{"_index":1479,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["gettransactiondetails(transactionid",{"_index":1490,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["gettransactionsbyuser",{"_index":1357,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["gettransactionsbyuser(@param('userid",{"_index":1407,"title":{},"body":{"controllers/PaymentController.html":{}}}],["gettransactionsbyuser(userid",{"_index":1386,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["global",{"_index":468,"title":{},"body":{"modules/AuthModule.html":{},"modules/UploadModule.html":{},"modules/ValidationModule.html":{}}}],["group",{"_index":1362,"title":{},"body":{"controllers/PaymentController.html":{},"index.html":{}}}],["guard",{"_index":467,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["guest",{"_index":206,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateGuestAppointmentDto.html":{},"coverage.html":{}}}],["guest'})@apiresponse({status",{"_index":165,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["guidelines",{"_index":2318,"title":{},"body":{"index.html":{}}}],["handle",{"_index":1390,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"index.html":{}}}],["handler",{"_index":687,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["handles",{"_index":2148,"title":{},"body":{"index.html":{}}}],["handlestripesuccess",{"_index":1508,"title":{},"body":{"injectables/PaymentService.html":{}}}],["handlestripesuccess(sessionid",{"_index":1514,"title":{},"body":{"injectables/PaymentService.html":{}}}],["handlesuccess",{"_index":1358,"title":{},"body":{"controllers/PaymentController.html":{}}}],["handlesuccess(@query('session_id",{"_index":1414,"title":{},"body":{"controllers/PaymentController.html":{}}}],["handlesuccess(sessionid",{"_index":1388,"title":{},"body":{"controllers/PaymentController.html":{}}}],["handling",{"_index":2207,"title":{},"body":{"index.html":{}}}],["hash",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UploadService.html":{}}}],["hashedpassword",{"_index":331,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["hashing",{"_index":2229,"title":{},"body":{"index.html":{}}}],["hash}${ext",{"_index":1907,"title":{},"body":{"injectables/UploadService.html":{}}}],["header",{"_index":2315,"title":{},"body":{"index.html":{}}}],["headers",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EvolutionApiService.html":{}}}],["hello",{"_index":124,"title":{},"body":{"injectables/AppService.html":{}}}],["heure",{"_index":878,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["hosted",{"_index":2194,"title":{},"body":{"index.html":{}}}],["hotel",{"_index":1889,"title":{},"body":{"injectables/UploadService.html":{}}}],["hour",{"_index":750,"title":{},"body":{"injectables/CacheService.html":{}}}],["http",{"_index":2320,"title":{},"body":{"index.html":{}}}],["http://localhost:3000",{"_index":2283,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/apithe",{"_index":2306,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExceptionService.html":{}}}],["httpexception(response",{"_index":1206,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpresponseservice",{"_index":1182,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["https",{"_index":2351,"title":{},"body":{"index.html":{}}}],["https://example.com/documents/file.pdf",{"_index":1029,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["httpstatus",{"_index":1198,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.bad_request",{"_index":1207,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.forbidden",{"_index":1209,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.internal_server_error",{"_index":1213,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.not_found",{"_index":1211,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["ici",{"_index":469,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["id",{"_index":226,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/JwtStrategy.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/variables.html":{}}}],["id'})@apiresponse({status",{"_index":175,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["id.dto",{"_index":208,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["id.dto.ts",{"_index":1343,"title":{},"body":{"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"coverage.html":{}}}],["id.dto.ts:10",{"_index":1345,"title":{},"body":{"classes/ParamAppointmentIdDto.html":{},"classes/ParamUserIdDto.html":{}}}],["id.dto.ts:11",{"_index":1349,"title":{},"body":{"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto-1.html":{}}}],["identifier",{"_index":2047,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["ids",{"_index":949,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["idtoken",{"_index":1268,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["ignore",{"_index":274,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreatePaymentModeDto.html":{},"injectables/PaymentProcessorFactory.html":{}}}],["image",{"_index":1887,"title":{},"body":{"injectables/UploadService.html":{},"index.html":{}}}],["images",{"_index":2208,"title":{},"body":{"index.html":{}}}],["implement",{"_index":2332,"title":{},"body":{"index.html":{}}}],["implementation",{"_index":768,"title":{},"body":{"injectables/CacheService.html":{},"index.html":{}}}],["implementations",{"_index":2379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implemented",{"_index":1201,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{}}}],["implementing",{"_index":2346,"title":{},"body":{"index.html":{}}}],["implements",{"_index":686,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/PrismaService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/WhatsAppService.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{}}}],["importes",{"_index":1972,"title":{},"body":{"modules/UserModule.html":{}}}],["imports",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["impossible",{"_index":1926,"title":{},"body":{"injectables/UploadService.html":{}}}],["inactif",{"_index":1768,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["inactiveaccount",{"_index":1728,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["inactiveaccount(userid",{"_index":1749,"title":{},"body":{"injectables/ResponseService.html":{}}}],["include",{"_index":298,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/PaymentService.html":{},"index.html":{}}}],["includes",{"_index":2163,"title":{},"body":{"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["individuels",{"_index":1610,"title":{},"body":{"injectables/PaymentService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{}}}],["information",{"_index":2167,"title":{},"body":{"index.html":{}}}],["inject",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DocumentService.html":{},"modules/PaymentModule.html":{},"injectables/UserService.html":{}}}],["inject('uploadservice",{"_index":1056,"title":{},"body":{"injectables/DocumentService.html":{}}}],["inject(sms_service",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":120,"title":{"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{}}}],["injectables",{"_index":121,"title":{},"body":{"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{},"overview.html":{}}}],["injecte",{"_index":1321,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["injection",{"_index":1239,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["injectredis",{"_index":1671,"title":{},"body":{"injectables/RedisService.html":{}}}],["input",{"_index":1365,"title":{},"body":{"controllers/PaymentController.html":{},"index.html":{}}}],["inspection",{"_index":2117,"title":{},"body":{"index.html":{}}}],["inspections",{"_index":2123,"title":{},"body":{"index.html":{}}}],["install",{"_index":2241,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2240,"title":{},"body":{"index.html":{}}}],["instance",{"_index":2196,"title":{},"body":{"index.html":{}}}],["instancename",{"_index":1090,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["integration",{"_index":2190,"title":{},"body":{"index.html":{}}}],["interact",{"_index":2323,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":2303,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":664,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["intercept(context",{"_index":668,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["interdit",{"_index":1748,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["interface",{"_index":562,"title":{"interfaces/AuthenticatedRequest.html":{},"interfaces/CacheEvictOptions.html":{},"interfaces/CacheableOptions.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/PaymentProcessor.html":{},"interfaces/Response.html":{},"interfaces/SmsServiceInterface.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"interfaces/CacheEvictOptions.html":{},"interfaces/CacheableOptions.html":{},"controllers/DocumentController.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/PaymentProcessor.html":{},"interfaces/Response.html":{},"interfaces/SmsServiceInterface.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":564,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"interfaces/CacheEvictOptions.html":{},"interfaces/CacheableOptions.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/PaymentProcessor.html":{},"interfaces/Response.html":{},"interfaces/SmsServiceInterface.html":{},"overview.html":{}}}],["interfaces/upload.interface",{"_index":810,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["internalerror",{"_index":1729,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["internalerror(message",{"_index":1751,"title":{},"body":{"injectables/ResponseService.html":{}}}],["interne",{"_index":1374,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["introuvable",{"_index":887,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{}}}],["invalid",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FirebaseAdminService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["invalidate",{"_index":731,"title":{},"body":{"injectables/CacheService.html":{},"index.html":{}}}],["invalidate(key",{"_index":751,"title":{},"body":{"injectables/CacheService.html":{}}}],["invalidatepattern",{"_index":732,"title":{},"body":{"injectables/CacheService.html":{}}}],["invalidatepattern(pattern",{"_index":755,"title":{},"body":{"injectables/CacheService.html":{}}}],["invalidates",{"_index":753,"title":{},"body":{"injectables/CacheService.html":{}}}],["invalide",{"_index":611,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["invalider",{"_index":1987,"title":{},"body":{"injectables/UserService.html":{}}}],["invalides",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["ioredis",{"_index":1672,"title":{},"body":{"injectables/RedisService.html":{},"dependencies.html":{}}}],["is_public_key",{"_index":1292,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":959,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["isblacklisted",{"_index":644,"title":{},"body":{"injectables/BlacklistTokenService.html":{},"miscellaneous/variables.html":{}}}],["isblacklisted(token",{"_index":649,"title":{},"body":{"injectables/BlacklistTokenService.html":{}}}],["isemail",{"_index":934,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{}}}],["isenum",{"_index":914,"title":{},"body":{"classes/CreateDocumentDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{}}}],["isenum(appointmentstatus",{"_index":1855,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["isenum(documenttype",{"_index":916,"title":{},"body":{"classes/CreateDocumentDto.html":{},"classes/UpdateDocumentDto.html":{}}}],["isglobal",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":898,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateDocumentDto.html":{}}}],["isnumber",{"_index":961,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["isoptional",{"_index":901,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isoptional()@isstring()@apiproperty({example",{"_index":851,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isphonenumber",{"_index":994,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isphoneverified",{"_index":341,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/UserService.html":{}}}],["ispublic",{"_index":1294,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":899,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/VerifyOtpDto.html":{}}}],["issuesdate",{"_index":291,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{}}}],["isuuid",{"_index":900,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{}}}],["jest.fn",{"_index":2382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn((callback",{"_index":2388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockimplementation((data",{"_index":2393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockimplementation((errors",{"_index":2395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockimplementation((message",{"_index":2396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockimplementation((userid",{"_index":2397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockimplementation(async",{"_index":2376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["john",{"_index":919,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{}}}],["john.doe@example.com",{"_index":917,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{}}}],["jour",{"_index":632,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{}}}],["json",{"_index":2221,"title":{},"body":{"index.html":{}}}],["json.parse(data",{"_index":1675,"title":{},"body":{"injectables/RedisService.html":{}}}],["json.stringify(error",{"_index":824,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["json.stringify(value",{"_index":1677,"title":{},"body":{"injectables/RedisService.html":{}}}],["juste",{"_index":1616,"title":{},"body":{"injectables/PaymentService.html":{}}}],["jwt",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["jwtauthguard",{"_index":452,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1312,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":444,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":457,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":441,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":655,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/RedisService.html":{},"index.html":{}}}],["keys",{"_index":757,"title":{},"body":{"injectables/CacheService.html":{},"index.html":{}}}],["keys.length",{"_index":783,"title":{},"body":{"injectables/CacheService.html":{}}}],["kubernetes",{"_index":2343,"title":{},"body":{"index.html":{}}}],["l'enregistrement",{"_index":1919,"title":{},"body":{"injectables/UploadService.html":{}}}],["l'upload",{"_index":1921,"title":{},"body":{"injectables/UploadService.html":{}}}],["l'utilisateur",{"_index":904,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{}}}],["l'utilisateur'})@isuuid()@isnotempty()@exists('user",{"_index":884,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/ParamUserIdDto.html":{}}}],["l\\'utilisateur",{"_index":622,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"classes/ParamUserIdDto.html":{}}}],["la",{"_index":1336,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentService.html":{}}}],["lastname",{"_index":337,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{}}}],["le",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["length",{"_index":1522,"title":{},"body":{"injectables/PaymentService.html":{},"classes/VerifyOtpDto.html":{}}}],["length(4",{"_index":2034,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["les",{"_index":617,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/PaymentService.html":{}}}],["license",{"_index":606,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"index.html":{},"properties.html":{}}}],["licensed",{"_index":2354,"title":{},"body":{"index.html":{}}}],["licenses",{"_index":2168,"title":{},"body":{"index.html":{}}}],["lieu",{"_index":866,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["line",{"_index":305,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["line_items",{"_index":1805,"title":{},"body":{"injectables/StripeService.html":{}}}],["list",{"_index":1425,"title":{},"body":{"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["liste",{"_index":620,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/CreatePaymentDto.html":{},"controllers/DocumentController.html":{}}}],["lister",{"_index":616,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["literal",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/JwtStrategy.html":{}}}],["live",{"_index":747,"title":{},"body":{"injectables/CacheService.html":{}}}],["location",{"_index":289,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["logger",{"_index":791,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/StripeService.html":{},"injectables/UploadService.html":{}}}],["logger(cloudinaryservice.name",{"_index":805,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["logger(stripeservice.name",{"_index":1790,"title":{},"body":{"injectables/StripeService.html":{}}}],["logger(uploadservice.name",{"_index":1892,"title":{},"body":{"injectables/UploadService.html":{}}}],["logging",{"_index":2348,"title":{},"body":{"index.html":{}}}],["loggingmiddleware",{"_index":1632,"title":{},"body":{"injectables/PrismaService.html":{}}}],["logic",{"_index":2322,"title":{},"body":{"index.html":{}}}],["login",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["login(@body",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(email",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(logindto",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":360,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.password",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@headers('authorization",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(authheader",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(token",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["logs",{"_index":2287,"title":{},"body":{"index.html":{}}}],["lors",{"_index":1918,"title":{},"body":{"injectables/UploadService.html":{}}}],["lts.2",{"_index":2100,"title":{},"body":{"dependencies.html":{}}}],["l’utilisateur",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreatePaymentDto.html":{},"controllers/DocumentController.html":{}}}],["main",{"_index":862,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"index.html":{}}}],["mais",{"_index":1339,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{}}}],["make",{"_index":2007,"title":{},"body":{"injectables/ValidationService.html":{},"index.html":{}}}],["management",{"_index":2134,"title":{},"body":{"index.html":{}}}],["manages",{"_index":2121,"title":{},"body":{"index.html":{}}}],["manipulation",{"_index":2231,"title":{},"body":{"index.html":{}}}],["manquante",{"_index":1590,"title":{},"body":{"injectables/PaymentService.html":{}}}],["manuelle",{"_index":1240,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["map",{"_index":2328,"title":{},"body":{"index.html":{}}}],["match",{"_index":759,"title":{},"body":{"injectables/CacheService.html":{}}}],["matches",{"_index":1169,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor(100000",{"_index":1127,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["math.random",{"_index":1128,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["math.random().tostring(36).slice",{"_index":329,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["math.round(amount",{"_index":1808,"title":{},"body":{"injectables/StripeService.html":{}}}],["maxlength",{"_index":2022,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["maxsize",{"_index":1058,"title":{},"body":{"injectables/DocumentService.html":{}}}],["media",{"_index":2206,"title":{},"body":{"index.html":{}}}],["member",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/RedisService.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["memory",{"_index":2220,"title":{},"body":{"index.html":{}}}],["message",{"_index":885,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":1202,"title":{},"body":{"injectables/ExceptionService.html":{},"index.html":{}}}],["messages.push(...this.formaterrors(error.children",{"_index":1220,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["messages.push(message",{"_index":1217,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["messaging",{"_index":2226,"title":{},"body":{"index.html":{}}}],["met",{"_index":1657,"title":{},"body":{"injectables/RedisService.html":{}}}],["metadata",{"_index":1488,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"dependencies.html":{}}}],["metadata.appointmentids",{"_index":1587,"title":{},"body":{"injectables/PaymentService.html":{}}}],["metadata.appointmentids.split",{"_index":1591,"title":{},"body":{"injectables/PaymentService.html":{}}}],["metadata.paymentmodeid",{"_index":1588,"title":{},"body":{"injectables/PaymentService.html":{}}}],["metadata.userid",{"_index":1586,"title":{},"body":{"injectables/PaymentService.html":{}}}],["method",{"_index":766,"title":{},"body":{"injectables/CacheService.html":{},"injectables/StripeService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["mettre",{"_index":631,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["middleware",{"_index":2223,"title":{},"body":{"index.html":{}}}],["migrate",{"_index":2249,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":2247,"title":{},"body":{"index.html":{}}}],["min",{"_index":962,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["min(0.01",{"_index":964,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["minlength",{"_index":993,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/ResetPasswordDto.html":{},"classes/VerifyOtpDto.html":{}}}],["minlength(6",{"_index":998,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/ResetPasswordDto.html":{}}}],["minutes",{"_index":1106,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["mis",{"_index":634,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{}}}],["miscellaneous",{"_index":2107,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["misused",{"_index":703,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["mit",{"_index":2353,"title":{},"body":{"index.html":{}}}],["mo",{"_index":1065,"title":{},"body":{"injectables/DocumentService.html":{}}}],["mock",{"_index":780,"title":{},"body":{"injectables/CacheService.html":{},"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/variables.html":{}}}],["mock_sid",{"_index":1146,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["mocks",{"_index":2391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":697,"title":{},"body":{"injectables/CacheInterceptor.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"index.html":{}}}],["mode'})@apiresponse({status",{"_index":1422,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["mode.controller",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModeModule.html":{}}}],["mode.controller.ts",{"_index":1419,"title":{},"body":{"controllers/PaymentModeController.html":{},"coverage.html":{}}}],["mode.controller.ts:29",{"_index":1423,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["mode.controller.ts:36",{"_index":1426,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["mode.controller.ts:43",{"_index":1427,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["mode.controller.ts:50",{"_index":1430,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["mode.controller.ts:60",{"_index":1428,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["mode.dto",{"_index":1431,"title":{},"body":{"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"classes/UpdatePaymentModeDto.html":{}}}],["mode.dto.ts",{"_index":969,"title":{},"body":{"classes/CreatePaymentModeDto.html":{},"classes/UpdatePaymentModeDto.html":{},"coverage.html":{}}}],["mode.dto.ts:16",{"_index":973,"title":{},"body":{"classes/CreatePaymentModeDto.html":{}}}],["mode.module",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["mode.module.ts",{"_index":1445,"title":{},"body":{"modules/PaymentModeModule.html":{}}}],["mode.service",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{}}}],["mode.service.ts",{"_index":1446,"title":{},"body":{"injectables/PaymentModeService.html":{},"coverage.html":{}}}],["mode.service.ts:14",{"_index":1448,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["mode.service.ts:25",{"_index":1449,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["mode.service.ts:36",{"_index":1450,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["mode.service.ts:49",{"_index":1452,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["mode.service.ts:61",{"_index":1451,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["mode.service.ts:8",{"_index":1447,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["mode/dto/create",{"_index":968,"title":{},"body":{"classes/CreatePaymentModeDto.html":{},"coverage.html":{}}}],["mode/dto/update",{"_index":1859,"title":{},"body":{"classes/UpdatePaymentModeDto.html":{},"coverage.html":{}}}],["mode/payment",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"coverage.html":{}}}],["model",{"_index":1248,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["modelname",{"_index":1241,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["models",{"_index":1639,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["modes",{"_index":1420,"title":{},"body":{"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{}}}],["modes'})@apiresponse({status",{"_index":1424,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["modular",{"_index":2143,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["modules/ioredis",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"injectables/RedisService.html":{},"dependencies.html":{},"index.html":{}}}],["monitoring",{"_index":2347,"title":{},"body":{"index.html":{}}}],["montants",{"_index":945,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["more",{"_index":1525,"title":{},"body":{"injectables/PaymentService.html":{}}}],["mot",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["multer",{"_index":2098,"title":{},"body":{"dependencies.html":{}}}],["multiple",{"_index":1361,"title":{},"body":{"controllers/PaymentController.html":{}}}],["même",{"_index":1337,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{}}}],["n'est",{"_index":1770,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":149,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"classes/CreatePaymentModeDto.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nest",{"_index":2331,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":674,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["nestjs",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"injectables/RedisService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":456,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CacheInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":1630,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":445,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/mapped",{"_index":1865,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["nestjs/passport",{"_index":1291,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/platform",{"_index":575,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":202,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"controllers/UserController.html":{},"classes/VerifyOtpDto.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/websockets",{"_index":2087,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":155,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"index.html":{}}}],["newpassword",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{}}}],["newrefresh",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{}}}],["newrefresh.token",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["newsecurepassword123",{"_index":1719,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["newsecurepassword123'})@isstring()@minlength(6",{"_index":1716,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["next",{"_index":304,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["next.handle",{"_index":719,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["next.handle().pipe",{"_index":714,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["next.handle().pipe(tap",{"_index":705,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["node.js",{"_index":2236,"title":{},"body":{"index.html":{}}}],["nom",{"_index":925,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{}}}],["non",{"_index":628,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["none",{"_index":347,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["notfound",{"_index":1730,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["notfound(message",{"_index":1753,"title":{},"body":{"injectables/ResponseService.html":{}}}],["notifications",{"_index":2137,"title":{},"body":{"index.html":{}}}],["nouveau",{"_index":1857,"title":{},"body":{"classes/UpdateDocumentDto.html":{}}}],["npm",{"_index":2238,"title":{},"body":{"index.html":{}}}],["npx",{"_index":2248,"title":{},"body":{"index.html":{}}}],["null",{"_index":297,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"classes/CreateGuestAppointmentDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{}}}],["number",{"_index":739,"title":{},"body":{"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"classes/CreatePaymentDto.html":{},"classes/CreateUserDto.html":{},"injectables/EvolutionApiService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/RedisService.html":{},"interfaces/Response.html":{},"injectables/StripeService.html":{},"injectables/WhatsAppService.html":{}}}],["numbers",{"_index":1148,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["numéro",{"_index":872,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"injectables/ResponseService.html":{},"classes/UpdateAppointmentDto.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["object.constructor",{"_index":1251,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["object.keys(this",{"_index":1640,"title":{},"body":{"injectables/PrismaService.html":{}}}],["object.values(error.constraints).foreach((message",{"_index":1216,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["objects",{"_index":2326,"title":{},"body":{"index.html":{}}}],["observable",{"_index":673,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["obtain",{"_index":2314,"title":{},"body":{"index.html":{}}}],["official",{"_index":2203,"title":{},"body":{"index.html":{}}}],["officiel",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["ok",{"_index":830,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["old",{"_index":2187,"title":{},"body":{"index.html":{}}}],["oldtoken",{"_index":1691,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["one",{"_index":1360,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["onmoduledestroy",{"_index":1625,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":1263,"title":{},"body":{"injectables/FirebaseAdminService.html":{},"injectables/PrismaService.html":{}}}],["open",{"_index":2200,"title":{},"body":{"index.html":{}}}],["operations",{"_index":2149,"title":{},"body":{"index.html":{}}}],["optional",{"_index":150,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/functions.html":{}}}],["optionaljwtauthguard",{"_index":1330,"title":{"injectables/OptionalJwtAuthGuard.html":{}},"body":{"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{}}}],["options",{"_index":660,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"interfaces/CacheableOptions.html":{},"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["opération",{"_index":1758,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["orchestration",{"_index":2342,"title":{},"body":{"index.html":{}}}],["originalname",{"_index":1884,"title":{},"body":{"injectables/UploadService.html":{}}}],["orm",{"_index":2151,"title":{},"body":{"index.html":{}}}],["otp",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{}}}],["otp')@apioperation({summary",{"_index":1939,"title":{},"body":{"controllers/UserController.html":{}}}],["otp.dto",{"_index":1951,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["otp.dto.ts",{"_index":2020,"title":{},"body":{"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["otp.dto.ts:14",{"_index":2026,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["otp.dto.ts:22",{"_index":2033,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["otp:${phone",{"_index":1133,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["otp_expiration_time",{"_index":1091,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["ou",{"_index":1375,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/RedisService.html":{}}}],["out",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["overview",{"_index":2358,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p.id",{"_index":1558,"title":{},"body":{"injectables/PaymentService.html":{}}}],["p.transactionid",{"_index":1559,"title":{},"body":{"injectables/PaymentService.html":{}}}],["package",{"_index":83,"title":{"dependencies.html":{},"properties.html":{}},"body":{"modules/AppModule.html":{}}}],["paid",{"_index":1531,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paiement",{"_index":349,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["paiement'})@isstring()@isnotempty()@unique('paymentmode",{"_index":972,"title":{},"body":{"classes/CreatePaymentModeDto.html":{}}}],["paiements",{"_index":1609,"title":{},"body":{"injectables/PaymentService.html":{}}}],["par",{"_index":626,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/CreatePaymentDto.html":{},"controllers/DocumentController.html":{}}}],["param",{"_index":195,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/CacheService.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":1438,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["paramappointmentiddto",{"_index":138,"title":{"classes/ParamAppointmentIdDto.html":{}},"body":{"controllers/AppointmentController.html":{},"classes/ParamAppointmentIdDto.html":{},"coverage.html":{}}}],["paramdocumentiddto",{"_index":582,"title":{"classes/ParamDocumentIdDto.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"classes/ParamDocumentIdDto.html":{},"coverage.html":{}}}],["parameters",{"_index":148,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":151,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"interfaces/CacheableOptions.html":{},"controllers/DocumentController.html":{}}}],["paramuseriddto",{"_index":172,"title":{"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{}},"body":{"controllers/AppointmentController.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"coverage.html":{}}}],["parseint",{"_index":1698,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["partialtype",{"_index":1861,"title":{},"body":{"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createpaymentmodedto",{"_index":1860,"title":{},"body":{"classes/UpdatePaymentModeDto.html":{}}}],["partialtype(createuserdto",{"_index":1864,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pas",{"_index":1340,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["passe",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["passe'})@apiresponse({status",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{}}}],["passport",{"_index":1310,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportstrategy",{"_index":1307,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1302,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passthrough",{"_index":718,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["password",{"_index":327,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/LoginDto.html":{},"classes/RequestPasswordResetDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["password')@apioperation({summary",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.dto",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.dto.ts",{"_index":1712,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:13",{"_index":1714,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:18",{"_index":1717,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:8",{"_index":1715,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["patch",{"_index":568,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":630,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":1009,"title":{},"body":{"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["path",{"_index":1721,"title":{},"body":{"interfaces/Response.html":{},"injectables/UploadService.html":{}}}],["path.extname(originalname",{"_index":1905,"title":{},"body":{"injectables/UploadService.html":{}}}],["path.join(dirpath",{"_index":1911,"title":{},"body":{"injectables/UploadService.html":{}}}],["path.join(folder",{"_index":1916,"title":{},"body":{"injectables/UploadService.html":{}}}],["path.join(this.basedir",{"_index":1901,"title":{},"body":{"injectables/UploadService.html":{}}}],["pattern",{"_index":758,"title":{},"body":{"injectables/CacheService.html":{}}}],["pay",{"_index":1601,"title":{},"body":{"injectables/PaymentService.html":{}}}],["payer",{"_index":963,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["payer'})@isarray()@arraynotempty()@isstring({each",{"_index":950,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["payload",{"_index":1306,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1315,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payment",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"classes/UpdatePaymentModeDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["payment')@apioperation({summary",{"_index":182,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["payment.controller",{"_index":1469,"title":{},"body":{"modules/PaymentModule.html":{}}}],["payment.dto",{"_index":1400,"title":{},"body":{"controllers/PaymentController.html":{}}}],["payment.dto.ts",{"_index":939,"title":{},"body":{"classes/CreatePaymentDto.html":{},"coverage.html":{}}}],["payment.dto.ts:15",{"_index":958,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["payment.dto.ts:21",{"_index":951,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["payment.dto.ts:26",{"_index":957,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["payment.dto.ts:33",{"_index":948,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["payment.dto.ts:38",{"_index":955,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["payment.service",{"_index":1399,"title":{},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{}}}],["payment/payment.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["payment_intent",{"_index":1797,"title":{},"body":{"injectables/StripeService.html":{}}}],["payment_method_types",{"_index":1803,"title":{},"body":{"injectables/StripeService.html":{}}}],["paymentcontroller",{"_index":1352,"title":{"controllers/PaymentController.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"coverage.html":{}}}],["paymentdetails",{"_index":1482,"title":{},"body":{"interfaces/PaymentProcessor.html":{}}}],["paymentgroup",{"_index":1580,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentgroup.id",{"_index":1615,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentgroupid",{"_index":1614,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentmode",{"_index":1453,"title":{},"body":{"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["paymentmode.deletedat",{"_index":1534,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentmodecontroller",{"_index":67,"title":{"controllers/PaymentModeController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"coverage.html":{}}}],["paymentmodeid",{"_index":943,"title":{},"body":{"classes/CreatePaymentDto.html":{},"injectables/PaymentService.html":{}}}],["paymentmodemodule",{"_index":43,"title":{"modules/PaymentModeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModeModule.html":{},"modules.html":{},"overview.html":{}}}],["paymentmodes",{"_index":1455,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["paymentmodeservice",{"_index":55,"title":{"injectables/PaymentModeService.html":{}},"body":{"modules/AppModule.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"coverage.html":{},"overview.html":{}}}],["paymentmodule",{"_index":44,"title":{"modules/PaymentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["paymentprocessor",{"_index":1474,"title":{"interfaces/PaymentProcessor.html":{}},"body":{"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/StripeService.html":{},"coverage.html":{}}}],["paymentprocessorfactory",{"_index":1465,"title":{"injectables/PaymentProcessorFactory.html":{}},"body":{"modules/PaymentModule.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"overview.html":{}}}],["payments",{"_index":185,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"index.html":{}}}],["payments.map(p",{"_index":1557,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentservice",{"_index":1398,"title":{"injectables/PaymentService.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"overview.html":{}}}],["paymentstatus",{"_index":1519,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentstatus.paid",{"_index":1530,"title":{},"body":{"injectables/PaymentService.html":{}}}],["pending",{"_index":183,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/PaymentService.html":{}}}],["persistent",{"_index":2272,"title":{},"body":{"index.html":{}}}],["perso",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["phone",{"_index":339,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"injectables/EvolutionApiService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/TwilioService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{}}}],["phone'})@apiresponse({status",{"_index":1940,"title":{},"body":{"controllers/UserController.html":{}}}],["phone.startswith",{"_index":1154,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["phone.substring(1",{"_index":1155,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["pipeline",{"_index":2341,"title":{},"body":{"index.html":{}}}],["please",{"_index":1114,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["post",{"_index":196,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["post(':id/send",{"_index":1938,"title":{},"body":{"controllers/UserController.html":{}}}],["post('guest",{"_index":221,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["post('login",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@apioperation({summary",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('request",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('upload",{"_index":598,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["post('upload')@useinterceptors(undefined)@apioperation({summary",{"_index":1014,"title":{},"body":{"controllers/DocumentController.html":{}}}],["post('verify",{"_index":1946,"title":{},"body":{"controllers/UserController.html":{}}}],["post()@apioperation({summary",{"_index":154,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["postgres",{"_index":2269,"title":{},"body":{"index.html":{}}}],["postgresql",{"_index":2162,"title":{},"body":{"index.html":{}}}],["pour",{"_index":1597,"title":{},"body":{"injectables/PaymentService.html":{}}}],["practices",{"_index":2146,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":127,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/CacheInterceptor.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["prefix.decorator",{"_index":681,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["prefix.decorator.ts",{"_index":2061,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["prefix}:${key",{"_index":702,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["prerequisites",{"_index":2235,"title":{},"body":{"index.html":{}}}],["present",{"_index":1149,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["price_data",{"_index":1806,"title":{},"body":{"injectables/StripeService.html":{}}}],["prisma",{"_index":251,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/DocumentService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/RefreshTokenService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["prisma.middleware",{"_index":1633,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prisma.service",{"_index":1622,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":270,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateDocumentDto.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"dependencies.html":{},"index.html":{}}}],["prisma/prisma.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/UserModule.html":{}}}],["prisma/prisma.service",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/RefreshTokenService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{}}}],["prismaclient",{"_index":1624,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":45,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":56,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/RefreshTokenService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["private",{"_index":272,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{}}}],["process.env.cloudinary_api_key",{"_index":815,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.cloudinary_api_secret",{"_index":817,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.cloudinary_cloud_name",{"_index":813,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.stripe_cancel_url",{"_index":1544,"title":{},"body":{"injectables/PaymentService.html":{}}}],["process.env.stripe_secret_key",{"_index":1562,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["process.env.stripe_success_url",{"_index":1543,"title":{},"body":{"injectables/PaymentService.html":{}}}],["process.env.upload_dir",{"_index":1898,"title":{},"body":{"injectables/UploadService.html":{}}}],["process.exit(1",{"_index":1643,"title":{},"body":{"injectables/PrismaService.html":{}}}],["processed",{"_index":1363,"title":{},"body":{"controllers/PaymentController.html":{}}}],["processes",{"_index":2159,"title":{},"body":{"index.html":{}}}],["processing",{"_index":2136,"title":{},"body":{"index.html":{}}}],["processor",{"_index":1471,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/PaymentService.html":{}}}],["processor.createcheckoutsession",{"_index":1539,"title":{},"body":{"injectables/PaymentService.html":{}}}],["processor.factory",{"_index":1470,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/PaymentService.html":{}}}],["processor.factory.ts",{"_index":1494,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{},"coverage.html":{}}}],["processor.factory.ts:10",{"_index":1499,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["processor.factory.ts:7",{"_index":1497,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["processor.interface",{"_index":1501,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{},"injectables/StripeService.html":{}}}],["processor.interface.ts",{"_index":1476,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"coverage.html":{}}}],["processor.interface.ts:10",{"_index":1491,"title":{},"body":{"interfaces/PaymentProcessor.html":{}}}],["processor.interface.ts:12",{"_index":1489,"title":{},"body":{"interfaces/PaymentProcessor.html":{}}}],["processor.interface.ts:2",{"_index":1483,"title":{},"body":{"interfaces/PaymentProcessor.html":{}}}],["processor.interface.ts:8",{"_index":1493,"title":{},"body":{"interfaces/PaymentProcessor.html":{}}}],["product_data",{"_index":1809,"title":{},"body":{"injectables/StripeService.html":{}}}],["production",{"_index":2253,"title":{},"body":{"index.html":{}}}],["profiles",{"_index":2157,"title":{},"body":{"index.html":{}}}],["project",{"_index":2233,"title":{},"body":{"index.html":{}}}],["promise",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"interfaces/PaymentProcessor.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/WhatsAppService.html":{}}}],["promise((resolve",{"_index":818,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["promise.all",{"_index":836,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/PaymentService.html":{},"injectables/UploadService.html":{}}}],["promise.resolve",{"_index":2377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise.resolve(false",{"_index":2378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promises",{"_index":704,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["proper",{"_index":2198,"title":{},"body":{"index.html":{}}}],["properties",{"_index":567,"title":{"properties.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"interfaces/CacheEvictOptions.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileUploadResult.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"injectables/UploadService.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"properties.html":{}}}],["propertyname",{"_index":1250,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["propriétaire",{"_index":1042,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["protected",{"_index":2313,"title":{},"body":{"index.html":{}}}],["provide",{"_index":465,"title":{},"body":{"modules/AuthModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{}}}],["provided",{"_index":2294,"title":{},"body":{"index.html":{}}}],["provider",{"_index":1500,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["provider.tolowercase",{"_index":1503,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":2152,"title":{},"body":{"index.html":{}}}],["prénom",{"_index":920,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{}}}],["prénom'})@isstring()@isnotempty",{"_index":983,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["présent",{"_index":1662,"title":{},"body":{"injectables/RedisService.html":{}}}],["public",{"_index":210,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/PaymentController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('guest')@apioperation({summary",{"_index":164,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["public()@post('login')@apioperation({summary",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('refresh')@apioperation({summary",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('request",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('reset",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{}}}],["purposes",{"_index":770,"title":{},"body":{"injectables/CacheService.html":{}}}],["put",{"_index":197,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["put(':id",{"_index":235,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["put(':id')@apioperation({summary",{"_index":191,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["put(':id/cancel",{"_index":232,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["put(':id/cancel')@apioperation({summary",{"_index":139,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["qr",{"_index":2210,"title":{},"body":{"index.html":{}}}],["quantity",{"_index":1810,"title":{},"body":{"injectables/StripeService.html":{}}}],["que",{"_index":1320,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PaymentService.html":{}}}],["query",{"_index":1397,"title":{},"body":{"controllers/PaymentController.html":{}}}],["rafraîchi",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["rafraîchir",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{}}}],["random",{"_index":326,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{}}}],["real",{"_index":774,"title":{},"body":{"injectables/CacheService.html":{},"index.html":{}}}],["rec123456",{"_index":871,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["receipt",{"_index":608,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["receiptnumber",{"_index":285,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["receipts",{"_index":2170,"title":{},"body":{"index.html":{}}}],["receive",{"_index":2202,"title":{},"body":{"index.html":{}}}],["receiving",{"_index":2205,"title":{},"body":{"index.html":{}}}],["recherchée",{"_index":1554,"title":{},"body":{"injectables/PaymentService.html":{}}}],["record",{"_index":1246,"title":{},"body":{"injectables/ExistsConstraint.html":{},"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{}}}],["records",{"_index":2172,"title":{},"body":{"index.html":{}}}],["recursive",{"_index":1903,"title":{},"body":{"injectables/UploadService.html":{}}}],["redirect",{"_index":1392,"title":{},"body":{"controllers/PaymentController.html":{}}}],["redirection",{"_index":1517,"title":{},"body":{"injectables/PaymentService.html":{}}}],["redis",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/CacheService.html":{},"injectables/EvolutionApiService.html":{},"injectables/RedisService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["redis.service",{"_index":1649,"title":{},"body":{"modules/RedisModule.html":{}}}],["redis/redis.module",{"_index":728,"title":{},"body":{"modules/CacheModule.html":{}}}],["redis/redis.service",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/EvolutionApiService.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{}}}],["rediskey",{"_index":1132,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["redismodule",{"_index":46,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CacheModule.html":{},"modules/RedisModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["redismodule.forrootasync",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["redisservice",{"_index":57,"title":{"injectables/RedisService.html":{}},"body":{"modules/AppModule.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/EvolutionApiService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"overview.html":{}}}],["reflect",{"_index":2102,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":666,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/JwtAuthGuard.html":{}}}],["refresh",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["refresh(@body",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(body",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(refreshtoken",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken",{"_index":425,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["refreshtokenservice",{"_index":442,"title":{"injectables/RefreshTokenService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenService.html":{},"coverage.html":{},"overview.html":{}}}],["refund",{"_index":1480,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["refund(transactionid",{"_index":1492,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["refund.status",{"_index":1798,"title":{},"body":{"injectables/StripeService.html":{}}}],["register",{"_index":2126,"title":{},"body":{"index.html":{}}}],["registerdecorator",{"_index":1232,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["registration",{"_index":2156,"title":{},"body":{"index.html":{}}}],["reject",{"_index":819,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["reject(error",{"_index":825,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["reject(new",{"_index":826,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["rejected",{"_index":1172,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["related",{"_index":2127,"title":{},"body":{"index.html":{}}}],["relativepath",{"_index":1915,"title":{},"body":{"injectables/UploadService.html":{}}}],["rely",{"_index":779,"title":{},"body":{"injectables/CacheService.html":{}}}],["remove",{"_index":999,"title":{},"body":{"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param",{"_index":640,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["remove(@param('id",{"_index":1440,"title":{},"body":{"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":1050,"title":{},"body":{"injectables/DocumentService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(params",{"_index":1005,"title":{},"body":{"controllers/DocumentController.html":{}}}],["rendez",{"_index":867,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/ParamAppointmentIdDto.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["req",{"_index":572,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["req.headers.authorization?.replace('bearer",{"_index":1296,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["req.user",{"_index":1323,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["req.user.id",{"_index":613,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["request",{"_index":160,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/CacheInterceptor.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"index.html":{}}}],["request.params",{"_index":696,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["request/response",{"_index":2327,"title":{},"body":{"index.html":{}}}],["requestpasswordreset",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["requestpasswordreset(@body",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestpasswordreset(dto",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestpasswordreset(email",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["requestpasswordresetdto",{"_index":381,"title":{"classes/RequestPasswordResetDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RequestPasswordResetDto.html":{},"coverage.html":{}}}],["requests",{"_index":2185,"title":{},"body":{"index.html":{}}}],["requests:example",{"_index":2316,"title":{},"body":{"index.html":{}}}],["required",{"_index":858,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/DocumentResponseDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["requirements",{"_index":2309,"title":{},"body":{"index.html":{}}}],["requires",{"_index":2192,"title":{},"body":{"index.html":{}}}],["requête",{"_index":610,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"index.html":{},"overview.html":{}}}],["reset')@apioperation({summary",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset.dto",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset.dto.ts",{"_index":1709,"title":{},"body":{"classes/RequestPasswordResetDto.html":{},"coverage.html":{}}}],["reset.dto.ts:8",{"_index":1710,"title":{},"body":{"classes/RequestPasswordResetDto.html":{}}}],["resetpassword",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(@body",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(dto",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(email",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassworddto",{"_index":395,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["resolve",{"_index":832,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["resources",{"_index":2352,"title":{},"body":{"index.html":{}}}],["response",{"_index":1142,"title":{"interfaces/Response.html":{}},"body":{"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"index.html":{}}}],["response.data?.key?.id",{"_index":1161,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["response.data?.status",{"_index":1163,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["response.dto",{"_index":586,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{}}}],["response.dto.ts",{"_index":1025,"title":{},"body":{"classes/DocumentResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:15",{"_index":1043,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["response.dto.ts:22",{"_index":1037,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["response.dto.ts:28",{"_index":1030,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["response.dto.ts:34",{"_index":1041,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["response.dto.ts:41",{"_index":1028,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["response.dto.ts:9",{"_index":1036,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["response.interface",{"_index":1762,"title":{},"body":{"injectables/ResponseService.html":{}}}],["response/response.service",{"_index":1199,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["responsedto",{"_index":1071,"title":{},"body":{"injectables/DocumentService.html":{}}}],["responsedtos",{"_index":1075,"title":{},"body":{"injectables/DocumentService.html":{}}}],["responses",{"_index":2154,"title":{},"body":{"index.html":{}}}],["responseservice",{"_index":58,"title":{"injectables/ResponseService.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"injectables/ExceptionService.html":{},"injectables/JwtAuthGuard.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["ressource",{"_index":1740,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["rest",{"_index":2201,"title":{},"body":{"index.html":{}}}],["result",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{}}}],["result.public_id",{"_index":831,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["result.secure_url",{"_index":833,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["result.status",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retourne",{"_index":1602,"title":{},"body":{"injectables/PaymentService.html":{}}}],["retrieved",{"_index":300,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["retrieved.'})@apiresponse({status",{"_index":1379,"title":{},"body":{"controllers/PaymentController.html":{}}}],["retrouvés",{"_index":1078,"title":{},"body":{"injectables/DocumentService.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":186,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{}}}],["reçu",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["reçu'})@apiresponse({status",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{}}}],["rotate",{"_index":1685,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["rotate(oldtoken",{"_index":1689,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["run",{"_index":2246,"title":{},"body":{"index.html":{}}}],["running",{"_index":2279,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":675,"title":{},"body":{"injectables/CacheInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":678,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["récupère",{"_index":1661,"title":{},"body":{"injectables/RedisService.html":{}}}],["récupérer",{"_index":625,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/PaymentService.html":{}}}],["réinitialis",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{}}}],["réinitialisation",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{}}}],["réinitialiser",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{}}}],["résultat",{"_index":1658,"title":{},"body":{"injectables/RedisService.html":{}}}],["réussie",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["salvage",{"_index":2116,"title":{},"body":{"index.html":{}}}],["same",{"_index":1136,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/PaymentService.html":{},"injectables/WhatsAppService.html":{}}}],["sans",{"_index":1338,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentService.html":{}}}],["scan",{"_index":775,"title":{},"body":{"injectables/CacheService.html":{}}}],["scan:${pattern",{"_index":772,"title":{},"body":{"injectables/CacheService.html":{}}}],["schedule",{"_index":2128,"title":{},"body":{"index.html":{}}}],["scheduledat",{"_index":287,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["scheduling",{"_index":2135,"title":{},"body":{"index.html":{}}}],["schema",{"_index":602,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["schemas",{"_index":2308,"title":{},"body":{"index.html":{}}}],["script",{"_index":2293,"title":{},"body":{"index.html":{}}}],["seconds",{"_index":748,"title":{},"body":{"injectables/CacheService.html":{},"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["secret",{"_index":459,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretkey",{"_index":1561,"title":{},"body":{"injectables/PaymentService.html":{}}}],["secretorkey",{"_index":1314,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["self",{"_index":2193,"title":{},"body":{"index.html":{}}}],["send",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"controllers/UserController.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["sender",{"_index":1139,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["sending",{"_index":1144,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["sendotp",{"_index":1092,"title":{},"body":{"injectables/EvolutionApiService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/TwilioService.html":{},"controllers/UserController.html":{},"injectables/WhatsAppService.html":{}}}],["sendotp(@param('id",{"_index":1961,"title":{},"body":{"controllers/UserController.html":{}}}],["sendotp(id",{"_index":1937,"title":{},"body":{"controllers/UserController.html":{}}}],["sendotp(phone",{"_index":1096,"title":{},"body":{"injectables/EvolutionApiService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["sendphoneverificationotp",{"_index":1974,"title":{},"body":{"injectables/UserService.html":{}}}],["sendphoneverificationotp(userid",{"_index":1981,"title":{},"body":{"injectables/UserService.html":{}}}],["sends",{"_index":2160,"title":{},"body":{"index.html":{}}}],["sent",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["separately",{"_index":2292,"title":{},"body":{"index.html":{}}}],["serialized",{"_index":1676,"title":{},"body":{"injectables/RedisService.html":{}}}],["server",{"_index":2195,"title":{},"body":{"index.html":{}}}],["serveur",{"_index":1744,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/FirebaseAdminService.html":{},"injectables/PaymentService.html":{},"index.html":{}}}],["serviceaccount",{"_index":1271,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["services",{"_index":2225,"title":{},"body":{"index.html":{}}}],["services(this.servicesid",{"_index":1835,"title":{},"body":{"injectables/TwilioService.html":{}}}],["servicesid",{"_index":1816,"title":{},"body":{"injectables/TwilioService.html":{}}}],["session",{"_index":1541,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["session.id",{"_index":1814,"title":{},"body":{"injectables/StripeService.html":{}}}],["session.url",{"_index":1548,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["session_id",{"_index":1382,"title":{},"body":{"controllers/PaymentController.html":{}}}],["session_id)'})@apiresponse({status",{"_index":1377,"title":{},"body":{"controllers/PaymentController.html":{}}}],["sessionid",{"_index":1396,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["set",{"_index":1652,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["set(key",{"_index":1669,"title":{},"body":{"injectables/RedisService.html":{}}}],["setmetadata",{"_index":656,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"interfaces/CacheableOptions.html":{}}}],["setmetadata(cache_evict_key",{"_index":661,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"miscellaneous/variables.html":{}}}],["setmetadata(cache_prefix_key",{"_index":2375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(cacheable_key",{"_index":788,"title":{},"body":{"interfaces/CacheableOptions.html":{},"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":2398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":744,"title":{},"body":{"injectables/CacheService.html":{}}}],["setting",{"_index":2339,"title":{},"body":{"index.html":{}}}],["setup",{"_index":2234,"title":{},"body":{"index.html":{}}}],["si",{"_index":856,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/DocumentResponseDto.html":{},"injectables/RedisService.html":{}}}],["sid",{"_index":1145,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["side",{"_index":2218,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":461,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{}}}],["simple'})@apiresponse({status",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["simplified",{"_index":767,"title":{},"body":{"injectables/CacheService.html":{}}}],["single",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{}}}],["sms",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TwilioService.html":{}}}],["sms.interface",{"_index":1104,"title":{},"body":{"injectables/EvolutionApiService.html":{},"modules/SmsModule.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["sms/sms.interface",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["sms/sms.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["sms/twilio/twilio.service",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["sms_service",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{},"modules/SmsModule.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["smsmodule",{"_index":47,"title":{"modules/SmsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["smsservice",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["smsserviceinterface",{"_index":476,"title":{"interfaces/SmsServiceInterface.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/TwilioService.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["socket.io",{"_index":2085,"title":{},"body":{"dependencies.html":{}}}],["soft",{"_index":638,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"modules/DocumentModule.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"modules/SmsModule.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"classes/UpdatePaymentModeDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["specific",{"_index":754,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/.../blacklist",{"_index":2368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cache",{"_index":2366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cacheable.decorator.ts",{"_index":2367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exists.decorator.ts",{"_index":2110,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2109,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../prisma.mock.ts",{"_index":2369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":2372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../response.mock.ts",{"_index":2370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sms.interface.ts",{"_index":2373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../unique.decorator.ts",{"_index":2111,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../upload.interface.ts",{"_index":2371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":122,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":123,"title":{},"body":{"injectables/AppService.html":{}}}],["src/appointment/appointment.controller.ts",{"_index":126,"title":{},"body":{"controllers/AppointmentController.html":{},"coverage.html":{}}}],["src/appointment/appointment.controller.ts:26",{"_index":161,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/appointment/appointment.controller.ts:35",{"_index":166,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/appointment/appointment.controller.ts:42",{"_index":170,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/appointment/appointment.controller.ts:50",{"_index":179,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/appointment/appointment.controller.ts:57",{"_index":176,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/appointment/appointment.controller.ts:65",{"_index":147,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/appointment/appointment.controller.ts:73",{"_index":193,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/appointment/appointment.controller.ts:87",{"_index":187,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/appointment/appointment.module.ts",{"_index":243,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["src/appointment/appointment.service.ts",{"_index":245,"title":{},"body":{"injectables/AppointmentService.html":{},"coverage.html":{}}}],["src/appointment/appointment.service.ts:11",{"_index":250,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/appointment.service.ts:119",{"_index":259,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/appointment.service.ts:164",{"_index":266,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/appointment.service.ts:17",{"_index":256,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/appointment.service.ts:41",{"_index":260,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/appointment.service.ts:53",{"_index":264,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/appointment.service.ts:70",{"_index":262,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/appointment.service.ts:85",{"_index":253,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/appointment.service.ts:94",{"_index":268,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/appointment/dto/create",{"_index":849,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"coverage.html":{}}}],["src/appointment/dto/param",{"_index":1342,"title":{},"body":{"classes/ParamAppointmentIdDto.html":{},"classes/ParamUserIdDto.html":{},"coverage.html":{}}}],["src/appointment/dto/update",{"_index":1844,"title":{},"body":{"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:24",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:30",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:48",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:59",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":443,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:118",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:122",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:143",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:31",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:47",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:69",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:94",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/blacklist",{"_index":642,"title":{},"body":{"injectables/BlacklistTokenService.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":1324,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:13",{"_index":1328,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:8",{"_index":1326,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/request",{"_index":1708,"title":{},"body":{"classes/RequestPasswordResetDto.html":{},"coverage.html":{}}}],["src/auth/dto/reset",{"_index":1711,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":1282,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/optional",{"_index":1331,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/refresh",{"_index":1684,"title":{},"body":{"injectables/RefreshTokenService.html":{},"coverage.html":{}}}],["src/cache/cache.module.ts",{"_index":726,"title":{},"body":{"modules/CacheModule.html":{}}}],["src/cache/cache.service.ts",{"_index":729,"title":{},"body":{"injectables/CacheService.html":{},"coverage.html":{}}}],["src/cache/cache.service.ts:15",{"_index":740,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/cache/cache.service.ts:34",{"_index":752,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/cache/cache.service.ts:42",{"_index":756,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/cache/cache.service.ts:5",{"_index":734,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/common/decorator/cache/cache",{"_index":653,"title":{},"body":{"interfaces/CacheEvictOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorator/cache/cacheable.decorator.ts",{"_index":785,"title":{},"body":{"interfaces/CacheableOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorator/public.decorator.ts",{"_index":2063,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorator/validators/exists.decorator.ts",{"_index":1222,"title":{},"body":{"injectables/ExistsConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorator/validators/exists.decorator.ts:15",{"_index":1225,"title":{},"body":{"injectables/ExistsConstraint.html":{}}}],["src/common/decorator/validators/exists.decorator.ts:21",{"_index":1231,"title":{},"body":{"injectables/ExistsConstraint.html":{}}}],["src/common/decorator/validators/exists.decorator.ts:38",{"_index":1228,"title":{},"body":{"injectables/ExistsConstraint.html":{}}}],["src/common/decorator/validators/unique.decorator.ts",{"_index":1840,"title":{},"body":{"injectables/UniqueConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorator/validators/unique.decorator.ts:15",{"_index":1841,"title":{},"body":{"injectables/UniqueConstraint.html":{}}}],["src/common/decorator/validators/unique.decorator.ts:21",{"_index":1843,"title":{},"body":{"injectables/UniqueConstraint.html":{}}}],["src/common/decorator/validators/unique.decorator.ts:38",{"_index":1842,"title":{},"body":{"injectables/UniqueConstraint.html":{}}}],["src/common/interceptor/cache.interceptor.ts",{"_index":663,"title":{},"body":{"injectables/CacheInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptor/cache.interceptor.ts:22",{"_index":667,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["src/common/interceptor/cache.interceptor.ts:28",{"_index":671,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["src/document/document.controller.ts",{"_index":565,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"coverage.html":{}}}],["src/document/document.controller.ts:103",{"_index":1004,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/document/document.controller.ts:116",{"_index":1012,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/document/document.controller.ts:131",{"_index":1008,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/document/document.controller.ts:74",{"_index":1018,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/document/document.controller.ts:90",{"_index":1002,"title":{},"body":{"controllers/DocumentController.html":{}}}],["src/document/document.module.ts",{"_index":1022,"title":{},"body":{"modules/DocumentModule.html":{}}}],["src/document/document.service.ts",{"_index":1045,"title":{},"body":{"injectables/DocumentService.html":{},"coverage.html":{}}}],["src/document/document.service.ts:13",{"_index":1046,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/document/document.service.ts:21",{"_index":1054,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/document/document.service.ts:54",{"_index":1048,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/document/document.service.ts:66",{"_index":1049,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/document/document.service.ts:80",{"_index":1052,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/document/document.service.ts:93",{"_index":1051,"title":{},"body":{"injectables/DocumentService.html":{}}}],["src/document/dto/create",{"_index":907,"title":{},"body":{"classes/CreateDocumentDto.html":{},"coverage.html":{}}}],["src/document/dto/document",{"_index":1024,"title":{},"body":{"classes/DocumentResponseDto.html":{},"coverage.html":{}}}],["src/document/dto/param",{"_index":1347,"title":{},"body":{"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"coverage.html":{}}}],["src/document/dto/update",{"_index":1856,"title":{},"body":{"classes/UpdateDocumentDto.html":{},"coverage.html":{}}}],["src/firebase/firebase",{"_index":1261,"title":{},"body":{"injectables/FirebaseAdminService.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":2065,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/payment",{"_index":967,"title":{},"body":{"classes/CreatePaymentModeDto.html":{},"controllers/PaymentModeController.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"classes/UpdatePaymentModeDto.html":{},"coverage.html":{}}}],["src/payment/dto/create",{"_index":938,"title":{},"body":{"classes/CreatePaymentDto.html":{},"coverage.html":{}}}],["src/payment/payment",{"_index":1475,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"coverage.html":{}}}],["src/payment/payment.controller.ts",{"_index":1353,"title":{},"body":{"controllers/PaymentController.html":{},"coverage.html":{}}}],["src/payment/payment.controller.ts:38",{"_index":1367,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/payment/payment.controller.ts:48",{"_index":1370,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/payment/payment.controller.ts:64",{"_index":1387,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/payment/payment.controller.ts:82",{"_index":1385,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/payment/payment.controller.ts:90",{"_index":1395,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/payment/payment.module.ts",{"_index":1467,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/payment/payment.service.ts",{"_index":1507,"title":{},"body":{"injectables/PaymentService.html":{},"coverage.html":{}}}],["src/payment/payment.service.ts:102",{"_index":1513,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/payment/payment.service.ts:114",{"_index":1512,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/payment/payment.service.ts:144",{"_index":1515,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/payment/payment.service.ts:16",{"_index":1510,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/payment/payment.service.ts:9",{"_index":1509,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/payment/payment.service.ts:90",{"_index":1511,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/payment/stripe/stripe.service.ts",{"_index":1784,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/payment/stripe/stripe.service.ts:20",{"_index":1786,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/payment/stripe/stripe.service.ts:27",{"_index":1789,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/payment/stripe/stripe.service.ts:40",{"_index":1788,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/payment/stripe/stripe.service.ts:46",{"_index":1787,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/payment/stripe/stripe.service.ts:7",{"_index":1791,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/payment/stripe/stripe.service.ts:8",{"_index":1785,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/prisma/prisma.module.ts",{"_index":1621,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service.ts",{"_index":1623,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:10",{"_index":1626,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:18",{"_index":1628,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:30",{"_index":1627,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/redis/redis.module.ts",{"_index":1648,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/redis/redis.service.ts",{"_index":1650,"title":{},"body":{"injectables/RedisService.html":{},"coverage.html":{}}}],["src/redis/redis.service.ts:10",{"_index":1668,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:18",{"_index":1670,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:30",{"_index":1664,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:36",{"_index":1666,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:45",{"_index":1656,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:6",{"_index":1654,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/sms/evolution",{"_index":1084,"title":{},"body":{"injectables/EvolutionApiService.html":{},"coverage.html":{}}}],["src/sms/sms.interface.ts",{"_index":1781,"title":{},"body":{"interfaces/SmsServiceInterface.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/sms/sms.interface.ts:2",{"_index":1782,"title":{},"body":{"interfaces/SmsServiceInterface.html":{}}}],["src/sms/sms.interface.ts:3",{"_index":1783,"title":{},"body":{"interfaces/SmsServiceInterface.html":{}}}],["src/sms/sms.module.ts",{"_index":1776,"title":{},"body":{"modules/SmsModule.html":{}}}],["src/sms/twilio/twilio.service.ts",{"_index":1815,"title":{},"body":{"injectables/TwilioService.html":{},"coverage.html":{}}}],["src/sms/twilio/twilio.service.ts:26",{"_index":1818,"title":{},"body":{"injectables/TwilioService.html":{}}}],["src/sms/twilio/twilio.service.ts:32",{"_index":1819,"title":{},"body":{"injectables/TwilioService.html":{}}}],["src/sms/twilio/twilio.service.ts:8",{"_index":1821,"title":{},"body":{"injectables/TwilioService.html":{}}}],["src/sms/twilio/twilio.service.ts:9",{"_index":1817,"title":{},"body":{"injectables/TwilioService.html":{}}}],["src/sms/whatsapp/whatsapp.service.ts",{"_index":2036,"title":{},"body":{"injectables/WhatsAppService.html":{},"coverage.html":{}}}],["src/sms/whatsapp/whatsapp.service.ts:10",{"_index":2041,"title":{},"body":{"injectables/WhatsAppService.html":{}}}],["src/sms/whatsapp/whatsapp.service.ts:11",{"_index":2037,"title":{},"body":{"injectables/WhatsAppService.html":{}}}],["src/sms/whatsapp/whatsapp.service.ts:31",{"_index":2038,"title":{},"body":{"injectables/WhatsAppService.html":{}}}],["src/sms/whatsapp/whatsapp.service.ts:58",{"_index":2039,"title":{},"body":{"injectables/WhatsAppService.html":{}}}],["src/sms/whatsapp/whatsapp.service.ts:9",{"_index":2040,"title":{},"body":{"injectables/WhatsAppService.html":{}}}],["src/test/mocks/blacklist",{"_index":2068,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test/mocks/prisma.mock.ts",{"_index":2071,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test/mocks/response.mock.ts",{"_index":2073,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/upload/cloudinary/cloudinary.service.ts",{"_index":790,"title":{},"body":{"injectables/CloudinaryService.html":{},"coverage.html":{}}}],["src/upload/cloudinary/cloudinary.service.ts:10",{"_index":795,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/upload/cloudinary/cloudinary.service.ts:21",{"_index":804,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/upload/cloudinary/cloudinary.service.ts:45",{"_index":801,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/upload/cloudinary/cloudinary.service.ts:55",{"_index":797,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/upload/interfaces/upload.interface.ts",{"_index":1253,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/upload/interfaces/upload.interface.ts:13",{"_index":1257,"title":{},"body":{"interfaces/FileStorageService.html":{}}}],["src/upload/interfaces/upload.interface.ts:18",{"_index":1255,"title":{},"body":{"interfaces/FileStorageService.html":{}}}],["src/upload/interfaces/upload.interface.ts:8",{"_index":1259,"title":{},"body":{"interfaces/FileStorageService.html":{}}}],["src/upload/upload.module.ts",{"_index":1871,"title":{},"body":{"modules/UploadModule.html":{}}}],["src/upload/upload.service.ts",{"_index":1873,"title":{},"body":{"injectables/UploadService.html":{},"coverage.html":{}}}],["src/upload/upload.service.ts:15",{"_index":1886,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:18",{"_index":1893,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:19",{"_index":1878,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:25",{"_index":1881,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:31",{"_index":1883,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:37",{"_index":1891,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:64",{"_index":1888,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:80",{"_index":1879,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/user/dto/create",{"_index":978,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":1863,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/verify",{"_index":2019,"title":{},"body":{"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":1928,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:32",{"_index":1932,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:39",{"_index":1934,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:46",{"_index":1935,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:54",{"_index":1943,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:61",{"_index":1936,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:68",{"_index":1941,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:75",{"_index":1948,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":1968,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":1973,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:105",{"_index":1985,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:12",{"_index":1976,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:21",{"_index":1977,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:40",{"_index":1978,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:49",{"_index":1979,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:62",{"_index":1983,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:79",{"_index":1980,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:93",{"_index":1982,"title":{},"body":{"injectables/UserService.html":{}}}],["src/validation/exception/exception.service.ts",{"_index":1173,"title":{},"body":{"injectables/ExceptionService.html":{},"coverage.html":{}}}],["src/validation/exception/exception.service.ts:11",{"_index":1181,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:14",{"_index":1194,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:23",{"_index":1187,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:28",{"_index":1191,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:33",{"_index":1189,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:38",{"_index":1197,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:9",{"_index":1184,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/response/response.interface.ts",{"_index":1720,"title":{},"body":{"interfaces/Response.html":{},"coverage.html":{}}}],["src/validation/exception/response/response.service.ts",{"_index":1724,"title":{},"body":{"injectables/ResponseService.html":{},"coverage.html":{}}}],["src/validation/exception/response/response.service.ts:15",{"_index":1739,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:24",{"_index":1733,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:33",{"_index":1746,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:41",{"_index":1754,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:49",{"_index":1752,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:57",{"_index":1735,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:6",{"_index":1757,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:67",{"_index":1743,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:74",{"_index":1760,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:81",{"_index":1750,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/validation.module.ts",{"_index":1998,"title":{},"body":{"modules/ValidationModule.html":{}}}],["src/validation/validation.service.ts",{"_index":2002,"title":{},"body":{"injectables/ValidationService.html":{},"coverage.html":{}}}],["src/validation/validation.service.ts:9",{"_index":2005,"title":{},"body":{"injectables/ValidationService.html":{}}}],["st",{"_index":863,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["start",{"_index":2280,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2252,"title":{},"body":{"index.html":{}}}],["start:prodtesting",{"_index":2254,"title":{},"body":{"index.html":{}}}],["started",{"_index":2115,"title":{"index.html":{}},"body":{}}],["state",{"_index":865,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["statements",{"_index":2048,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":217,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/EvolutionApiService.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentService.html":{},"classes/UpdateAppointmentDto.html":{},"controllers/UserController.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["statuscode",{"_index":1722,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["statut",{"_index":1848,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["stop",{"_index":2284,"title":{},"body":{"index.html":{}}}],["storage",{"_index":2158,"title":{},"body":{"index.html":{}}}],["store",{"_index":1130,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["stored",{"_index":1140,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/RefreshTokenService.html":{},"injectables/WhatsAppService.html":{}}}],["stored.expiresat",{"_index":1704,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["stored.revoked",{"_index":1703,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["storedcode",{"_index":1167,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["stores",{"_index":2166,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":1309,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":446,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/jwt.strategy.ts",{"_index":1301,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["strategy/jwt.strategy.ts:21",{"_index":1305,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategy/jwt.strategy.ts:8",{"_index":1303,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stripe",{"_index":1376,"title":{},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"dependencies.html":{},"index.html":{}}}],["stripe(process.env.stripe_secret_key",{"_index":1793,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe(secretkey",{"_index":1564,"title":{},"body":{"injectables/PaymentService.html":{}}}],["stripe.checkout.sessions.retrieve(sessionid",{"_index":1568,"title":{},"body":{"injectables/PaymentService.html":{}}}],["stripe/stripe.service",{"_index":1468,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/PaymentProcessorFactory.html":{}}}],["stripeservice",{"_index":1466,"title":{"injectables/StripeService.html":{}},"body":{"modules/PaymentModule.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/StripeService.html":{},"coverage.html":{},"overview.html":{}}}],["stripesession",{"_index":1567,"title":{},"body":{"injectables/PaymentService.html":{}}}],["stripesession.amount_total",{"_index":1604,"title":{},"body":{"injectables/PaymentService.html":{}}}],["stripesession.metadata",{"_index":1585,"title":{},"body":{"injectables/PaymentService.html":{}}}],["stripesession.payment_status",{"_index":1573,"title":{},"body":{"injectables/PaymentService.html":{}}}],["strongpassword123",{"_index":987,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["strongpassword123'})@isstring()@minlength(6",{"_index":1327,"title":{},"body":{"classes/LoginDto.html":{}}}],["structure",{"_index":2319,"title":{},"body":{"index.html":{}}}],["sub",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["submits",{"_index":2186,"title":{},"body":{"index.html":{}}}],["succeeded",{"_index":1799,"title":{},"body":{"injectables/StripeService.html":{}}}],["success",{"_index":1391,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["success(data",{"_index":1756,"title":{},"body":{"injectables/ResponseService.html":{}}}],["success_url",{"_index":1811,"title":{},"body":{"injectables/StripeService.html":{}}}],["successful",{"_index":1141,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["successfully",{"_index":218,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["successfully'})@apiresponse({status",{"_index":144,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["successfully.'})@apibody({type",{"_index":1931,"title":{},"body":{"controllers/UserController.html":{}}}],["successfully.'})@apiresponse({status",{"_index":1364,"title":{},"body":{"controllers/PaymentController.html":{}}}],["successurl",{"_index":1486,"title":{},"body":{"interfaces/PaymentProcessor.html":{},"injectables/StripeService.html":{}}}],["successurl}?session_id={checkout_session_id",{"_index":1812,"title":{},"body":{"injectables/StripeService.html":{}}}],["succès",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["succès.'})@get('/success",{"_index":1394,"title":{},"body":{"controllers/PaymentController.html":{}}}],["sum",{"_index":1537,"title":{},"body":{"injectables/PaymentService.html":{}}}],["summary",{"_index":216,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":1293,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PrismaService.html":{}}}],["super(options",{"_index":2017,"title":{},"body":{"injectables/ValidationService.html":{}}}],["super.canactivate(context",{"_index":1300,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["support",{"_index":2355,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":1540,"title":{},"body":{"injectables/PaymentService.html":{}}}],["supports",{"_index":2336,"title":{},"body":{"index.html":{}}}],["suppression",{"_index":846,"title":{},"body":{"injectables/CloudinaryService.html":{},"classes/DocumentResponseDto.html":{},"injectables/UserService.html":{}}}],["supprim",{"_index":639,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/UploadService.html":{}}}],["supprimer",{"_index":637,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/UploadService.html":{}}}],["supprimés",{"_index":1595,"title":{},"body":{"injectables/PaymentService.html":{}}}],["suv",{"_index":889,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["svg",{"_index":2356,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2139,"title":{},"body":{"index.html":{}}}],["switch",{"_index":1502,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["switchmap",{"_index":677,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["switchmap((cached",{"_index":711,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["system",{"_index":2124,"title":{},"body":{"index.html":{}}}],["sécuris",{"_index":997,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sécurisé'})@isstring()@isnotempty()@minlength(6",{"_index":988,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["t",{"_index":741,"title":{},"body":{"injectables/CacheService.html":{},"injectables/RedisService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"index.html":{}}}],["table",{"_index":2077,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2076,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":676,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["tap(async",{"_index":715,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["target",{"_index":689,"title":{},"body":{"injectables/CacheInterceptor.html":{},"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{},"injectables/ValidationService.html":{}}}],["temporary",{"_index":324,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["temppassword",{"_index":328,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["test",{"_index":781,"title":{},"body":{"injectables/CacheService.html":{},"index.html":{}}}],["test:covdocker",{"_index":2259,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2258,"title":{},"body":{"index.html":{}}}],["testing",{"_index":2009,"title":{},"body":{"injectables/ValidationService.html":{},"index.html":{}}}],["tests",{"_index":2256,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["textmessage",{"_index":1158,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.$connect",{"_index":1635,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":1644,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$use(loggingmiddleware(this.eventemitter",{"_index":1634,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.apikey",{"_index":1123,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.appointmentservice.cancel(params.id",{"_index":234,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.create(createappointmentdto",{"_index":220,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.createasguest(createguestappointmentdto",{"_index":223,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findall",{"_index":224,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findbyuserid(params.userid",{"_index":231,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findone(params.id",{"_index":228,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findpendingappointmentswithoutpayment",{"_index":238,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.update(params.id",{"_index":236,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(logindto.email",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(token",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refresh(body.refreshtoken",{"_index":426,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.requestpasswordreset(dto.email",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword(dto.email",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.basedir",{"_index":1897,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.baseurl",{"_index":1121,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.baseurl}/message/sendtext/${this.instancename",{"_index":1157,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.blacklistservice.blacklist(token",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.blacklistservice.isblacklisted(token",{"_index":1298,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["this.client",{"_index":1832,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["this.client.messages.create",{"_index":2042,"title":{},"body":{"injectables/WhatsAppService.html":{}}}],["this.client.verify.v2",{"_index":1834,"title":{},"body":{"injectables/TwilioService.html":{}}}],["this.config.get('evolution_api_base_url",{"_index":1107,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.config.get('evolution_api_instance",{"_index":1108,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.config.get('evolution_api_key",{"_index":1109,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.config.get('jwt_refresh_expires_days",{"_index":1699,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.config.get('twilio_account_sid",{"_index":1824,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["this.config.get('twilio_auth_token",{"_index":1826,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["this.config.get('twilio_service_sid",{"_index":1827,"title":{},"body":{"injectables/TwilioService.html":{}}}],["this.config.get('whatsapp_from_number",{"_index":1110,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["this.documentservice.findall(userid",{"_index":624,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["this.documentservice.findone(params.id",{"_index":629,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["this.documentservice.remove(params.id",{"_index":641,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["this.documentservice.update(params.id",{"_index":635,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["this.documentservice.upload(userid",{"_index":614,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["this.ensuredirectory(folder",{"_index":1908,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.exceptionservice.createvalidationexception(errors",{"_index":2016,"title":{},"body":{"injectables/ValidationService.html":{}}}],["this.factory.getprocessor(paymentmode.name",{"_index":1538,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.formaterrors(errors",{"_index":1203,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.fromnumber",{"_index":1124,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["this.fromnumber.startswith",{"_index":1151,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.fromnumber.substring(1",{"_index":1152,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.generatefilename(file.originalname",{"_index":1910,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.generatetoken(user.id",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatetoken(valid.userid",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.get(key",{"_index":1682,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.httpresponseservice.badrequest",{"_index":1204,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.httpresponseservice.forbidden(message",{"_index":1208,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.httpresponseservice.internalerror(message",{"_index":1212,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.httpresponseservice.notfound(message",{"_index":1210,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.instancename",{"_index":1122,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["this.jwtservice.decode(token",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error",{"_index":822,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["this.logger.error(`refund",{"_index":1800,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.logger.error(`échec",{"_index":1920,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.logger.log",{"_index":829,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["this.logger.warn",{"_index":845,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["this.options",{"_index":2018,"title":{},"body":{"injectables/ValidationService.html":{}}}],["this.otp_expiration_time",{"_index":1135,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["this.paymentmodeservice.create(createpaymentmodedto",{"_index":1434,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["this.paymentmodeservice.findall",{"_index":1435,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["this.paymentmodeservice.findone(id",{"_index":1437,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["this.paymentmodeservice.remove(id",{"_index":1441,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["this.paymentmodeservice.update(id",{"_index":1439,"title":{},"body":{"controllers/PaymentModeController.html":{}}}],["this.paymentservice.createpayment(dto",{"_index":1405,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.paymentservice.getalltransactions",{"_index":1406,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.paymentservice.gettransaction(transactionid",{"_index":1411,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.paymentservice.gettransactionsbyuser(userid",{"_index":1408,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.paymentservice.handlestripesuccess(sessionid",{"_index":1418,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.prisma",{"_index":1237,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["this.prisma.appointment.create",{"_index":277,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.prisma.appointment.findmany",{"_index":295,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/PaymentService.html":{}}}],["this.prisma.appointment.findunique",{"_index":301,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.prisma.appointment.update",{"_index":311,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.prisma.blacklistedtoken.create",{"_index":651,"title":{},"body":{"injectables/BlacklistTokenService.html":{}}}],["this.prisma.blacklistedtoken.findunique",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{}}}],["this.prisma.document.create",{"_index":1069,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.prisma.document.findmany",{"_index":1074,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.prisma.document.findunique",{"_index":1079,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.prisma.document.update",{"_index":1081,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.prisma.payment.create",{"_index":1613,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.prisma.payment.findfirst",{"_index":1527,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.prisma.payment.findmany",{"_index":1551,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.prisma.payment.findunique",{"_index":1552,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.prisma.paymentgroup.create",{"_index":1607,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.prisma.paymentgroup.findunique",{"_index":1581,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.prisma.paymentmode.create",{"_index":1454,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["this.prisma.paymentmode.findfirst",{"_index":1457,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["this.prisma.paymentmode.findmany",{"_index":1456,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["this.prisma.paymentmode.findunique",{"_index":1532,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.prisma.paymentmode.update",{"_index":1460,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["this.prisma.refreshtoken.create",{"_index":1700,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.prisma.refreshtoken.findunique",{"_index":1702,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["this.prisma.user.create",{"_index":334,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.findfirst",{"_index":320,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.findmany",{"_index":1991,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.prisma[modelname",{"_index":1244,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["this.prisma[modelname].findfirst",{"_index":1247,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["this.redis.del(key",{"_index":1680,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redis.exists(key",{"_index":1681,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redis.get(key",{"_index":1674,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redis.set(key",{"_index":1678,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redisservice.cacheable",{"_index":771,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.redisservice.cacheable('users:all",{"_index":1990,"title":{},"body":{"injectables/UserService.html":{}}}],["this.redisservice.del('users:all",{"_index":1988,"title":{},"body":{"injectables/UserService.html":{}}}],["this.redisservice.del(fullkey",{"_index":706,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["this.redisservice.del(key",{"_index":764,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.redisservice.del(rediskey",{"_index":1171,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["this.redisservice.get(key",{"_index":762,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.redisservice.get(rediskey",{"_index":1168,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["this.redisservice.set(fullkey",{"_index":716,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["this.redisservice.set(key",{"_index":763,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.redisservice.set(rediskey",{"_index":1134,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{}}}],["this.reflector.get",{"_index":693,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["this.reflector.get(cache_prefix_key",{"_index":691,"title":{},"body":{"injectables/CacheInterceptor.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":1295,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refreshtokenservice.create(user.id",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.refreshtokenservice.rotate(refreshtoken",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.refreshtokenservice.validate(refreshtoken",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.responseservice.badrequest",{"_index":1062,"title":{},"body":{"injectables/DocumentService.html":{},"injectables/PaymentService.html":{}}}],["this.responseservice.badrequest(['aucun",{"_index":1057,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.responseservice.badrequest(['invalid",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["this.responseservice.badrequest(['metadata",{"_index":1589,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.responseservice.badrequest(['payment",{"_index":1574,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.responseservice.conflict('token",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.responseservice.created",{"_index":294,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/PaymentModeService.html":{}}}],["this.responseservice.created(responsedto",{"_index":1072,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.responseservice.created(user",{"_index":1989,"title":{},"body":{"injectables/UserService.html":{}}}],["this.responseservice.inactiveaccount(user.id",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.responseservice.notfound('appointment",{"_index":310,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.responseservice.notfound('aucun",{"_index":1596,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.responseservice.notfound('erreur",{"_index":1608,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.responseservice.notfound('payment",{"_index":1458,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["this.responseservice.notfound('transaction",{"_index":1560,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.responseservice.notfound('user",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.responseservice.success",{"_index":299,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/UserService.html":{}}}],["this.responseservice.success(appointment",{"_index":313,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.responseservice.success(null",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DocumentService.html":{},"injectables/UserService.html":{}}}],["this.responseservice.success(paymentmode",{"_index":1459,"title":{},"body":{"injectables/PaymentModeService.html":{}}}],["this.responseservice.success(responsedto",{"_index":1080,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.responseservice.success(responsedtos",{"_index":1077,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.responseservice.success(user",{"_index":1993,"title":{},"body":{"injectables/UserService.html":{}}}],["this.responseservice.success(users",{"_index":1992,"title":{},"body":{"injectables/UserService.html":{}}}],["this.responseservice.unauthorized('aucun",{"_index":1297,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.responseservice.unauthorized('identifiants",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.responseservice.unauthorized('token",{"_index":1299,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.servicesid",{"_index":1831,"title":{},"body":{"injectables/TwilioService.html":{}}}],["this.set(key",{"_index":1683,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.smsservice.sendotp(user.phone",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.smsservice.verifyotp(user.phone",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.stripe",{"_index":1792,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.checkout.sessions.create",{"_index":1802,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.checkout.sessions.retrieve(transactionid",{"_index":1801,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.refunds.create",{"_index":1796,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice",{"_index":1505,"title":{},"body":{"injectables/PaymentProcessorFactory.html":{}}}],["this.uploadservice.deletefile(doc.fileurl",{"_index":1082,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.uploadservice.uploadsingle",{"_index":1067,"title":{},"body":{"injectables/DocumentService.html":{}}}],["this.uploadsingle(file",{"_index":838,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":1955,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.findall",{"_index":1956,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.findone(id",{"_index":1957,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.remove(id",{"_index":1960,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.sendphoneverificationotp(id",{"_index":1962,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.update(id",{"_index":1959,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.verifyphoneotp(dto",{"_index":1964,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validateuser(email",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["three",{"_index":2266,"title":{},"body":{"index.html":{}}}],["throw",{"_index":308,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/WhatsAppService.html":{}}}],["time",{"_index":746,"title":{},"body":{"injectables/CacheService.html":{},"index.html":{}}}],["timestamp",{"_index":1723,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["title",{"_index":607,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["titlenumber",{"_index":283,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["titles",{"_index":2169,"title":{},"body":{"index.html":{}}}],["titre",{"_index":906,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["titre'})@isstring()@isnotempty",{"_index":881,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{}}}],["token",{"_index":214,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"controllers/DocumentController.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/RefreshTokenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["token.mock.ts",{"_index":2069,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["token.service",{"_index":449,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["token.service.ts",{"_index":643,"title":{},"body":{"injectables/BlacklistTokenService.html":{},"injectables/RefreshTokenService.html":{},"coverage.html":{}}}],["token.service.ts:12",{"_index":648,"title":{},"body":{"injectables/BlacklistTokenService.html":{}}}],["token.service.ts:14",{"_index":1688,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["token.service.ts:22",{"_index":650,"title":{},"body":{"injectables/BlacklistTokenService.html":{}}}],["token.service.ts:35",{"_index":1693,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["token.service.ts:47",{"_index":1690,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["token.service.ts:6",{"_index":645,"title":{},"body":{"injectables/BlacklistTokenService.html":{}}}],["token.service.ts:8",{"_index":1686,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["token/blacklist",{"_index":448,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{}}}],["token/refresh",{"_index":450,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenService.html":{},"coverage.html":{}}}],["tokens",{"_index":2178,"title":{},"body":{"index.html":{}}}],["ton",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["total",{"_index":1600,"title":{},"body":{"injectables/PaymentService.html":{}}}],["totalamount",{"_index":1535,"title":{},"body":{"injectables/PaymentService.html":{}}}],["tracks",{"_index":2171,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":1373,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"miscellaneous/variables.html":{}}}],["transactionid",{"_index":1381,"title":{},"body":{"controllers/PaymentController.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["transactions",{"_index":1369,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"index.html":{}}}],["transactions'})@apiresponse({status",{"_index":1368,"title":{},"body":{"controllers/PaymentController.html":{}}}],["transfer",{"_index":2325,"title":{},"body":{"index.html":{}}}],["transform",{"_index":2011,"title":{},"body":{"injectables/ValidationService.html":{}}}],["transformation",{"_index":2230,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":2091,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["transformoptions",{"_index":2013,"title":{},"body":{"injectables/ValidationService.html":{}}}],["transmis",{"_index":1611,"title":{},"body":{"injectables/PaymentService.html":{}}}],["trop",{"_index":1063,"title":{},"body":{"injectables/DocumentService.html":{}}}],["trouv",{"_index":627,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"injectables/PaymentService.html":{}}}],["trouvée",{"_index":1755,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["true",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"classes/CreatePaymentDto.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["true})@min(0.01",{"_index":947,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["try",{"_index":839,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/EvolutionApiService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/PrismaService.html":{},"injectables/StripeService.html":{},"injectables/UploadService.html":{}}}],["ts",{"_index":273,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreatePaymentModeDto.html":{},"injectables/PaymentProcessorFactory.html":{}}}],["ttl",{"_index":786,"title":{},"body":{"interfaces/CacheableOptions.html":{}}}],["ttlseconds",{"_index":738,"title":{},"body":{"injectables/CacheService.html":{},"injectables/RedisService.html":{}}}],["tu",{"_index":1971,"title":{},"body":{"modules/UserModule.html":{}}}],["twilio",{"_index":1822,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{},"dependencies.html":{}}}],["twilio(accountsid",{"_index":1833,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["twilio.twilio",{"_index":1820,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["twilio/twilio.service",{"_index":1777,"title":{},"body":{"modules/SmsModule.html":{}}}],["twilio_account_sid",{"_index":1828,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["twilio_auth_token",{"_index":1829,"title":{},"body":{"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["twilio_service_sid",{"_index":1830,"title":{},"body":{"injectables/TwilioService.html":{}}}],["twilioservice",{"_index":59,"title":{"injectables/TwilioService.html":{}},"body":{"modules/AppModule.html":{},"modules/SmsModule.html":{},"injectables/TwilioService.html":{},"coverage.html":{},"overview.html":{}}}],["type",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/BlacklistTokenService.html":{},"interfaces/CacheEvictOptions.html":{},"injectables/CacheInterceptor.html":{},"injectables/CacheService.html":{},"interfaces/CacheableOptions.html":{},"injectables/CloudinaryService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/PaymentProcessorFactory.html":{},"injectables/PaymentService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/StripeService.html":{},"injectables/TwilioService.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{}}}],["types",{"_index":1866,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["typescript",{"_index":306,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/DocumentService.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PaymentModeService.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["téléphone",{"_index":929,"title":{},"body":{"classes/CreateGuestAppointmentDto.html":{},"classes/CreateUserDto.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["téléphone'})@isphonenumber()@isnotempty()@unique('user",{"_index":991,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ui",{"_index":2307,"title":{},"body":{"index.html":{}}}],["un",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["unauthorized",{"_index":1731,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["unauthorized(message",{"_index":1759,"title":{},"body":{"injectables/ResponseService.html":{}}}],["unauthorizedexception",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenService.html":{}}}],["unauthorizedexception('refresh",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('user",{"_index":1317,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":911,"title":{},"body":{"classes/CreateDocumentDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{}}}],["undefined})@apiresponse({status",{"_index":1017,"title":{},"body":{"controllers/DocumentController.html":{}}}],["unique",{"_index":974,"title":{},"body":{"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"classes/DocumentResponseDto.html":{},"injectables/UniqueConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["unique('paymentmode",{"_index":976,"title":{},"body":{"classes/CreatePaymentModeDto.html":{}}}],["unique('user",{"_index":995,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["unique(model",{"_index":2113,"title":{},"body":{"miscellaneous/functions.html":{}}}],["uniqueconstraint",{"_index":1839,"title":{"injectables/UniqueConstraint.html":{}},"body":{"injectables/UniqueConstraint.html":{},"coverage.html":{}}}],["unit",{"_index":2255,"title":{},"body":{"index.html":{}}}],["unit_amount",{"_index":1807,"title":{},"body":{"injectables/StripeService.html":{}}}],["unknown",{"_index":254,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/DocumentService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/JwtStrategy.html":{},"controllers/PaymentController.html":{},"injectables/PaymentModeService.html":{},"injectables/PaymentService.html":{},"injectables/TwilioService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["unknown_sid",{"_index":1162,"title":{},"body":{"injectables/EvolutionApiService.html":{}}}],["unlicensed",{"_index":2364,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheInterceptor.html":{},"injectables/CloudinaryService.html":{},"injectables/ExistsConstraint.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/PrismaService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenService.html":{},"modules/SmsModule.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{}}}],["unused",{"_index":842,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/UploadService.html":{}}}],["up",{"_index":2242,"title":{},"body":{"index.html":{}}}],["update",{"_index":136,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["update(@param('id",{"_index":1958,"title":{},"body":{"controllers/UserController.html":{}}}],["update(id",{"_index":267,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/DocumentService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(params",{"_index":189,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentController.html":{}}}],["updateappointmentdto",{"_index":190,"title":{"classes/UpdateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["updated",{"_index":192,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated.'})@apibody({type",{"_index":1942,"title":{},"body":{"controllers/UserController.html":{}}}],["updatedappointment",{"_index":317,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updatedat",{"_index":594,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["updatedocumentdto",{"_index":581,"title":{"classes/UpdateDocumentDto.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{},"classes/UpdateDocumentDto.html":{},"coverage.html":{}}}],["updatedocumentdto})@apiresponse({status",{"_index":1011,"title":{},"body":{"controllers/DocumentController.html":{}}}],["updatepaymentmodedto",{"_index":1429,"title":{"classes/UpdatePaymentModeDto.html":{}},"body":{"controllers/PaymentModeController.html":{},"injectables/PaymentModeService.html":{},"classes/UpdatePaymentModeDto.html":{},"coverage.html":{}}}],["updates",{"_index":2189,"title":{},"body":{"index.html":{}}}],["updateuserdto",{"_index":1862,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["upload",{"_index":609,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/CloudinaryService.html":{},"controllers/DocumentController.html":{},"injectables/DocumentService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["upload(file",{"_index":1013,"title":{},"body":{"controllers/DocumentController.html":{}}}],["upload(userid",{"_index":1053,"title":{},"body":{"injectables/DocumentService.html":{}}}],["upload/interfaces/upload.interface",{"_index":1055,"title":{},"body":{"injectables/DocumentService.html":{}}}],["upload/upload.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/DocumentModule.html":{}}}],["upload/upload.service",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["uploaded",{"_index":1066,"title":{},"body":{"injectables/DocumentService.html":{}}}],["uploaded.url",{"_index":1070,"title":{},"body":{"injectables/DocumentService.html":{}}}],["uploadedat",{"_index":1027,"title":{},"body":{"classes/DocumentResponseDto.html":{}}}],["uploadedfile",{"_index":570,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["uploader",{"_index":600,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["uploadfile",{"_index":1877,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadfile(image",{"_index":1885,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadmodule",{"_index":48,"title":{"modules/UploadModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DocumentModule.html":{},"modules/UploadModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["uploadmultiple",{"_index":793,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["uploadmultiple(files",{"_index":799,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"injectables/UploadService.html":{}}}],["uploads",{"_index":1899,"title":{},"body":{"injectables/UploadService.html":{},"index.html":{}}}],["uploads/${relativepath",{"_index":1917,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadservice",{"_index":60,"title":{"injectables/UploadService.html":{}},"body":{"modules/AppModule.html":{},"injectables/DocumentService.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"coverage.html":{},"overview.html":{}}}],["uploadsingle",{"_index":794,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["uploadsingle(file",{"_index":803,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"injectables/UploadService.html":{}}}],["uploadstream",{"_index":820,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadstream.end(file.buffer",{"_index":834,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["url",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"injectables/CloudinaryService.html":{},"classes/DocumentResponseDto.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/StripeService.html":{},"injectables/UploadService.html":{}}}],["usd",{"_index":965,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["usd'})@isstring()@isnotempty",{"_index":954,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["use",{"_index":765,"title":{},"body":{"injectables/CacheService.html":{}}}],["useclass",{"_index":466,"title":{},"body":{"modules/AuthModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{}}}],["used",{"_index":2380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefactory",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useinterceptors",{"_index":571,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":599,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"controllers/DocumentController.html":{}}}],["user",{"_index":174,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"injectables/CacheService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"controllers/DocumentController.html":{},"injectables/JwtStrategy.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":2021,"title":{},"body":{"classes/VerifyOtpDto.html":{},"index.html":{}}}],["user'})@apiresponse({status",{"_index":1930,"title":{},"body":{"controllers/UserController.html":{}}}],["user.controller",{"_index":1969,"title":{},"body":{"modules/UserModule.html":{}}}],["user.deletedat",{"_index":1316,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["user.dto",{"_index":1867,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":979,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:19",{"_index":982,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":992,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":984,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":986,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:44",{"_index":989,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":346,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{}}}],["user.isphoneverified",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":1949,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["user@example.com",{"_index":1329,"title":{},"body":{"classes/LoginDto.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{}}}],["user@example.com'})@isemail()@isnotempty",{"_index":1325,"title":{},"body":{"classes/LoginDto.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{}}}],["usercontroller",{"_index":1927,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":188,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"controllers/DocumentController.html":{},"classes/DocumentResponseDto.html":{},"injectables/DocumentService.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/RefreshTokenService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/variables.html":{}}}],["usermodule",{"_index":49,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["users",{"_index":343,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["users'})@apiresponse({status",{"_index":1933,"title":{},"body":{"controllers/UserController.html":{}}}],["userservice",{"_index":61,"title":{"injectables/UserService.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice",{"_index":1954,"title":{},"body":{"controllers/UserController.html":{}}}],["uses",{"_index":2161,"title":{},"body":{"index.html":{}}}],["using",{"_index":2150,"title":{},"body":{"index.html":{}}}],["utilisateur",{"_index":886,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{}}}],["utilisateur'})@isuuid()@isnotempty()@exists('user",{"_index":1351,"title":{},"body":{"classes/ParamUserIdDto-1.html":{}}}],["utilisée",{"_index":953,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["utilities",{"_index":2228,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":883,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"controllers/PaymentController.html":{},"injectables/RefreshTokenService.html":{},"dependencies.html":{},"index.html":{}}}],["uuid'})@isstring()@isnotempty",{"_index":956,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["v16",{"_index":2237,"title":{},"body":{"index.html":{}}}],["v2",{"_index":806,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["v4",{"_index":1694,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["valid",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["valid.userid",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":1224,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenService.html":{},"injectables/UniqueConstraint.html":{}}}],["validate(payload",{"_index":1304,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(token",{"_index":1692,"title":{},"body":{"injectables/RefreshTokenService.html":{}}}],["validate(value",{"_index":1230,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["validateuser",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":1205,"title":{},"body":{"injectables/ExceptionService.html":{},"index.html":{}}}],["validation.service",{"_index":1999,"title":{},"body":{"modules/ValidationModule.html":{}}}],["validation/exception/exception.service",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["validation/exception/response/response.service",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BlacklistTokenService.html":{},"modules/DocumentModule.html":{},"injectables/DocumentService.html":{},"injectables/JwtAuthGuard.html":{},"modules/PaymentModeModule.html":{},"injectables/PaymentModeService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["validation/validation.module",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["validation/validation.service",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["validationarguments",{"_index":1227,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["validationerror",{"_index":1193,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/ValidationService.html":{}}}],["validationmodule",{"_index":50,"title":{"modules/ValidationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ValidationModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["validationoptions",{"_index":1233,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{},"miscellaneous/functions.html":{}}}],["validationpipe",{"_index":2003,"title":{},"body":{"injectables/ValidationService.html":{}}}],["validationpipeoptions",{"_index":2006,"title":{},"body":{"injectables/ValidationService.html":{}}}],["validationservice",{"_index":62,"title":{"injectables/ValidationService.html":{}},"body":{"modules/AppModule.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"overview.html":{}}}],["validator",{"_index":902,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/CreatePaymentModeDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionService.html":{},"injectables/ExistsConstraint.html":{},"classes/LoginDto.html":{},"classes/ParamAppointmentIdDto.html":{},"classes/ParamDocumentIdDto.html":{},"classes/ParamUserIdDto.html":{},"classes/ParamUserIdDto-1.html":{},"classes/RequestPasswordResetDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UniqueConstraint.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentDto.html":{},"injectables/ValidationService.html":{},"classes/VerifyOtpDto.html":{},"dependencies.html":{},"index.html":{}}}],["validatorconstraint",{"_index":1234,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["validatorconstraintinterface",{"_index":1235,"title":{},"body":{"injectables/ExistsConstraint.html":{},"injectables/UniqueConstraint.html":{}}}],["value",{"_index":743,"title":{},"body":{"injectables/CacheService.html":{},"injectables/CloudinaryService.html":{},"injectables/EvolutionApiService.html":{},"injectables/ExistsConstraint.html":{},"injectables/RedisService.html":{},"injectables/ResponseService.html":{},"injectables/StripeService.html":{},"injectables/UniqueConstraint.html":{},"injectables/UploadService.html":{},"injectables/ValidationService.html":{},"injectables/WhatsAppService.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":2275,"title":{},"body":{"index.html":{}}}],["variable",{"_index":2059,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1120,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/EvolutionApiService.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":843,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/UploadService.html":{}}}],["vehicle",{"_index":2122,"title":{},"body":{"index.html":{}}}],["vehicletype",{"_index":281,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["verification",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["verificationchecks.create",{"_index":1838,"title":{},"body":{"injectables/TwilioService.html":{}}}],["verifications.create",{"_index":1836,"title":{},"body":{"injectables/TwilioService.html":{}}}],["verified",{"_index":344,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["verifies",{"_index":2188,"title":{},"body":{"index.html":{}}}],["verify",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"index.html":{}}}],["verifying",{"_index":2027,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["verifyotp",{"_index":1093,"title":{},"body":{"injectables/EvolutionApiService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/TwilioService.html":{},"controllers/UserController.html":{},"injectables/WhatsAppService.html":{}}}],["verifyotp(@body",{"_index":1963,"title":{},"body":{"controllers/UserController.html":{}}}],["verifyotp(dto",{"_index":1944,"title":{},"body":{"controllers/UserController.html":{}}}],["verifyotp(phone",{"_index":1098,"title":{},"body":{"injectables/EvolutionApiService.html":{},"interfaces/SmsServiceInterface.html":{},"injectables/TwilioService.html":{},"injectables/WhatsAppService.html":{}}}],["verifyotpdto",{"_index":1945,"title":{"classes/VerifyOtpDto.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["verifyphoneotp",{"_index":1975,"title":{},"body":{"injectables/UserService.html":{}}}],["verifyphoneotp(dto",{"_index":1984,"title":{},"body":{"injectables/UserService.html":{}}}],["verifytoken",{"_index":1264,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["verifytoken(idtoken",{"_index":1266,"title":{},"body":{"injectables/FirebaseAdminService.html":{}}}],["vers",{"_index":1549,"title":{},"body":{"injectables/PaymentService.html":{}}}],["version",{"_index":2362,"title":{},"body":{"properties.html":{}}}],["veuillez",{"_index":1773,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["vide",{"_index":828,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["view",{"_index":2286,"title":{},"body":{"index.html":{}}}],["vin",{"_index":279,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["vin)'})@isstring()@isnotempty",{"_index":895,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{}}}],["void",{"_index":737,"title":{},"body":{"injectables/CacheService.html":{},"injectables/ExceptionService.html":{},"injectables/FirebaseAdminService.html":{},"injectables/RedisService.html":{},"injectables/UploadService.html":{}}}],["volumes",{"_index":2273,"title":{},"body":{"index.html":{}}}],["volumineux",{"_index":1064,"title":{},"body":{"injectables/DocumentService.html":{}}}],["votre",{"_index":1769,"title":{},"body":{"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["vous",{"_index":868,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/CreatePaymentDto.html":{},"classes/ParamAppointmentIdDto.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["vous'})@isarray()@arraynotempty()@isnumber",{"_index":946,"title":{},"body":{"classes/CreatePaymentDto.html":{}}}],["vous'})@isuuid()@isnotempty()@exists('appointment",{"_index":1344,"title":{},"body":{"classes/ParamAppointmentIdDto.html":{}}}],["véhicule",{"_index":894,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["véhicule'})@isstring()@isnotempty",{"_index":890,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateGuestAppointmentDto.html":{}}}],["vérifier",{"_index":1570,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["want",{"_index":2290,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":778,"title":{},"body":{"injectables/CacheService.html":{}}}],["web",{"_index":2222,"title":{},"body":{"index.html":{}}}],["whatsapp",{"_index":1138,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["whatsapp/whatsapp.service",{"_index":1779,"title":{},"body":{"modules/SmsModule.html":{}}}],["whatsapp:${phone",{"_index":2044,"title":{},"body":{"injectables/WhatsAppService.html":{}}}],["whatsapp:${this.fromnumber",{"_index":2043,"title":{},"body":{"injectables/WhatsAppService.html":{}}}],["whatsapp_from_number",{"_index":1118,"title":{},"body":{"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["whatsappservice",{"_index":1778,"title":{"injectables/WhatsAppService.html":{}},"body":{"modules/SmsModule.html":{},"injectables/WhatsAppService.html":{},"coverage.html":{}}}],["whitelist",{"_index":2010,"title":{},"body":{"injectables/ValidationService.html":{}}}],["without",{"_index":184,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/EvolutionApiService.html":{},"injectables/WhatsAppService.html":{},"index.html":{}}}],["works",{"_index":2295,"title":{},"body":{"index.html":{}}}],["world",{"_index":125,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":2298,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":2239,"title":{},"body":{"index.html":{}}}],["yes",{"_index":1258,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/PaymentProcessor.html":{},"injectables/RedisService.html":{},"miscellaneous/functions.html":{}}}],["zoom",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/DocumentModule.html":{},"modules/PaymentModeModule.html":{},"modules/PaymentModule.html":{},"modules/PrismaModule.html":{},"modules/RedisModule.html":{},"modules/SmsModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDocumentModule\n\nDocumentModule\n\nAppModule -->\n\nDocumentModule->AppModule\n\n\n\n\n\nPaymentModeModule\n\nPaymentModeModule\n\nAppModule -->\n\nPaymentModeModule->AppModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAppModule -->\n\nSmsModule->AppModule\n\n\n\n\n\nUploadModule\n\nUploadModule\n\nAppModule -->\n\nUploadModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nValidationModule\n\nValidationModule\n\nAppModule -->\n\nValidationModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppModule -->\n\nAppointmentService->AppModule\n\n\n\n\n\nDocumentService\n\nDocumentService\n\nAppModule -->\n\nDocumentService->AppModule\n\n\n\n\n\nExceptionService\n\nExceptionService\n\nAppModule -->\n\nExceptionService->AppModule\n\n\n\n\n\nFirebaseAdminService\n\nFirebaseAdminService\n\nAppModule -->\n\nFirebaseAdminService->AppModule\n\n\n\n\n\nPaymentModeService\n\nPaymentModeService\n\nAppModule -->\n\nPaymentModeService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nAppModule -->\n\nRedisService->AppModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nAppModule -->\n\nResponseService->AppModule\n\n\n\n\n\nTwilioService\n\nTwilioService\n\nAppModule -->\n\nTwilioService->AppModule\n\n\n\n\n\nUploadService\n\nUploadService\n\nAppModule -->\n\nUploadService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nAppModule -->\n\nValidationService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            AppointmentService\n                        \n                        \n                            DocumentService\n                        \n                        \n                            ExceptionService\n                        \n                        \n                            FirebaseAdminService\n                        \n                        \n                            PaymentModeService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            RedisService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            TwilioService\n                        \n                        \n                            UploadService\n                        \n                        \n                            UserService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            PaymentModeController\n                        \n                        \n                            AppointmentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppointmentModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            DocumentModule\n                        \n                        \n                            PaymentModeModule\n                        \n                        \n                            PaymentModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            SmsModule\n                        \n                        \n                            UploadModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            ValidationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PrismaService } from './prisma/prisma.service';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { RedisService } from './redis/redis.service'; // ton service perso Redis\nimport { RedisModule } from '@nestjs-modules/ioredis'; // package officiel\nimport { ValidationService } from './validation/validation.service';\nimport { ExceptionService } from './validation/exception/exception.service';\nimport { ResponseService } from './validation/exception/response/response.service';\nimport { ValidationModule } from './validation/validation.module';\nimport { UserModule } from './user/user.module';\nimport { UserService } from './user/user.service';\nimport { TwilioService } from './sms/twilio/twilio.service';\nimport { SmsModule } from './sms/sms.module';\nimport { AuthModule } from './auth/auth.module';\nimport { PaymentModeService } from './payment-mode/payment-mode.service';\nimport { PaymentModeController } from './payment-mode/payment-mode.controller';\nimport { PaymentModeModule } from './payment-mode/payment-mode.module';\nimport { UploadModule } from './upload/upload.module';\nimport { UploadService } from './upload/upload.service';\nimport { DocumentService } from './document/document.service';\nimport { DocumentModule } from './document/document.module';\nimport { PaymentModule } from './payment/payment.module';\nimport { AppointmentModule } from './appointment/appointment.module';\nimport { AppointmentController } from './appointment/appointment.controller';\nimport { AppointmentService } from './appointment/appointment.service';\n\nimport { FirebaseAdminService } from './firebase/firebase-admin/firebase-admin.service';\n\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    RedisModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'single',\n        url: configService.get('REDIS_URL'),\n      }),\n    }),\n    PrismaModule,\n    ValidationModule,\n    UserModule,\n    SmsModule,\n    AuthModule,\n    PaymentModeModule,\n    UploadModule,\n    DocumentModule,\n    PaymentModule,\n    AppointmentModule,\n  ],\n  controllers: [AppController, PaymentModeController, AppointmentController],\n  providers: [\n    AppService,\n    PrismaService,\n    RedisService,\n    ValidationService,\n    ExceptionService,\n    ResponseService,\n    UserService,\n    TwilioService,\n    PaymentModeService,\n    UploadService,\n    DocumentService,\n    AppointmentService,\n    FirebaseAdminService,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppointmentController.html":{"url":"controllers/AppointmentController.html","title":"controller - AppointmentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppointmentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/appointment/appointment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                appointment\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                cancel\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                createAsGuest\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findByUserId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                getPendingAppointmentsWithoutPayment\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        cancel\n                        \n                    \n                \n            \n            \n                \n                        \n                    cancel(params: ParamAppointmentIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id/cancel')@ApiOperation({summary: 'Cancel an appointment'})@ApiResponse({status: 200, description: 'Appointment canceled successfully'})@ApiResponse({status: 404, description: 'Appointment not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/appointment/appointment.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            ParamAppointmentIdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new appointment'})@ApiResponse({status: 201, description: 'Appointment created successfully'})@ApiResponse({status: 400, description: 'Bad request'})\n                \n            \n\n                    \n                        \n                            Defined in src/appointment/appointment.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        createAsGuest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAsGuest(createGuestAppointmentDto: CreateGuestAppointmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('guest')@ApiOperation({summary: 'Create a new appointment as a guest'})@ApiResponse({status: 201, description: 'Appointment created successfully'})@ApiResponse({status: 400, description: 'Bad request'})\n                \n            \n\n                    \n                        \n                            Defined in src/appointment/appointment.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createGuestAppointmentDto\n                                            \n                                                            CreateGuestAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all appointments'})@ApiResponse({status: 200, description: 'Return all appointments'})\n                \n            \n\n                    \n                        \n                            Defined in src/appointment/appointment.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUserId(params: ParamUserIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@ApiOperation({summary: 'Get appointments by user ID'})@ApiResponse({status: 200, description: 'Return the appointments for the user'})\n                \n            \n\n                    \n                        \n                            Defined in src/appointment/appointment.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            ParamUserIdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(params: ParamAppointmentIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get appointment by ID'})@ApiResponse({status: 200, description: 'Return the appointment'})@ApiResponse({status: 404, description: 'Appointment not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/appointment/appointment.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            ParamAppointmentIdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getPendingAppointmentsWithoutPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPendingAppointmentsWithoutPayment(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId/pending/no-payment')@ApiOperation({summary: 'Get pending appointments without payments by user ID'})@ApiResponse({status: 200, description: 'Pending appointments without payments returned'})\n                \n            \n\n                    \n                        \n                            Defined in src/appointment/appointment.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(params: ParamAppointmentIdDto, updateAppointmentDto: UpdateAppointmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOperation({summary: 'Update an appointment'})@ApiResponse({status: 200, description: 'Appointment updated successfully'})@ApiResponse({status: 404, description: 'Appointment not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/appointment/appointment.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            ParamAppointmentIdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, Put } from '@nestjs/common';\nimport {\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { AppointmentService } from './appointment.service';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { CreateGuestAppointmentDto } from './dto/create-guest-appointment.dto';\nimport { ParamAppointmentIdDto } from './dto/param-appointment-id.dto';\nimport { ParamUserIdDto } from './dto/param-user-id.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { Public } from '../common/decorator/public.decorator';\n\n@ApiTags('Appointments')\n@ApiBearerAuth('access-token')\n@Controller('appointment')\nexport class AppointmentController {\n  constructor(private readonly appointmentService: AppointmentService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new appointment' })\n  @ApiResponse({ status: 201, description: 'Appointment created successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request' })\n  create(@Body() createAppointmentDto: CreateAppointmentDto) {\n    return this.appointmentService.create(createAppointmentDto);\n  }\n\n  @Public()\n  @Post('guest')\n  @ApiOperation({ summary: 'Create a new appointment as a guest' })\n  @ApiResponse({ status: 201, description: 'Appointment created successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request' })\n  createAsGuest(@Body() createGuestAppointmentDto: CreateGuestAppointmentDto) {\n    return this.appointmentService.createAsGuest(createGuestAppointmentDto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all appointments' })\n  @ApiResponse({ status: 200, description: 'Return all appointments' })\n  findAll() {\n    return this.appointmentService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get appointment by ID' })\n  @ApiResponse({ status: 200, description: 'Return the appointment' })\n  @ApiResponse({ status: 404, description: 'Appointment not found' })\n  findOne(@Param() params: ParamAppointmentIdDto) {\n    return this.appointmentService.findOne(params.id);\n  }\n\n  @Get('user/:userId')\n  @ApiOperation({ summary: 'Get appointments by user ID' })\n  @ApiResponse({ status: 200, description: 'Return the appointments for the user' })\n  findByUserId(@Param() params: ParamUserIdDto) {\n    return this.appointmentService.findByUserId(params.userId);\n  }\n\n  @Put(':id/cancel')\n  @ApiOperation({ summary: 'Cancel an appointment' })\n  @ApiResponse({ status: 200, description: 'Appointment canceled successfully' })\n  @ApiResponse({ status: 404, description: 'Appointment not found' })\n  cancel(@Param() params: ParamAppointmentIdDto) {\n    return this.appointmentService.cancel(params.id);\n  }\n\n  @Put(':id')\n  @ApiOperation({ summary: 'Update an appointment' })\n  @ApiResponse({ status: 200, description: 'Appointment updated successfully' })\n  @ApiResponse({ status: 404, description: 'Appointment not found' })\n  update(\n    @Param() params: ParamAppointmentIdDto,\n    @Body() updateAppointmentDto: UpdateAppointmentDto,\n  ) {\n    return this.appointmentService.update(params.id, updateAppointmentDto);\n  }\n  @Get('user/:userId/pending/no-payment')\n  @ApiOperation({\n    summary: 'Get pending appointments without payments by user ID',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Pending appointments without payments returned',\n  })\n  getPendingAppointmentsWithoutPayment(@Param('userId') userId: string) {\n    return this.appointmentService.findPendingAppointmentsWithoutPayment(\n      userId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppointmentModule.html":{"url":"modules/AppointmentModule.html","title":"module - AppointmentModule","body":"\n                   \n\n\n\n\n    Modules\n    AppointmentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_imports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppointmentModule -->\n\nPrismaModule->AppointmentModule\n\n\n\n\n\nAppointmentService \n\nAppointmentService \n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nAppointmentModule -->\n\nResponseService->AppointmentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/appointment/appointment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppointmentService\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppointmentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppointmentController } from './appointment.controller';\nimport { AppointmentService } from './appointment.service';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { PrismaModule } from '../prisma/prisma.module';\n@Module({\n  imports: [PrismaModule],\n  controllers: [AppointmentController],\n  providers: [AppointmentService, ResponseService],\n  exports: [AppointmentService],\n})\nexport class AppointmentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppointmentService.html":{"url":"injectables/AppointmentService.html","title":"injectable - AppointmentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppointmentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/appointment/appointment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cancel\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createAsGuest\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByUserId\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPendingAppointmentsWithoutPayment\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/appointment/appointment.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cancel\n                        \n                    \n                \n            \n            \n                \n                        \n                    cancel(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/appointment/appointment.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: CreateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/appointment/appointment.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAsGuest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAsGuest(data: CreateGuestAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/appointment/appointment.service.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateGuestAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/appointment/appointment.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUserId(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/appointment/appointment.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/appointment/appointment.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findPendingAppointmentsWithoutPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPendingAppointmentsWithoutPayment(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/appointment/appointment.service.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateAppointmentDto: UpdateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/appointment/appointment.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { AppointmentStatus } from '@prisma/client';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { CreateGuestAppointmentDto } from './dto/create-guest-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class AppointmentService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly responseService: ResponseService,\n  ) {}\n\n  async create(data: CreateAppointmentDto) {\n    // @ts-ignore\n    // @ts-ignore\n    // @ts-ignore\n    const appointment = await this.prisma.appointment.create({\n      data: {\n        userId: data.userId,\n        vin: data.vin,\n        vehicleType: data.vehicleType,\n        titleNumber: data.titleNumber,\n        receiptNumber: data.receiptNumber,\n        scheduledAt: data.scheduledAt,\n        location: data.location,\n        issuesDate: data.issuesDate,\n        status: AppointmentStatus.PENDING,\n      },\n    });\n\n    return this.responseService.created(\n      appointment,\n      'Appointment created with status PENDING.',\n    );\n  }\n\n  async findAll() {\n    const appointments = await this.prisma.appointment.findMany({\n      where: { deletedAt: null },\n      include: { user: true, payments: true },\n    });\n\n    return this.responseService.success(\n      appointments,\n      'Appointments retrieved.',\n    );\n  }\n\n  async findOne(id: string) {\n    const appointment = await this.prisma.appointment.findUnique({\n      where: { id },\n      include: { user: true, payments: true },\n    });\n\n    if (!appointment) {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw this.responseService.notFound('Appointment not found.');\n    }\n\n    return this.responseService.success(\n      appointment,\n      'Appointment retrieved.',\n    );\n  }\n\n  async findByUserId(userId: string) {\n    const appointments = await this.prisma.appointment.findMany({\n      where: {\n        userId,\n        deletedAt: null,\n      },\n      include: { payments: true },\n    });\n\n    return this.responseService.success(\n      appointments,\n      'Appointments for user retrieved.',\n    );\n  }\n\n  async cancel(id: string) {\n    const appointment = await this.prisma.appointment.update({\n      where: { id },\n      data: { status: AppointmentStatus.CANCELED },\n    });\n\n    return this.responseService.success(appointment, 'Appointment canceled.');\n  }\n\n  async update(id: string, updateAppointmentDto: UpdateAppointmentDto) {\n    // Check if appointment exists\n    const existingAppointment = await this.prisma.appointment.findUnique({\n      where: { id },\n    });\n\n    if (!existingAppointment) {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw this.responseService.notFound('Appointment not found.');\n    }\n\n    // Update the appointment\n    const updatedAppointment = await this.prisma.appointment.update({\n      where: { id },\n      data: {\n        ...updateAppointmentDto,\n      },\n    });\n\n    return this.responseService.success(\n      updatedAppointment,\n      'Appointment updated successfully.',\n    );\n  }\n\n  async createAsGuest(data: CreateGuestAppointmentDto) {\n    // Check if user with this email already exists\n    let user = await this.prisma.user.findFirst({\n      where: { email: data.email, deletedAt: null },\n    });\n\n    // If user doesn't exist, create a temporary user\n    if (!user) {\n      // Generate a random password for the temporary user\n      const tempPassword = Math.random().toString(36).slice(-8);\n      const hashedPassword = await bcrypt.hash(tempPassword, 10);\n\n      user = await this.prisma.user.create({\n        data: {\n          email: data.email,\n          firstName: data.firstName,\n          lastName: data.lastName,\n          phone: data.phone,\n          password: hashedPassword,\n          isPhoneVerified: false, // Guest users are not verified by default\n        },\n      });\n    }\n\n    // Create the appointment\n    const appointment = await this.prisma.appointment.create({\n      data: {\n        userId: user.id,\n        vin: data.vin,\n        vehicleType: data.vehicleType,\n        titleNumber: data.titleNumber,\n        receiptNumber: data.receiptNumber,\n        scheduledAt: data.scheduledAt,\n        location: data.location,\n\n        status: AppointmentStatus.PENDING,\n      },\n      include: { user: true },\n    });\n\n    return this.responseService.created(\n      appointment,\n      'Guest appointment created with status PENDING.',\n    );\n  }\n  async findPendingAppointmentsWithoutPayment(userId: string) {\n    const appointments = await this.prisma.appointment.findMany({\n      where: {\n        userId,\n        status: AppointmentStatus.PENDING,\n        deletedAt: null,\n        payments: {\n          none: {}, // aucun paiement associé\n        },\n      },\n    });\n\n    return this.responseService.success(\n      appointments,\n      'Pending appointments without payments retrieved.',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                logout\n                            \n                            \n                                    \n                                    \n                                    \n                                refresh\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                requestPasswordReset\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@ApiOperation({summary: 'Connexion simple'})@ApiResponse({status: 200, description: 'Connexion réussie'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@ApiOperation({summary: 'Déconnexion de l’utilisateur'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('refresh')@ApiOperation({summary: 'Rafraîchir un token JWT'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        requestPasswordReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    requestPasswordReset(dto: RequestPasswordResetDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('request-password-reset')@ApiOperation({summary: 'Demander un code de réinitialisation de mot de passe'})@ApiResponse({status: 200, description: 'Code envoyé avec succès'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            RequestPasswordResetDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(dto: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('reset-password')@ApiOperation({summary: 'Réinitialiser le mot de passe avec le code reçu'})@ApiResponse({status: 200, description: 'Mot de passe réinitialisé avec succès'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n\n  Controller,\n  Post,\n  Body,\n  Headers,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { ResetPasswordDto } from './dto/reset-password.dto';\nimport { RequestPasswordResetDto } from './dto/request-password-reset.dto';\nimport { Public } from '../common/decorator/public.decorator';\n\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Public()\n  @Post('login')\n  @ApiOperation({ summary: 'Connexion simple' })\n  @ApiResponse({ status: 200, description: 'Connexion réussie' })\n  login(@Body() loginDto: LoginDto) {\n    return this.authService.login(loginDto.email, loginDto.password);\n  }\n\n  @Post('logout')\n  @ApiOperation({ summary: 'Déconnexion de l’utilisateur' })\n  logout(@Headers('authorization') authHeader: string) {\n    const token = authHeader.replace('Bearer ', '');\n    return this.authService.logout(token);\n  }\n\n  @Public()\n  @Post('refresh')\n  @ApiOperation({ summary: 'Rafraîchir un token JWT' })\n  refresh(@Body() body: { refreshToken: string }) {\n    return this.authService.refresh(body.refreshToken);\n  }\n\n  @Public()\n  @Post('request-password-reset')\n  @ApiOperation({\n    summary: 'Demander un code de réinitialisation de mot de passe',\n  })\n  @ApiResponse({ status: 200, description: 'Code envoyé avec succès' })\n  requestPasswordReset(@Body() dto: RequestPasswordResetDto) {\n    return this.authService.requestPasswordReset(dto.email);\n  }\n\n  @Public()\n  @Post('reset-password')\n  @ApiOperation({ summary: 'Réinitialiser le mot de passe avec le code reçu' })\n  @ApiResponse({\n    status: 200,\n    description: 'Mot de passe réinitialisé avec succès',\n  })\n  resetPassword(@Body() dto: ResetPasswordDto) {\n    return this.authService.resetPassword(dto.email, dto.code, dto.newPassword);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAuthModule -->\n\nSmsModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nBlacklistTokenService\n\nBlacklistTokenService\n\nAuthModule -->\n\nBlacklistTokenService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRefreshTokenService\n\nRefreshTokenService\n\nAuthModule -->\n\nRefreshTokenService->AuthModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nAuthModule -->\n\nResponseService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            BlacklistTokenService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            RefreshTokenService\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            SmsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // src/auth/auth.module.ts\nimport { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { UserModule } from '../user/user.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtStrategy } from './jwt-strategy/jwt.strategy';\nimport { AuthService } from './auth.service';\nimport { BlacklistTokenService } from './blacklist-token/blacklist-token.service';\nimport { RefreshTokenService } from './refresh-token/refresh-token.service';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { AuthController } from './auth.controller';\nimport { JwtAuthGuard } from './jwt-auth/jwt-auth.guard';\nimport { APP_GUARD } from '@nestjs/core';\nimport { SmsModule } from '../sms/sms.module';\n\n@Module({\n  imports: [\n    PrismaModule,\n    UserModule,\n    ConfigModule,\n    SmsModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: (config: ConfigService) => ({\n        secret: config.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: config.get('JWT_EXPIRES_IN', '15m'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [\n    AuthService,\n    JwtStrategy,\n    BlacklistTokenService,\n    RefreshTokenService,\n    ResponseService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard, // 👈 Guard global ici\n    },\n  ],\n  controllers: [AuthController],\n  exports: [AuthService, JwtModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                requestPasswordReset\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, jwtService: JwtService, config: ConfigService, blacklistService: BlacklistTokenService, refreshTokenService: RefreshTokenService, responseService: ResponseService, smsService: SmsServiceInterface)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        blacklistService\n                                                  \n                                                        \n                                                                        BlacklistTokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenService\n                                                  \n                                                        \n                                                                        RefreshTokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        smsService\n                                                  \n                                                        \n                                                                        SmsServiceInterface\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        requestPasswordReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    requestPasswordReset(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(email: string, code: string, newPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:143\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  BadRequestException,\n  ConflictException,\n  HttpException,\n  Inject,\n} from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { ConfigService } from '@nestjs/config';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { BlacklistTokenService } from './blacklist-token/blacklist-token.service';\nimport { RefreshTokenService } from './refresh-token/refresh-token.service';\nimport { SMS_SERVICE, SmsServiceInterface } from '../sms/sms.interface';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly jwtService: JwtService,\n    private readonly config: ConfigService,\n    private readonly blacklistService: BlacklistTokenService,\n    private readonly refreshTokenService: RefreshTokenService,\n    private readonly responseService: ResponseService,\n    @Inject(SMS_SERVICE)\n    private readonly smsService: SmsServiceInterface,\n  ) {}\n\n  async validateUser(email: string, password: string) {\n    const user = await this.prisma.user.findFirst({\n      where: { email, deletedAt: null },\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    if (!user || !(await bcrypt.compare(password, user.password))) {\n      throw new HttpException(\n        this.responseService.unauthorized('Identifiants invalides'),\n        401,\n      );\n    }\n\n    return user;\n  }\n\n  async login(email: string, password: string) {\n    const user = await this.validateUser(email, password);\n\n    if (!user.isPhoneVerified) {\n      throw new HttpException(\n        this.responseService.inactiveAccount(user.id),\n        400,\n      );\n    }\n    const token = await this.generateToken(user.id);\n    const refreshToken = await this.refreshTokenService.create(user.id);\n\n    return this.responseService.success(\n      {\n        user,\n        token,\n        refreshToken,\n      },\n      'Connexion réussie',\n    );\n  }\n\n  async logout(token: string) {\n    const alreadyBlacklisted = await this.prisma.blacklistedToken.findUnique({\n      where: { token },\n    });\n\n    if (alreadyBlacklisted) {\n      throw new ConflictException(\n        this.responseService.conflict('Token already blacklisted'),\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const decoded = this.jwtService.decode(token);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (!decoded || typeof decoded !== 'object' || !decoded.exp) {\n      throw new BadRequestException('Token invalid');\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    await this.blacklistService.blacklist(token, new Date(decoded.exp * 1000));\n\n    return this.responseService.success(null, 'Déconnexion réussie');\n  }\n\n  async refresh(refreshToken: string) {\n    const valid = await this.refreshTokenService.validate(refreshToken);\n\n    if (!valid) {\n      throw new UnauthorizedException('Refresh token invalid');\n    }\n\n    const token = await this.generateToken(valid.userId);\n    const newRefresh = await this.refreshTokenService.rotate(refreshToken);\n\n    const user = await this.prisma.user.findUnique({\n      where: { id: valid.userId },\n    });\n\n    return this.responseService.success(\n      {\n        user,\n        token,\n        refreshToken: newRefresh.token,\n      },\n      'Token rafraîchi',\n    );\n  }\n\n  private async generateToken(userId: string): Promise {\n    return this.jwtService.signAsync({ sub: userId });\n  }\n\n  async requestPasswordReset(email: string) {\n    const user = await this.prisma.user.findFirst({\n      where: { email, deletedAt: null },\n    });\n\n    if (!user) {\n      throw new HttpException(\n        this.responseService.notFound('User not found'),\n        404,\n      );\n    }\n\n    // Send OTP via SMS\n    await this.smsService.sendOtp(user.phone);\n\n    return this.responseService.success(\n      null,\n      'Password reset code sent to your phone via SMS',\n    );\n  }\n\n  async resetPassword(email: string, code: string, newPassword: string) {\n    const user = await this.prisma.user.findFirst({\n      where: { email, deletedAt: null },\n    });\n\n    if (!user) {\n      throw new HttpException(\n        this.responseService.notFound('User not found'),\n        404,\n      );\n    }\n\n    // Verify OTP code\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const result = await this.smsService.verifyOtp(user.phone, code);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (result.status !== 'approved') {\n      throw new HttpException(\n        this.responseService.badRequest(['Invalid verification code']),\n        400,\n      );\n    }\n\n    // Hash new password\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n\n    // Update password\n    await this.prisma.user.update({\n      where: { id: user.id },\n      data: {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        password: hashedPassword,\n      },\n    });\n\n    return this.responseService.success(null, 'Password reset successfully');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticatedRequest.html":{"url":"interfaces/AuthenticatedRequest.html","title":"interface - AuthenticatedRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticatedRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/document/document.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Get,\n  Patch,\n  Delete,\n  Param,\n  Body,\n  UploadedFile,\n  UseInterceptors,\n  Req,\n} from '@nestjs/common';\nimport { DocumentService } from './document.service';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiBody,\n  ApiConsumes,\n  ApiBearerAuth,\n  ApiResponse,\n} from '@nestjs/swagger';\nimport { CreateDocumentDto } from './dto/create-document.dto';\nimport { UpdateDocumentDto } from './dto/update-document.dto';\nimport { ParamDocumentIdDto } from './dto/param-document-id.dto';\nimport { DocumentResponseDto } from './dto/document-response.dto';\nimport { Request } from 'express';\n\n// Define a custom interface for the authenticated request\ninterface AuthenticatedRequest extends Request {\n  user: {\n    id: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    isPhoneVerified: boolean;\n    codeOtp: string | null;\n    phone: string;\n    password: string;\n    createdAt: Date;\n    updatedAt: Date;\n    deletedAt: Date | null;\n  };\n}\n\n@ApiTags('Documents')\n@ApiBearerAuth('access-token')\n@Controller('documents')\nexport class DocumentController {\n  constructor(private readonly documentService: DocumentService) {}\n\n  @Post('upload')\n  @UseInterceptors(FileInterceptor('file'))\n  @ApiOperation({ summary: 'Uploader un document (auth)' })\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        file: { type: 'string', format: 'binary' },\n        type: {\n          type: 'string',\n          enum: ['LICENSE', 'TITLE', 'RECEIPT'],\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Document uploadé avec succès',\n    type: DocumentResponseDto,\n  })\n  @ApiResponse({ status: 400, description: 'Requête invalide' })\n  upload(\n    @UploadedFile() file: Express.Multer.File,\n    @Body() body: CreateDocumentDto,\n    @Req() req: AuthenticatedRequest,\n  ) {\n    const userId = req.user.id;\n    return this.documentService.upload(userId, file, body.type);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Lister les documents de l’utilisateur connecté' })\n  @ApiResponse({\n    status: 200,\n    description: 'Liste des documents de l\\'utilisateur',\n    type: [DocumentResponseDto],\n  })\n  findAll(@Req() req: AuthenticatedRequest) {\n    const userId = req.user.id;\n    return this.documentService.findAll(userId);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Récupérer un document par ID' })\n  @ApiResponse({\n    status: 200,\n    description: 'Document trouvé',\n    type: DocumentResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Document non trouvé' })\n  findOne(@Param() params: ParamDocumentIdDto) {\n    return this.documentService.findOne(params.id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Mettre à jour le type d’un document' })\n  @ApiBody({ type: UpdateDocumentDto })\n  @ApiResponse({\n    status: 200,\n    description: 'Document mis à jour',\n    type: DocumentResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Document non trouvé' })\n  update(\n    @Param() params: ParamDocumentIdDto,\n    @Body() body: UpdateDocumentDto,\n  ) {\n    return this.documentService.update(params.id, body.type);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Supprimer un document (soft delete)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Document supprimé',\n    type: DocumentResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Document non trouvé' })\n  remove(@Param() params: ParamDocumentIdDto) {\n    return this.documentService.remove(params.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BlacklistTokenService.html":{"url":"injectables/BlacklistTokenService.html","title":"injectable - BlacklistTokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BlacklistTokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/blacklist-token/blacklist-token.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                blacklist\n                            \n                            \n                                    Async\n                                isBlacklisted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, responseservice: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/blacklist-token/blacklist-token.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseservice\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        blacklist\n                        \n                    \n                \n            \n            \n                \n                        \n                    blacklist(token: string, expiresAt: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/blacklist-token/blacklist-token.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresAt\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isBlacklisted\n                        \n                    \n                \n            \n            \n                \n                        \n                    isBlacklisted(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/blacklist-token/blacklist-token.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../../prisma/prisma.service';\nimport { ResponseService } from '../../validation/exception/response/response.service';\n\n@Injectable()\nexport class BlacklistTokenService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private responseservice: ResponseService,\n  ) {}\n\n  async blacklist(token: string, expiresAt: Date): Promise {\n\n    await this.prisma.blacklistedToken.create({\n      data: {\n        token,\n        expiresAt,\n      },\n    });\n  }\n\n  async isBlacklisted(token: string): Promise {\n    const blacklisted = await this.prisma.blacklistedToken.findUnique({\n      where: { token },\n    });\n\n    return !!blacklisted;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CacheEvictOptions.html":{"url":"interfaces/CacheEvictOptions.html","title":"interface - CacheEvictOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CacheEvictOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/decorator/cache/cache-evict.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:     string | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | \n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { SetMetadata } from '@nestjs/common';\n\nexport const CACHE_EVICT_KEY = 'CACHE_EVICT_METADATA';\n\nexport interface CacheEvictOptions {\n  key: string | ((params: any) => string);\n}\n\nexport const CacheEvict = (options: CacheEvictOptions) =>\n  SetMetadata(CACHE_EVICT_KEY, options);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CacheInterceptor.html":{"url":"injectables/CacheInterceptor.html","title":"injectable - CacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptor/cache.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptor/cache.interceptor.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptor/cache.interceptor.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable, from } from 'rxjs';\nimport { tap, switchMap } from 'rxjs/operators';\nimport { Reflector } from '@nestjs/core';\nimport { RedisService } from '../../redis/redis.service';\nimport { CACHE_PREFIX_KEY } from '../decorator/cache/cache-prefix.decorator';\nimport {\n  CACHEABLE_KEY,\n  CacheableOptions,\n} from '../decorator/cache/cacheable.decorator';\nimport {\n  CACHE_EVICT_KEY,\n  CacheEvictOptions,\n} from '../decorator/cache/cache-evict.decorator';\n\n@Injectable()\nexport class CacheInterceptor implements NestInterceptor {\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly redisService: RedisService,\n  ) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const handler = context.getHandler();\n    const target = context.getClass();\n\n    const prefix = this.reflector.get(CACHE_PREFIX_KEY, target);\n    const cacheable = this.reflector.get(\n      CACHEABLE_KEY,\n      handler,\n    );\n    const evict = this.reflector.get(\n      CACHE_EVICT_KEY,\n      handler,\n    );\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const request = context.switchToHttp().getRequest();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n    const params = request.params;\n\n    // ✳️ Evict Mode\n    if (evict) {\n      const key =\n        typeof evict.key === 'function' ? evict.key(params) : evict.key;\n      const fullKey = prefix ? `${prefix}:${key}` : key;\n\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      return next.handle().pipe(tap(() => this.redisService.del(fullKey)));\n    }\n\n    // ✅ Cache Mode\n    if (cacheable) {\n      const key =\n        typeof cacheable.key === 'function'\n          ? cacheable.key(params)\n          : cacheable.key;\n      const fullKey = prefix ? `${prefix}:${key}` : key;\n\n      return from(this.redisService.get(fullKey)).pipe(\n        switchMap((cached) => {\n          if (cached !== null) return from([cached]);\n\n          return next.handle().pipe(\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            tap(async (result) => {\n              await this.redisService.set(fullKey, result, cacheable.ttl);\n            }),\n          );\n        }),\n      );\n    }\n\n    // 🟡 Default, passthrough\n    return next.handle();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CacheModule.html":{"url":"modules/CacheModule.html","title":"module - CacheModule","body":"\n                   \n\n\n\n\n    Modules\n    CacheModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CacheModule\n\n\n\ncluster_CacheModule_imports\n\n\n\ncluster_CacheModule_exports\n\n\n\ncluster_CacheModule_providers\n\n\n\n\nRedisModule\n\nRedisModule\n\n\n\nCacheModule\n\nCacheModule\n\nCacheModule -->\n\nRedisModule->CacheModule\n\n\n\n\n\nCacheService \n\nCacheService \n\nCacheService  -->\n\nCacheModule->CacheService \n\n\n\n\n\nCacheService\n\nCacheService\n\nCacheModule -->\n\nCacheService->CacheModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cache/cache.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CacheService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CacheService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CacheService } from './cache.service';\nimport { RedisModule } from '../redis/redis.module';\n\n@Module({\n  imports: [RedisModule],\n  providers: [CacheService],\n  exports: [CacheService],\n})\nexport class CacheModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CacheService.html":{"url":"injectables/CacheService.html","title":"injectable - CacheService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CacheService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cache/cache.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getOrSet\n                            \n                            \n                                    Async\n                                invalidate\n                            \n                            \n                                    Async\n                                invalidatePattern\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/cache/cache.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOrSet\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrSet(key: string, fetcher: () => void, ttlSeconds: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cache/cache.service.ts:15\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Gets a value from the cache or sets it if it doesn't exist\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The cache key\n\n                                            \n                                        \n                                        \n                                                fetcher\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    A function that returns the value to cache if not found\n\n                                            \n                                        \n                                        \n                                                ttlSeconds\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    3600\n                                            \n\n                                            \n                                                    Time to live in seconds (default: 1 hour)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The cached value or the result of the fetcher function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        invalidate\n                        \n                    \n                \n            \n            \n                \n                        \n                    invalidate(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cache/cache.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Invalidates a specific cache key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The cache key to invalidate\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        invalidatePattern\n                        \n                    \n                \n            \n            \n                \n                        \n                    invalidatePattern(pattern: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cache/cache.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Invalidates all cache keys matching a pattern\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                pattern\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The pattern to match (e.g., 'user:*')\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RedisService } from '../redis/redis.service';\n\n@Injectable()\nexport class CacheService {\n  constructor(private readonly redisService: RedisService) {}\n\n  /**\n   * Gets a value from the cache or sets it if it doesn't exist\n   * @param key The cache key\n   * @param fetcher A function that returns the value to cache if not found\n   * @param ttlSeconds Time to live in seconds (default: 1 hour)\n   * @returns The cached value or the result of the fetcher function\n   */\n  async getOrSet(\n    key: string,\n    fetcher: () => Promise,\n    ttlSeconds = 3600,\n  ): Promise {\n    const cachedValue = await this.redisService.get(key);\n    if (cachedValue !== null) {\n      return cachedValue;\n    }\n\n    const value = await fetcher();\n    await this.redisService.set(key, value, ttlSeconds);\n    return value;\n  }\n\n  /**\n   * Invalidates a specific cache key\n   * @param key The cache key to invalidate\n   */\n  async invalidate(key: string): Promise {\n    await this.redisService.del(key);\n  }\n\n  /**\n   * Invalidates all cache keys matching a pattern\n   * @param pattern The pattern to match (e.g., 'user:*')\n   */\n  async invalidatePattern(pattern: string): Promise {\n    // Use the cacheable method to get all keys matching the pattern\n    // This is a simplified implementation for demonstration purposes\n    const keys = await this.redisService.cacheable(\n      `scan:${pattern}`,\n      60,\n      async () => {\n        // In a real implementation, you would use Redis SCAN command\n        // to get all keys matching the pattern\n        // For this example, we'll rely on the mock implementation in the test\n        return [];\n      },\n    );\n\n    // Delete each key\n    if (keys && keys.length > 0) {\n      for (const key of keys) {\n        await this.redisService.del(key);\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CacheableOptions.html":{"url":"interfaces/CacheableOptions.html","title":"interface - CacheableOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CacheableOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/decorator/cache/cacheable.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            ttl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:     string | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | \n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ttl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ttl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { SetMetadata } from '@nestjs/common';\n\nexport const CACHEABLE_KEY = 'CACHEABLE_METADATA';\n\nexport interface CacheableOptions {\n  key: string | ((params: any) => string);\n  ttl: number;\n}\n\nexport const Cacheable = (options: CacheableOptions) =>\n  SetMetadata(CACHEABLE_KEY, options);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudinaryService.html":{"url":"injectables/CloudinaryService.html","title":"injectable - CloudinaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CloudinaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/cloudinary/cloudinary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                uploadMultiple\n                            \n                            \n                                    Async\n                                uploadSingle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/upload/cloudinary/cloudinary.service.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(fileId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/cloudinary/cloudinary.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadMultiple(files: Express.Multer.File[], folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/cloudinary/cloudinary.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'documents'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadSingle\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadSingle(file: Express.Multer.File, folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/cloudinary/cloudinary.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'documents'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(CloudinaryService.name)\n                    \n                \n                    \n                        \n                                Defined in src/upload/cloudinary/cloudinary.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { v2 as cloudinary } from 'cloudinary';\nimport {\n  FileStorageService,\n  FileUploadResult,\n} from '../interfaces/upload.interface';\n@Injectable()\nexport class CloudinaryService implements FileStorageService {\n  private logger = new Logger(CloudinaryService.name);\n\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    cloudinary.config({\n      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n      api_key: process.env.CLOUDINARY_API_KEY,\n      api_secret: process.env.CLOUDINARY_API_SECRET,\n    });\n  }\n\n  async uploadSingle(\n    file: Express.Multer.File,\n    folder = 'documents',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const uploadStream = cloudinary.uploader.upload_stream(\n        { folder },\n        (error, result) => {\n          if (error) {\n            this.logger.error(`❌ Erreur Cloudinary: ${JSON.stringify(error)}`);\n            return reject(error);\n          }\n          if (!result) return reject(new Error('Upload vide'));\n\n          this.logger.log(`✅ Upload OK: ${result.public_id}`);\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          resolve({ url: result.secure_url, id: result.public_id });\n        },\n      );\n      uploadStream.end(file.buffer);\n    });\n  }\n\n  async uploadMultiple(\n    files: Express.Multer.File[],\n    folder = 'documents',\n  ): Promise {\n    if (!files?.length) return [];\n    return await Promise.all(\n      files.map((file) => this.uploadSingle(file, folder)),\n    );\n  }\n\n  async deleteFile(fileId: string): Promise {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      await cloudinary.uploader.destroy(fileId);\n      this.logger.log(`🗑️ Fichier supprimé : ${fileId}`);\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (error) {\n      this.logger.warn(`⚠️ Suppression Cloudinary échouée : ${fileId}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAppointmentDto.html":{"url":"classes/CreateAppointmentDto.html","title":"class - CreateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/appointment/dto/create-appointment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                issuesDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                location\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                receiptNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                scheduledAt\n                            \n                            \n                                    \n                                    \n                                    \n                                titleNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                            \n                                    \n                                    \n                                    \n                                vehicleType\n                            \n                            \n                                    \n                                    \n                                    \n                                vin\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        issuesDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiProperty({example: '2025-10-04', description: 'Date d’émission du reçu (si fourni)', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-appointment.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123 Main St, City, State', description: 'Lieu du rendez-vous', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-appointment.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        receiptNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'REC123456', description: 'Numéro de reçu', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-appointment.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        scheduledAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2023-06-15T14:00:00', description: 'Date et heure du rendez-vous', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-appointment.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        titleNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ABC123456', description: 'Numéro du titre'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-appointment.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'uuid-user', description: 'ID de l'utilisateur'})@IsUUID()@IsNotEmpty()@Exists('user', 'id', {message: 'Utilisateur introuvable'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-appointment.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        vehicleType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'SUV', description: 'Type de véhicule'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-appointment.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        vin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '1HGCM82633A123456', description: 'Numéro d'identification du véhicule (VIN)'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-appointment.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, IsUUID, IsOptional } from 'class-validator';\nimport { Exists } from '../../common/decorator/validators/exists.decorator';\n\nexport class CreateAppointmentDto {\n  @ApiProperty({ example: 'uuid-user', description: \"ID de l'utilisateur\" })\n  @IsUUID()\n  @IsNotEmpty()\n  @Exists('user', 'id', { message: 'Utilisateur introuvable' })\n  userId: string;\n\n  @ApiProperty({\n    example: '1HGCM82633A123456',\n    description: \"Numéro d'identification du véhicule (VIN)\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  vin: string;\n\n  @ApiProperty({ example: 'SUV', description: 'Type de véhicule' })\n  @IsString()\n  @IsNotEmpty()\n  vehicleType: string;\n\n  @ApiProperty({ example: 'ABC123456', description: 'Numéro du titre' })\n  @IsString()\n  @IsNotEmpty()\n  titleNumber: string;\n\n  @ApiProperty({\n    example: 'REC123456',\n    description: 'Numéro de reçu',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  receiptNumber?: string;\n\n  @ApiProperty({\n    example: '2023-06-15T14:00:00',\n    description: 'Date et heure du rendez-vous',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  scheduledAt?: string;\n\n  @ApiProperty({\n    example: '123 Main St, City, State',\n    description: 'Lieu du rendez-vous',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  location?: string;\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: '2025-10-04',\n    description: 'Date d’émission du reçu (si fourni)',\n    required: false,\n  })\n  issuesDate?: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDocumentDto.html":{"url":"classes/CreateDocumentDto.html","title":"class - CreateDocumentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDocumentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/document/dto/create-document.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DocumentType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: DocumentType, example: undefined, description: 'Type du document'})@IsNotEmpty()@IsEnum(DocumentType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/create-document.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty } from 'class-validator';\nimport { DocumentType } from '@prisma/client';\n\nexport class CreateDocumentDto {\n  @ApiProperty({\n    enum: DocumentType,\n    example: DocumentType.LICENSE,\n    description: 'Type du document',\n  })\n  @IsNotEmpty()\n  @IsEnum(DocumentType)\n  type: DocumentType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateGuestAppointmentDto.html":{"url":"classes/CreateGuestAppointmentDto.html","title":"class - CreateGuestAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateGuestAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/appointment/dto/create-guest-appointment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                issuesDate\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                location\n                            \n                            \n                                    \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                receiptNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                scheduledAt\n                            \n                            \n                                    \n                                    \n                                    \n                                titleNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                vehicleType\n                            \n                            \n                                    \n                                    \n                                    \n                                vin\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'Email du client'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'Prénom du client'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuesDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'Nom du client'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123 Main St, City, State', description: 'Lieu du rendez-vous', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+1234567890', description: 'Numéro de téléphone du client'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        receiptNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'REC123456', description: 'Numéro de reçu', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        scheduledAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2023-06-15T14:00:00', description: 'Date et heure du rendez-vous', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        titleNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ABC123456', description: 'Numéro du titre'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        vehicleType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'SUV', description: 'Type de véhicule'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        vin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '1HGCM82633A123456', description: 'Numéro d'identification du véhicule (VIN)'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/create-guest-appointment.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, IsEmail, IsOptional } from 'class-validator';\n\nexport class CreateGuestAppointmentDto {\n  @ApiProperty({ example: 'John', description: 'Prénom du client' })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiProperty({ example: 'Doe', description: 'Nom du client' })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiProperty({ example: 'john.doe@example.com', description: 'Email du client' })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({ example: '+1234567890', description: 'Numéro de téléphone du client' })\n  @IsString()\n  @IsNotEmpty()\n  phone: string;\n\n  @ApiProperty({ example: '1HGCM82633A123456', description: 'Numéro d\\'identification du véhicule (VIN)' })\n  @IsString()\n  @IsNotEmpty()\n  vin: string;\n\n  @ApiProperty({ example: 'SUV', description: 'Type de véhicule' })\n  @IsString()\n  @IsNotEmpty()\n  vehicleType: string;\n\n  @ApiProperty({ example: 'ABC123456', description: 'Numéro du titre' })\n  @IsString()\n  @IsNotEmpty()\n  titleNumber: string;\n\n  @ApiProperty({ example: 'REC123456', description: 'Numéro de reçu', required: false })\n  @IsString()\n  @IsOptional()\n  receiptNumber?: string;\n\n  @ApiProperty({ example: '2023-06-15T14:00:00', description: 'Date et heure du rendez-vous', required: false })\n  @IsString()\n  @IsOptional()\n  scheduledAt?: string;\n\n  @ApiProperty({ example: '123 Main St, City, State', description: 'Lieu du rendez-vous', required: false })\n  @IsString()\n  @IsOptional()\n  location?: string;\n  issuesDate: string | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePaymentDto.html":{"url":"classes/CreatePaymentDto.html","title":"class - CreatePaymentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePaymentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/dto/create-payment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                amounts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                appointmentIds\n                            \n                            \n                                    \n                                    \n                                    \n                                currency\n                            \n                            \n                                    \n                                    \n                                    \n                                paymentModeId\n                            \n                            \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        amounts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Liste des montants par rendez-vous'})@IsArray()@ArrayNotEmpty()@IsNumber({}, {each: true})@Min(0.01, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/dto/create-payment.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        appointmentIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Liste des IDs des rendez-vous à payer'})@IsArray()@ArrayNotEmpty()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/dto/create-payment.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Devise utilisée', example: 'usd'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/dto/create-payment.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        paymentModeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID du mode de paiement', example: 'payment-mode-uuid'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/dto/create-payment.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID de l’utilisateur', example: 'user-uuid'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/dto/create-payment.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsString,\n  IsNotEmpty,\n  IsArray,\n  ArrayNotEmpty,\n  IsNumber,\n  Min,\n} from 'class-validator';\n\nexport class CreatePaymentDto {\n  @ApiProperty({ description: 'ID de l’utilisateur', example: 'user-uuid' })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n\n  @ApiProperty({ description: 'Liste des IDs des rendez-vous à payer' })\n  @IsArray()\n  @ArrayNotEmpty()\n  @IsString({ each: true })\n  appointmentIds: string[];\n\n  @ApiProperty({ description: 'ID du mode de paiement', example: 'payment-mode-uuid' })\n  @IsString()\n  @IsNotEmpty()\n  paymentModeId: string;\n\n  @ApiProperty({ description: 'Liste des montants par rendez-vous' })\n  @IsArray()\n  @ArrayNotEmpty()\n  @IsNumber({}, { each: true })\n  @Min(0.01, { each: true })\n  amounts: number[];\n\n  @ApiProperty({ description: 'Devise utilisée', example: 'usd' })\n  @IsString()\n  @IsNotEmpty()\n  currency: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePaymentModeDto.html":{"url":"classes/CreatePaymentModeDto.html","title":"class - CreatePaymentModeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePaymentModeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment-mode/dto/create-payment-mode.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Carte Bancaire', description: 'Nom du mode de paiement'})@IsString()@IsNotEmpty()@Unique('paymentMode', 'name', {message: 'Payment mode name already exists'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment-mode/dto/create-payment-mode.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Unique } from '../../common/decorator/validators/unique.decorator';\n\n// @ts-ignore\nexport class CreatePaymentModeDto {\n  @ApiProperty({\n    example: 'Carte Bancaire',\n    description: 'Nom du mode de paiement',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Unique('paymentMode', 'name', {\n    message: 'Payment mode name already exists',\n  })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'Adresse email'})@IsEmail()@IsNotEmpty()@Unique('user', 'email', {message: 'Email already exists'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'Prénom'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'Nom de famille'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'StrongPassword123', description: 'Mot de passe sécurisé'})@IsString()@IsNotEmpty()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+14155552671', description: 'Téléphone'})@IsPhoneNumber()@IsNotEmpty()@Unique('user', 'phone', {message: 'Phone number already exists'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MinLength,\n  IsPhoneNumber,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Unique } from '../../common/decorator/validators/unique.decorator';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    example: 'john.doe@example.com',\n    description: 'Adresse email',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  @Unique('user', 'email', { message: 'Email already exists' })\n  email: string;\n\n  @ApiProperty({ example: '+14155552671', description: 'Téléphone' })\n  @IsPhoneNumber()\n  @IsNotEmpty()\n  @Unique('user', 'phone', { message: 'Phone number already exists' })\n  phone: string;\n\n  @ApiProperty({ example: 'John', description: 'Prénom' })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiProperty({ example: 'Doe', description: 'Nom de famille' })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiProperty({\n    example: 'StrongPassword123',\n    description: 'Mot de passe sécurisé',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DocumentController.html":{"url":"controllers/DocumentController.html","title":"controller - DocumentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DocumentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/document/document.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                documents\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(req: AuthenticatedRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Lister les documents de l’utilisateur connecté'})@ApiResponse({status: 200, description: 'Liste des documents de l'utilisateur', type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/document/document.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            AuthenticatedRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(params: ParamDocumentIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Récupérer un document par ID'})@ApiResponse({status: 200, description: 'Document trouvé', type: DocumentResponseDto})@ApiResponse({status: 404, description: 'Document non trouvé'})\n                \n            \n\n                    \n                        \n                            Defined in src/document/document.controller.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            ParamDocumentIdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(params: ParamDocumentIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Supprimer un document (soft delete)'})@ApiResponse({status: 200, description: 'Document supprimé', type: DocumentResponseDto})@ApiResponse({status: 404, description: 'Document non trouvé'})\n                \n            \n\n                    \n                        \n                            Defined in src/document/document.controller.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            ParamDocumentIdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(params: ParamDocumentIdDto, body: UpdateDocumentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Mettre à jour le type d’un document'})@ApiBody({type: UpdateDocumentDto})@ApiResponse({status: 200, description: 'Document mis à jour', type: DocumentResponseDto})@ApiResponse({status: 404, description: 'Document non trouvé'})\n                \n            \n\n                    \n                        \n                            Defined in src/document/document.controller.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            ParamDocumentIdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateDocumentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(file: Express.Multer.File, body: CreateDocumentDto, req: AuthenticatedRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('upload')@UseInterceptors(undefined)@ApiOperation({summary: 'Uploader un document (auth)'})@ApiConsumes('multipart/form-data')@ApiBody({schema: undefined})@ApiResponse({status: 201, description: 'Document uploadé avec succès', type: DocumentResponseDto})@ApiResponse({status: 400, description: 'Requête invalide'})\n                \n            \n\n                    \n                        \n                            Defined in src/document/document.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            CreateDocumentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            AuthenticatedRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Get,\n  Patch,\n  Delete,\n  Param,\n  Body,\n  UploadedFile,\n  UseInterceptors,\n  Req,\n} from '@nestjs/common';\nimport { DocumentService } from './document.service';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiBody,\n  ApiConsumes,\n  ApiBearerAuth,\n  ApiResponse,\n} from '@nestjs/swagger';\nimport { CreateDocumentDto } from './dto/create-document.dto';\nimport { UpdateDocumentDto } from './dto/update-document.dto';\nimport { ParamDocumentIdDto } from './dto/param-document-id.dto';\nimport { DocumentResponseDto } from './dto/document-response.dto';\nimport { Request } from 'express';\n\n// Define a custom interface for the authenticated request\ninterface AuthenticatedRequest extends Request {\n  user: {\n    id: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    isPhoneVerified: boolean;\n    codeOtp: string | null;\n    phone: string;\n    password: string;\n    createdAt: Date;\n    updatedAt: Date;\n    deletedAt: Date | null;\n  };\n}\n\n@ApiTags('Documents')\n@ApiBearerAuth('access-token')\n@Controller('documents')\nexport class DocumentController {\n  constructor(private readonly documentService: DocumentService) {}\n\n  @Post('upload')\n  @UseInterceptors(FileInterceptor('file'))\n  @ApiOperation({ summary: 'Uploader un document (auth)' })\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        file: { type: 'string', format: 'binary' },\n        type: {\n          type: 'string',\n          enum: ['LICENSE', 'TITLE', 'RECEIPT'],\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Document uploadé avec succès',\n    type: DocumentResponseDto,\n  })\n  @ApiResponse({ status: 400, description: 'Requête invalide' })\n  upload(\n    @UploadedFile() file: Express.Multer.File,\n    @Body() body: CreateDocumentDto,\n    @Req() req: AuthenticatedRequest,\n  ) {\n    const userId = req.user.id;\n    return this.documentService.upload(userId, file, body.type);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Lister les documents de l’utilisateur connecté' })\n  @ApiResponse({\n    status: 200,\n    description: 'Liste des documents de l\\'utilisateur',\n    type: [DocumentResponseDto],\n  })\n  findAll(@Req() req: AuthenticatedRequest) {\n    const userId = req.user.id;\n    return this.documentService.findAll(userId);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Récupérer un document par ID' })\n  @ApiResponse({\n    status: 200,\n    description: 'Document trouvé',\n    type: DocumentResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Document non trouvé' })\n  findOne(@Param() params: ParamDocumentIdDto) {\n    return this.documentService.findOne(params.id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Mettre à jour le type d’un document' })\n  @ApiBody({ type: UpdateDocumentDto })\n  @ApiResponse({\n    status: 200,\n    description: 'Document mis à jour',\n    type: DocumentResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Document non trouvé' })\n  update(\n    @Param() params: ParamDocumentIdDto,\n    @Body() body: UpdateDocumentDto,\n  ) {\n    return this.documentService.update(params.id, body.type);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Supprimer un document (soft delete)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Document supprimé',\n    type: DocumentResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Document non trouvé' })\n  remove(@Param() params: ParamDocumentIdDto) {\n    return this.documentService.remove(params.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DocumentModule.html":{"url":"modules/DocumentModule.html","title":"module - DocumentModule","body":"\n                   \n\n\n\n\n    Modules\n    DocumentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DocumentModule\n\n\n\ncluster_DocumentModule_imports\n\n\n\ncluster_DocumentModule_providers\n\n\n\n\nUploadModule\n\nUploadModule\n\n\n\nDocumentModule\n\nDocumentModule\n\nDocumentModule -->\n\nUploadModule->DocumentModule\n\n\n\n\n\nDocumentService\n\nDocumentService\n\nDocumentModule -->\n\nDocumentService->DocumentModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nDocumentModule -->\n\nPrismaService->DocumentModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nDocumentModule -->\n\nResponseService->DocumentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/document/document.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DocumentService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DocumentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UploadModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // src/document/document.module.ts\nimport { Module } from '@nestjs/common';\nimport { DocumentService } from './document.service';\nimport { DocumentController } from './document.controller';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { UploadModule } from '../upload/upload.module';\n\n@Module({\n  imports: [UploadModule],\n  controllers: [DocumentController],\n  providers: [DocumentService, PrismaService, ResponseService],\n})\nexport class DocumentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DocumentResponseDto.html":{"url":"classes/DocumentResponseDto.html","title":"class - DocumentResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DocumentResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/document/dto/document-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                fileUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                uploadedAt\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'Date de suppression du document (null si non supprimé)', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/document-response.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'https://example.com/documents/file.pdf', description: 'URL du fichier'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/document-response.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123e4567-e89b-12d3-a456-426614174000', description: 'ID unique du document'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/document-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DocumentType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: DocumentType, example: undefined, description: 'Type du document'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/document-response.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uploadedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2023-01-01T00:00:00.000Z', description: 'Date d'upload du document'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/document-response.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123e4567-e89b-12d3-a456-426614174000', description: 'ID de l'utilisateur propriétaire du document'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/document-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { DocumentType } from '@prisma/client';\n\nexport class DocumentResponseDto {\n  @ApiProperty({\n    example: '123e4567-e89b-12d3-a456-426614174000',\n    description: 'ID unique du document',\n  })\n  id: string;\n\n  @ApiProperty({\n    example: '123e4567-e89b-12d3-a456-426614174000',\n    description: 'ID de l\\'utilisateur propriétaire du document',\n  })\n  userId: string;\n\n  @ApiProperty({\n    enum: DocumentType,\n    example: DocumentType.LICENSE,\n    description: 'Type du document',\n  })\n  type: DocumentType;\n\n  @ApiProperty({\n    example: 'https://example.com/documents/file.pdf',\n    description: 'URL du fichier',\n  })\n  fileUrl: string;\n\n  @ApiProperty({\n    example: '2023-01-01T00:00:00.000Z',\n    description: 'Date d\\'upload du document',\n  })\n  uploadedAt: Date;\n\n  @ApiProperty({\n    example: null,\n    description: 'Date de suppression du document (null si non supprimé)',\n    required: false,\n  })\n  deletedAt: Date | null;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DocumentService.html":{"url":"injectables/DocumentService.html","title":"injectable - DocumentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DocumentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/document/document.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, responseService: ResponseService, uploadService: FileStorageService)\n                    \n                \n                        \n                            \n                                Defined in src/document/document.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadService\n                                                  \n                                                        \n                                                                        FileStorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/document/document.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/document/document.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/document/document.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, type: DocumentType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/document/document.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                        DocumentType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(userId: string, file: Express.Multer.File | null, type: DocumentType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/document/document.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                        DocumentType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport {\n  FileStorageService,\n  FileUploadResult,\n} from '../upload/interfaces/upload.interface';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { DocumentType } from '@prisma/client';\nimport { DocumentResponseDto } from './dto/document-response.dto';\n\n@Injectable()\nexport class DocumentService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly responseService: ResponseService,\n    @Inject('UploadService')\n    private readonly uploadService: FileStorageService,\n  ) {}\n\n  async upload(userId: string, file: Express.Multer.File | null, type: DocumentType) {\n    if (!file) {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw this.responseService.badRequest(['Aucun fichier fourni']);\n    }\n\n    const maxSize = 4 * 1024 * 1024;\n    if (file.size > maxSize) {\n      throw this.responseService.badRequest([\n        'Fichier trop volumineux (> 4 Mo)',\n      ]);\n    }\n\n    const uploaded: FileUploadResult = await this.uploadService.uploadSingle(\n      file,\n      'documents',\n    );\n\n    const doc = await this.prisma.document.create({\n      data: {\n        userId,\n        type,\n        fileUrl: uploaded.url,\n      },\n    });\n\n    const responseDto: DocumentResponseDto = {\n      ...doc,\n    };\n\n    return this.responseService.created(responseDto, 'Document uploadé');\n  }\n\n  async findAll(userId: string) {\n    const docs = await this.prisma.document.findMany({\n      where: { userId, deletedAt: null },\n    });\n\n    const responseDtos: DocumentResponseDto[] = docs.map(doc => ({\n      ...doc,\n    }));\n\n    return this.responseService.success(responseDtos, 'Documents retrouvés');\n  }\n\n  async findOne(id: string) {\n    const doc = await this.prisma.document.findUnique({ where: { id } });\n\n    if (!doc) {\n      return this.responseService.success(null, 'Document non trouvé');\n    }\n\n    const responseDto: DocumentResponseDto = {\n      ...doc,\n    };\n\n    return this.responseService.success(responseDto, 'Document trouvé');\n  }\n\n  async update(id: string, type: DocumentType) {\n    const doc = await this.prisma.document.update({\n      where: { id },\n      data: { type },\n    });\n\n    const responseDto: DocumentResponseDto = {\n      ...doc,\n    };\n\n    return this.responseService.success(responseDto, 'Document mis à jour');\n  }\n\n  async remove(id: string) {\n    const doc = await this.prisma.document.update({\n      where: { id },\n      data: { deletedAt: new Date() },\n    });\n\n    await this.uploadService.deleteFile(doc.fileUrl);\n\n    const responseDto: DocumentResponseDto = {\n      ...doc,\n    };\n\n    return this.responseService.success(responseDto, 'Document supprimé');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EvolutionApiService.html":{"url":"injectables/EvolutionApiService.html","title":"injectable - EvolutionApiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EvolutionApiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/evolution-api/evolution-api.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                apiKey\n                            \n                            \n                                    Private\n                                    Readonly\n                                baseUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                fromNumber\n                            \n                            \n                                    Private\n                                    Readonly\n                                instanceName\n                            \n                            \n                                    Private\n                                    Readonly\n                                OTP_EXPIRATION_TIME\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendOtp\n                            \n                            \n                                    Async\n                                verifyOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/sms/evolution-api/evolution-api.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendOtp(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sms/evolution-api/evolution-api.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOtp(phone: string, code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sms/evolution-api/evolution-api.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        apiKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/evolution-api/evolution-api.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/evolution-api/evolution-api.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        fromNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/evolution-api/evolution-api.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        instanceName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/evolution-api/evolution-api.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        OTP_EXPIRATION_TIME\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 10 * 60\n                    \n                \n                    \n                        \n                                Defined in src/sms/evolution-api/evolution-api.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SmsServiceInterface } from '../sms.interface';\nimport { RedisService } from '../../redis/redis.service';\nimport axios from 'axios';\n\n@Injectable()\nexport class EvolutionApiService implements SmsServiceInterface {\n  private readonly baseUrl: string;\n  private readonly instanceName: string;\n  private readonly apiKey: string;\n  private readonly fromNumber: string;\n  private readonly OTP_EXPIRATION_TIME = 10 * 60; // 10 minutes in seconds\n\n  constructor(\n    private readonly config: ConfigService,\n    private readonly redisService: RedisService,\n  ) {\n    const baseUrl = this.config.get('EVOLUTION_API_BASE_URL');\n    const instanceName = this.config.get('EVOLUTION_API_INSTANCE');\n    const apiKey = this.config.get('EVOLUTION_API_KEY');\n    const fromNumber = this.config.get('WHATSAPP_FROM_NUMBER');\n\n    if (!baseUrl || !instanceName || !apiKey || !fromNumber) {\n      throw new Error(\n        'Evolution API configuration error: please check EVOLUTION_API_BASE_URL, EVOLUTION_API_INSTANCE, EVOLUTION_API_KEY, and WHATSAPP_FROM_NUMBER in your environment variables.',\n      );\n    }\n\n    this.baseUrl = baseUrl;\n    this.instanceName = instanceName;\n    this.apiKey = apiKey;\n    this.fromNumber = fromNumber;\n  }\n\n  async sendOtp(phone: string): Promise {\n    // Generate a random 6-digit code\n    const code = Math.floor(100000 + Math.random() * 900000).toString();\n\n    // Store the code in Redis with expiration\n    const redisKey = `otp:${phone}`;\n    await this.redisService.set(redisKey, code, this.OTP_EXPIRATION_TIME);\n\n    // Check if the phone number is the same as the fromNumber\n    if (phone === this.fromNumber) {\n      console.log(`Cannot send WhatsApp message to the same number as the sender (${phone}). Code stored in Redis.`);\n      // Return a mock successful response without actually sending the message\n      return {\n        sid: 'MOCK_SID',\n        status: 'delivered',\n        body: `Your verification code is: ${code}`,\n      };\n    }\n\n    // Format phone numbers (remove '+' if present)\n    const formattedFromNumber = this.fromNumber.startsWith('+') \n      ? this.fromNumber.substring(1) \n      : this.fromNumber;\n    \n    const formattedToNumber = phone.startsWith('+') \n      ? phone.substring(1) \n      : phone;\n\n    try {\n      // Send the code via Evolution API\n      const response = await axios.post(\n        `${this.baseUrl}/message/sendText/${this.instanceName}`,\n        {\n          number: formattedToNumber,\n          textMessage: `Your verification code is: ${code}`,\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            'apikey': this.apiKey,\n          },\n        },\n      );\n\n      return {\n        sid: response.data?.key?.id || 'UNKNOWN_SID',\n        status: response.data?.status || 'sent',\n        body: `Your verification code is: ${code}`,\n      };\n    } catch (error) {\n      console.error('Error sending WhatsApp message via Evolution API:', error);\n      throw new Error(`Failed to send WhatsApp message: ${error.message}`);\n    }\n  }\n\n  async verifyOtp(phone: string, code: string): Promise {\n    const redisKey = `otp:${phone}`;\n    const storedCode = await this.redisService.get(redisKey);\n\n    // Check if the code matches the stored code\n    if (storedCode && storedCode === code) {\n      // Clear the code after successful verification\n      await this.redisService.del(redisKey);\n      return { status: 'approved' };\n    }\n\n    return { status: 'rejected' };\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionService.html":{"url":"injectables/ExceptionService.html","title":"injectable - ExceptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/exception/exception.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createBadRequestException\n                            \n                            \n                                createForbiddenException\n                            \n                            \n                                createInternalServerException\n                            \n                            \n                                createNotFoundException\n                            \n                            \n                                createValidationException\n                            \n                            \n                                    Private\n                                formatErrors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpResponseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/validation/exception/exception.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpResponseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createBadRequestException\n                        \n                    \n                \n            \n            \n                \ncreateBadRequestException(arg0: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                arg0\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createForbiddenException\n                        \n                    \n                \n            \n            \n                \ncreateForbiddenException(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createInternalServerException\n                        \n                    \n                \n            \n            \n                \ncreateInternalServerException(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createNotFoundException\n                        \n                    \n                \n            \n            \n                \ncreateNotFoundException(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createValidationException\n                        \n                    \n                \n            \n            \n                \ncreateValidationException(errors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatErrors(errors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport { ResponseService } from './response/response.service';\n\n@Injectable()\nexport class ExceptionService {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  createBadRequestException(arg0: string) {\n    throw new Error('Method not implemented.');\n  }\n  constructor(private readonly httpResponseService: ResponseService) {}\n\n  createValidationException(errors: ValidationError[]): HttpException {\n    const messages = this.formatErrors(errors);\n    const response = this.httpResponseService.badRequest(\n      messages,\n      'Erreur de validation',\n    );\n    return new HttpException(response, HttpStatus.BAD_REQUEST);\n  }\n\n  createForbiddenException(message: string): HttpException {\n    const response = this.httpResponseService.forbidden(message);\n    return new HttpException(response, HttpStatus.FORBIDDEN);\n  }\n\n  createNotFoundException(message: string): HttpException {\n    const response = this.httpResponseService.notFound(message);\n    return new HttpException(response, HttpStatus.NOT_FOUND);\n  }\n\n  createInternalServerException(message: string): HttpException {\n    const response = this.httpResponseService.internalError(message);\n    return new HttpException(response, HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n\n  private formatErrors(errors: ValidationError[]): string[] {\n    const messages: string[] = [];\n    errors.forEach((error) => {\n      if (error.constraints) {\n        Object.values(error.constraints).forEach((message) => {\n          messages.push(message);\n        });\n      }\n      if (error.children && error.children.length > 0) {\n        messages.push(...this.formatErrors(error.children));\n      }\n    });\n    return messages;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExistsConstraint.html":{"url":"injectables/ExistsConstraint.html","title":"injectable - ExistsConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExistsConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/decorator/validators/exists.decorator.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/decorator/validators/exists.decorator.ts:15\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/decorator/validators/exists.decorator.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(value: any, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/decorator/validators/exists.decorator.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrismaService\n\n                    \n                \n                    \n                        \n                                Defined in src/common/decorator/validators/exists.decorator.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { PrismaService } from '../../../prisma/prisma.service';\nimport { Injectable } from '@nestjs/common';\nimport { getFromContainer } from 'class-validator';\n\n@Injectable()\n@ValidatorConstraint({ async: true })\nexport class ExistsConstraint implements ValidatorConstraintInterface {\n  private prisma: PrismaService;\n\n  constructor() {\n    this.prisma = getFromContainer(PrismaService); // ✅ injection manuelle\n  }\n\n  async validate(value: any, args: ValidationArguments): Promise {\n    const [modelName, fieldName] = args.constraints as [string, string];\n\n    if (!this.prisma[modelName]) {\n      console.error(`Model ${modelName} does not exist in PrismaService.`);\n      return false;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    const record = await this.prisma[modelName].findFirst({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      where: { [fieldName]: value },\n    });\n\n    return !!record;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    const [, fieldName] = args.constraints as [string, string];\n    return `${fieldName} does not exist`;\n  }\n}\n\nexport function Exists(\n  model: string,\n  field: string,\n  validationOptions?: ValidationOptions,\n) {\n  return function (object: any, propertyName: string) {\n    registerDecorator({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [model, field],\n      validator: ExistsConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileStorageService.html":{"url":"interfaces/FileStorageService.html","title":"interface - FileStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileStorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/interfaces/upload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        deleteFile\n                                    \n                                \n                                \n                                    \n                                        uploadMultiple\n                                    \n                                \n                                \n                                    \n                                        uploadSingle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteFile\n                        \n                    \n                \n            \n            \n                \ndeleteFile(filePath: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/interfaces/upload.interface.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filePath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \nuploadMultiple(files: Express.Multer.File[], folder?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/interfaces/upload.interface.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadSingle\n                        \n                    \n                \n            \n            \n                \nuploadSingle(file: Express.Multer.File, folder?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/interfaces/upload.interface.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface FileUploadResult {\n  url: string;\n  id: string;\n}\n\nexport interface FileStorageService {\n  uploadSingle(\n    file: Express.Multer.File,\n    folder?: string,\n  ): Promise;\n\n  uploadMultiple(\n    files: Express.Multer.File[],\n    folder?: string,\n  ): Promise;\n\n  deleteFile(filePath: string): Promise;\n}\n\nexport const DATABASE_CONNECTION = 'UPLOAD';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileUploadResult.html":{"url":"interfaces/FileUploadResult.html","title":"interface - FileUploadResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileUploadResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/interfaces/upload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FileUploadResult {\n  url: string;\n  id: string;\n}\n\nexport interface FileStorageService {\n  uploadSingle(\n    file: Express.Multer.File,\n    folder?: string,\n  ): Promise;\n\n  uploadMultiple(\n    files: Express.Multer.File[],\n    folder?: string,\n  ): Promise;\n\n  deleteFile(filePath: string): Promise;\n}\n\nexport const DATABASE_CONNECTION = 'UPLOAD';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAdminService.html":{"url":"injectables/FirebaseAdminService.html","title":"injectable - FirebaseAdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/firebase-admin/firebase-admin.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onModuleInit\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/firebase/firebase-admin/firebase-admin.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(idToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/firebase/firebase-admin/firebase-admin.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as admin from 'firebase-admin';\nimport { Injectable, OnModuleInit } from '@nestjs/common';\nimport * as serviceAccount from './firebase-service-account.json'; // ✅ chemin correct\n\n\n@Injectable()\nexport class FirebaseAdminService implements OnModuleInit {\n  onModuleInit() {\n    if (!admin.apps.length) {\n      admin.initializeApp({\n        credential: admin.credential.cert(\n          serviceAccount as admin.ServiceAccount,\n        ),\n      });\n    }\n  }\n\n  async verifyToken(idToken: string) {\n    try {\n      return await admin.auth().verifyIdToken(idToken);\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (error) {\n      throw new Error('Firebase token invalid');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(blacklistService: BlacklistTokenService, reflector: Reflector, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-auth/jwt-auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        blacklistService\n                                                  \n                                                        \n                                                                        BlacklistTokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-auth/jwt-auth.guard.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Reflector } from '@nestjs/core';\nimport { BlacklistTokenService } from '../blacklist-token/blacklist-token.service';\nimport { ResponseService } from '../../validation/exception/response/response.service';\nimport { IS_PUBLIC_KEY } from '../../common/decorator/public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(\n    private readonly blacklistService: BlacklistTokenService,\n    private readonly reflector: Reflector,\n    private readonly responseService: ResponseService,\n  ) {\n    super();\n  }\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) return true;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const req = context.switchToHttp().getRequest();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    const token = req.headers.authorization?.replace('Bearer ', '');\n\n    if (!token) {\n      throw new UnauthorizedException(\n        this.responseService.unauthorized('Aucun token fourni'),\n      );\n    }\n\n    const blacklisted = await this.blacklistService.isBlacklisted(token);\n    if (blacklisted) {\n      throw new UnauthorizedException(\n        this.responseService.unauthorized('Token blacklisté'),\n      );\n    }\n\n    return super.canActivate(context) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-strategy/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-strategy/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-strategy/jwt.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaService } from '../../prisma/prisma.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly config: ConfigService,\n    private readonly prisma: PrismaService,\n  ) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    super({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: { sub: string }) {\n    const user = await this.prisma.user.findUnique({\n      where: { id: payload.sub },\n    });\n\n    if (!user || user.deletedAt) {\n      throw new UnauthorizedException('User not found or deleted');\n    }\n\n    // Ce que le guard injecte dans req.user\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'StrongPassword123'})@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginDto {\n  @ApiProperty({ example: 'user@example.com' })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({ example: 'StrongPassword123' })\n  @IsString()\n  @MinLength(6)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OptionalJwtAuthGuard.html":{"url":"injectables/OptionalJwtAuthGuard.html","title":"injectable - OptionalJwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OptionalJwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/optional-jwt-auth/optional-jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(blacklistService: BlacklistTokenService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/optional-jwt-auth/optional-jwt-auth.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        blacklistService\n                                                  \n                                                        \n                                                                        BlacklistTokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/optional-jwt-auth/optional-jwt-auth.guard.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { BlacklistTokenService } from '../blacklist-token/blacklist-token.service';\n\n@Injectable()\nexport class OptionalJwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private readonly blacklistService: BlacklistTokenService) {\n    super();\n  }\n\n  async canActivate(context: ExecutionContext): Promise {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const req = context.switchToHttp().getRequest();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    const token = req.headers.authorization?.replace('Bearer ', '');\n\n    if (!token) {\n      return true; // Autoriser la requête même sans token\n    }\n\n    const blacklisted = await this.blacklistService.isBlacklisted(token);\n    if (blacklisted) return true; // Autoriser mais pas authentifié\n\n    return super.canActivate(context) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParamAppointmentIdDto.html":{"url":"classes/ParamAppointmentIdDto.html","title":"class - ParamAppointmentIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParamAppointmentIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/appointment/dto/param-appointment-id.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'uuid-appointment', description: 'ID du rendez-vous'})@IsUUID()@IsNotEmpty()@Exists('appointment', 'id', {message: 'Rendez-vous introuvable'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/param-appointment-id.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsUUID, IsNotEmpty } from 'class-validator';\nimport { Exists } from '../../common/decorator/validators/exists.decorator';\n\nexport class ParamAppointmentIdDto {\n  @ApiProperty({ example: 'uuid-appointment', description: 'ID du rendez-vous' })\n  @IsUUID()\n  @IsNotEmpty()\n  @Exists('appointment', 'id', { message: 'Rendez-vous introuvable' })\n  id: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParamDocumentIdDto.html":{"url":"classes/ParamDocumentIdDto.html","title":"class - ParamDocumentIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParamDocumentIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/document/dto/param-document-id.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'uuid-document', description: 'ID du document'})@IsUUID()@IsNotEmpty()@Exists('document', 'id', {message: 'Document introuvable'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/param-document-id.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsUUID, IsNotEmpty } from 'class-validator';\nimport { Exists } from '../../common/decorator/validators/exists.decorator';\n\nexport class ParamDocumentIdDto {\n  @ApiProperty({ example: 'uuid-document', description: 'ID du document' })\n  @IsUUID()\n  @IsNotEmpty()\n  @Exists('document', 'id', { message: 'Document introuvable' })\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParamUserIdDto.html":{"url":"classes/ParamUserIdDto.html","title":"class - ParamUserIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParamUserIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/appointment/dto/param-user-id.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'uuid-user', description: 'ID de l'utilisateur'})@IsUUID()@IsNotEmpty()@Exists('user', 'id', {message: 'Utilisateur introuvable'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/param-user-id.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsUUID, IsNotEmpty } from 'class-validator';\nimport { Exists } from '../../common/decorator/validators/exists.decorator';\n\nexport class ParamUserIdDto {\n  @ApiProperty({ example: 'uuid-user', description: 'ID de l\\'utilisateur' })\n  @IsUUID()\n  @IsNotEmpty()\n  @Exists('user', 'id', { message: 'Utilisateur introuvable' })\n  userId: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParamUserIdDto-1.html":{"url":"classes/ParamUserIdDto-1.html","title":"class - ParamUserIdDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParamUserIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/document/dto/param-user-id.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'uuid-user', description: 'ID utilisateur'})@IsUUID()@IsNotEmpty()@Exists('user', 'id', {message: 'Utilisateur introuvable'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/param-user-id.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsUUID } from 'class-validator';\nimport { Exists } from '../../common/decorator/validators/exists.decorator';\n\nexport class ParamUserIdDto {\n  @ApiProperty({ example: 'uuid-user', description: 'ID utilisateur' })\n  @IsUUID()\n  @IsNotEmpty()\n  @Exists('user', 'id', { message: 'Utilisateur introuvable' })\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PaymentController.html":{"url":"controllers/PaymentController.html","title":"controller - PaymentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PaymentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/payment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                payments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createPayment\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getAllTransactions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getTransaction\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getTransactionsByUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                handleSuccess\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        createPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPayment(dto: CreatePaymentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a payment for one or multiple appointments'})@ApiResponse({status: 201, description: 'Payment group processed successfully.'})@ApiResponse({status: 400, description: 'Bad request, invalid input data.'})@ApiBody({type: CreatePaymentDto})\n                \n            \n\n                    \n                        \n                            Defined in src/payment/payment.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreatePaymentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getAllTransactions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTransactions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all transactions'})@ApiResponse({status: 200, description: 'All transactions retrieved.'})\n                \n            \n\n                    \n                        \n                            Defined in src/payment/payment.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTransaction(transactionId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':transactionId')@ApiOperation({summary: 'Get transaction by ID (UUID interne ou Stripe session_id)'})@ApiResponse({status: 200, description: 'Transaction details retrieved.'})@ApiResponse({status: 404, description: 'Transaction not found.'})@ApiParam({name: 'transactionId', description: 'ID du paiement (UUID interne ou Stripe session_id cs_...)', example: 'payment-uuid-1 OU cs_test_xxx'})\n                \n            \n\n                    \n                        \n                            Defined in src/payment/payment.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transactionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getTransactionsByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTransactionsByUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@ApiOperation({summary: 'Get transactions by user ID'})@ApiResponse({status: 200, description: 'User transactions retrieved.'})@ApiResponse({status: 404, description: 'User not found.'})@ApiParam({name: 'userId', description: 'ID of the user', example: 'user-uuid'})\n                \n            \n\n                    \n                        \n                            Defined in src/payment/payment.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        handleSuccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSuccess(sessionId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/success')@ApiOperation({summary: 'Handle Stripe success redirect (dev/test)'})@ApiResponse({status: 200, description: 'Paiement validé avec succès.'})@Get('/success')\n                \n            \n\n                    \n                        \n                            Defined in src/payment/payment.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Get,\n  Body,\n  Param,\n  Query,\n} from '@nestjs/common';\nimport { PaymentService } from './payment.service';\nimport { CreatePaymentDto } from './dto/create-payment.dto';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiBearerAuth,\n  ApiResponse,\n  ApiBody,\n  ApiParam,\n} from '@nestjs/swagger';\nimport { Public } from '../common/decorator/public.decorator';\n\n@ApiTags('Payments')\n@ApiBearerAuth('access-token')\n@Public()\n@Controller('payments')\nexport class PaymentController {\n  constructor(private readonly paymentService: PaymentService) {}\n\n  @Post()\n  @ApiOperation({\n    summary: 'Create a payment for one or multiple appointments',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Payment group processed successfully.',\n  })\n  @ApiResponse({ status: 400, description: 'Bad request, invalid input data.' })\n  @ApiBody({ type: CreatePaymentDto })\n  async createPayment(@Body() dto: CreatePaymentDto) {\n    return this.paymentService.createPayment(dto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all transactions' })\n  @ApiResponse({\n    status: 200,\n    description: 'All transactions retrieved.',\n  })\n  async getAllTransactions() {\n    return this.paymentService.getAllTransactions();\n  }\n\n  @Get('user/:userId')\n  @ApiOperation({ summary: 'Get transactions by user ID' })\n  @ApiResponse({\n    status: 200,\n    description: 'User transactions retrieved.',\n  })\n  @ApiResponse({ status: 404, description: 'User not found.' })\n  @ApiParam({\n    name: 'userId',\n    description: 'ID of the user',\n    example: 'user-uuid',\n  })\n  async getTransactionsByUser(@Param('userId') userId: string) {\n    return this.paymentService.getTransactionsByUser(userId);\n  }\n\n  @Get(':transactionId')\n  @ApiOperation({\n    summary: 'Get transaction by ID (UUID interne ou Stripe session_id)',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Transaction details retrieved.',\n  })\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\n  @ApiParam({\n    name: 'transactionId',\n    description: 'ID du paiement (UUID interne ou Stripe session_id cs_...)',\n    example: 'payment-uuid-1 OU cs_test_xxx',\n  })\n  async getTransaction(@Param('transactionId') transactionId: string) {\n    return this.paymentService.getTransaction(transactionId);\n  }\n\n  @Get('/success')\n  @ApiOperation({ summary: 'Handle Stripe success redirect (dev/test)' })\n  @ApiResponse({ status: 200, description: 'Paiement validé avec succès.' })\n  @Get('/success')\n  async handleSuccess(@Query('session_id') sessionId: string) {\n    console.log('>>> [DEBUG CONTROLLER] session_id reçu en query :', sessionId);\n    return this.paymentService.handleStripeSuccess(sessionId);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PaymentModeController.html":{"url":"controllers/PaymentModeController.html","title":"controller - PaymentModeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PaymentModeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment-mode/payment-mode.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                payment-modes\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPaymentModeDto: CreatePaymentModeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new payment mode'})@ApiResponse({status: 201, description: 'Payment mode created successfully.'})\n                \n            \n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPaymentModeDto\n                                            \n                                                            CreatePaymentModeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all payment modes'})@ApiResponse({status: 200, description: 'List of payment modes.'})\n                \n            \n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get a payment mode by ID'})@ApiResponse({status: 200, description: 'Payment mode retrieved.'})\n                \n            \n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Soft delete a payment mode by ID'})@ApiResponse({status: 200, description: 'Payment mode soft-deleted.'})\n                \n            \n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updatePaymentModeDto: UpdatePaymentModeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a payment mode by ID'})@ApiResponse({status: 200, description: 'Payment mode updated.'})\n                \n            \n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatePaymentModeDto\n                                            \n                                                            UpdatePaymentModeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { PaymentModeService } from './payment-mode.service';\nimport { CreatePaymentModeDto } from './dto/create-payment-mode.dto';\nimport { UpdatePaymentModeDto } from './dto/update-payment-mode.dto';\n\n@ApiTags('Payment Modes')\n@ApiBearerAuth('access-token')\n@Controller('payment-modes')\nexport class PaymentModeController {\n  constructor(private readonly paymentModeService: PaymentModeService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new payment mode' })\n  @ApiResponse({ status: 201, description: 'Payment mode created successfully.' })\n  create(@Body() createPaymentModeDto: CreatePaymentModeDto) {\n    return this.paymentModeService.create(createPaymentModeDto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all payment modes' })\n  @ApiResponse({ status: 200, description: 'List of payment modes.' })\n  findAll() {\n    return this.paymentModeService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a payment mode by ID' })\n  @ApiResponse({ status: 200, description: 'Payment mode retrieved.' })\n  findOne(@Param('id') id: string) {\n    return this.paymentModeService.findOne(id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a payment mode by ID' })\n  @ApiResponse({ status: 200, description: 'Payment mode updated.' })\n  update(\n    @Param('id') id: string,\n    @Body() updatePaymentModeDto: UpdatePaymentModeDto,\n  ) {\n    return this.paymentModeService.update(id, updatePaymentModeDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Soft delete a payment mode by ID' })\n  @ApiResponse({ status: 200, description: 'Payment mode soft-deleted.' })\n  remove(@Param('id') id: string) {\n    return this.paymentModeService.remove(id);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModeModule.html":{"url":"modules/PaymentModeModule.html","title":"module - PaymentModeModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaymentModeModule\n\n\n\ncluster_PaymentModeModule_imports\n\n\n\ncluster_PaymentModeModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPaymentModeModule\n\nPaymentModeModule\n\nPaymentModeModule -->\n\nPrismaModule->PaymentModeModule\n\n\n\n\n\nPaymentModeService\n\nPaymentModeService\n\nPaymentModeModule -->\n\nPaymentModeService->PaymentModeModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nPaymentModeModule -->\n\nResponseService->PaymentModeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/payment-mode/payment-mode.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaymentModeService\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PaymentModeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { PaymentModeService } from './payment-mode.service';\nimport { PaymentModeController } from './payment-mode.controller';\nimport { PrismaModule } from '../prisma/prisma.module';\n\n@Module({\n  imports: [PrismaModule],\n  controllers: [PaymentModeController],\n  providers: [ResponseService, PaymentModeService],\n  exports: [],\n})\nexport class PaymentModeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentModeService.html":{"url":"injectables/PaymentModeService.html","title":"injectable - PaymentModeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentModeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment-mode/payment-mode.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/payment-mode/payment-mode.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: CreatePaymentModeDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreatePaymentModeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, data: UpdatePaymentModeDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment-mode/payment-mode.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            UpdatePaymentModeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { CreatePaymentModeDto } from './dto/create-payment-mode.dto';\nimport { UpdatePaymentModeDto } from './dto/update-payment-mode.dto';\nimport { ResponseService } from '../validation/exception/response/response.service';\n\n@Injectable()\nexport class PaymentModeService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly responseService: ResponseService,\n  ) {}\n\n  async create(data: CreatePaymentModeDto) {\n    const paymentMode = await this.prisma.paymentMode.create({\n      data,\n    });\n\n    return this.responseService.created(\n      paymentMode,\n      'Payment mode created successfully.',\n    );\n  }\n\n  async findAll() {\n    const paymentModes = await this.prisma.paymentMode.findMany({\n      where: { deletedAt: null },\n    });\n\n    return this.responseService.success(\n      paymentModes,\n      'List of payment modes retrieved.',\n    );\n  }\n\n  async findOne(id: string) {\n    const paymentMode = await this.prisma.paymentMode.findFirst({\n      where: { id, deletedAt: null },\n    });\n\n    if (!paymentMode) {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw this.responseService.notFound('Payment mode not found.');\n    }\n\n    return this.responseService.success(paymentMode, 'Payment mode retrieved.');\n  }\n\n  async update(id: string, data: UpdatePaymentModeDto) {\n    const paymentMode = await this.prisma.paymentMode.update({\n      where: { id },\n      data,\n    });\n\n    return this.responseService.success(\n      paymentMode,\n      'Payment mode updated successfully.',\n    );\n  }\n\n  async remove(id: string) {\n    const paymentMode = await this.prisma.paymentMode.update({\n      where: { id },\n      data: { deletedAt: new Date() },\n    });\n\n    return this.responseService.success(\n      paymentMode,\n      'Payment mode soft-deleted successfully.',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_exports\n\n\n\ncluster_PaymentModule_imports\n\n\n\ncluster_PaymentModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPaymentModule\n\nPaymentModule\n\nPaymentModule -->\n\nPrismaModule->PaymentModule\n\n\n\n\n\nPaymentService \n\nPaymentService \n\nPaymentService  -->\n\nPaymentModule->PaymentService \n\n\n\n\n\nPaymentProcessorFactory\n\nPaymentProcessorFactory\n\nPaymentModule -->\n\nPaymentProcessorFactory->PaymentModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nPaymentModule -->\n\nResponseService->PaymentModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nPaymentModule -->\n\nStripeService->PaymentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/payment/payment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaymentProcessorFactory\n                        \n                        \n                            PaymentService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PaymentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaymentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { ResponseService } from '../validation/exception/response/response.service';\n\nimport { PaymentService } from './payment.service';\nimport { StripeService } from './stripe/stripe.service';\nimport { PaymentController } from './payment.controller';\nimport { PaymentProcessorFactory } from './payment-processor.factory';\n\n@Module({\n  imports: [PrismaModule],\n  controllers: [PaymentController],\n  providers: [\n    PaymentService,\n    StripeService, // Inject Stripe as payment processor\n    PaymentProcessorFactory, // Factory to choose the processor\n    ResponseService,\n  ],\n  exports: [PaymentService],\n})\nexport class PaymentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaymentProcessor.html":{"url":"interfaces/PaymentProcessor.html","title":"interface - PaymentProcessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaymentProcessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/payment-processor.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        charge\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        createCheckoutSession\n                                    \n                                \n                                \n                                    \n                                        getTransactionDetails\n                                    \n                                \n                                \n                                    \n                                        refund\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        charge\n                        \n                    \n                \n            \n            \n                \ncharge(amount: number, currency: string, paymentDetails: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment-processor.interface.ts:2\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                paymentDetails\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \ncreateCheckoutSession(amount: number, currency: string, successUrl: string, cancelUrl: string, metadata?: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment-processor.interface.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                successUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cancelUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTransactionDetails\n                        \n                    \n                \n            \n            \n                \ngetTransactionDetails(transactionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment-processor.interface.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transactionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refund\n                        \n                    \n                \n            \n            \n                \nrefund(transactionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment-processor.interface.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transactionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface PaymentProcessor {\n  charge(\n    amount: number,\n    currency: string,\n    paymentDetails: any\n  ): Promise;\n\n  refund(transactionId: string): Promise;\n\n  getTransactionDetails(transactionId: string): Promise;\n\n  createCheckoutSession?(\n    amount: number,\n    currency: string,\n    successUrl: string,\n    cancelUrl: string,\n    metadata?: Record\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentProcessorFactory.html":{"url":"injectables/PaymentProcessorFactory.html","title":"injectable - PaymentProcessorFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentProcessorFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/payment-processor.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProcessor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(stripeService: StripeService)\n                    \n                \n                        \n                            \n                                Defined in src/payment/payment-processor.factory.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        stripeService\n                                                  \n                                                        \n                                                                        StripeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getProcessor\n                        \n                    \n                \n            \n            \n                \ngetProcessor(provider: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment-processor.factory.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                provider\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PaymentProcessor\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { StripeService } from './stripe/stripe.service';\nimport { PaymentProcessor } from './payment-processor.interface';\n\n\n@Injectable()\nexport class PaymentProcessorFactory {\n  constructor(private readonly stripeService: StripeService) {}\n\n  getProcessor(provider: string): PaymentProcessor {\n    // @ts-ignore\n    switch (provider.toLowerCase()) {\n      case 'stripe':\n\n        return this.stripeService;\n\n      default:\n        throw new Error(`Unsupported payment provider: ${provider}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentService.html":{"url":"injectables/PaymentService.html","title":"injectable - PaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/payment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPayment\n                            \n                            \n                                    Async\n                                getAllTransactions\n                            \n                            \n                                    Async\n                                getTransaction\n                            \n                            \n                                    Async\n                                getTransactionsByUser\n                            \n                            \n                                    Async\n                                handleStripeSuccess\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, factory: PaymentProcessorFactory, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/payment/payment.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        factory\n                                                  \n                                                        \n                                                                        PaymentProcessorFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPayment(dto: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllTransactions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTransactions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTransaction(transactionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment.service.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transactionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTransactionsByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTransactionsByUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleStripeSuccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleStripeSuccess(sessionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment.service.ts:144\n                        \n                    \n\n\n            \n                \n                        Handle Stripe success (appelé à la redirection après paiement Stripe en dev/test)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { AppointmentStatus, PaymentStatus } from '@prisma/client';\nimport Stripe from 'stripe';\nimport { PaymentProcessorFactory } from './payment-processor.factory';\n\n@Injectable()\nexport class PaymentService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly factory: PaymentProcessorFactory,\n    private readonly responseService: ResponseService,\n  ) {}\n\n  async createPayment(dto: any) {\n    if (dto.appointmentIds.length !== dto.amounts.length) {\n      throw this.responseService.badRequest([\n        'appointmentIds and amounts must have the same length.',\n      ]);\n    }\n\n    const appointments = await this.prisma.appointment.findMany({\n      where: {\n        id: { in: dto.appointmentIds },\n        status: AppointmentStatus.PENDING,\n        deletedAt: null,\n      },\n      include: { payments: true },\n    });\n\n    if (appointments.length !== dto.appointmentIds.length) {\n      throw this.responseService.badRequest([\n        'One or more appointments are invalid or not pending.',\n      ]);\n    }\n\n    for (const appointment of appointments) {\n      const existingPayment = await this.prisma.payment.findFirst({\n        where: {\n          appointmentId: appointment.id,\n          deletedAt: null,\n          status: PaymentStatus.PAID,\n        },\n      });\n\n      if (existingPayment) {\n        throw this.responseService.badRequest([\n          `Appointment ${appointment.id} already has a paid payment.`,\n        ]);\n      }\n    }\n\n    const paymentMode = await this.prisma.paymentMode.findUnique({\n      where: { id: dto.paymentModeId },\n    });\n\n    if (!paymentMode || paymentMode.deletedAt) {\n      throw this.responseService.badRequest(['Invalid payment mode.']);\n    }\n\n    const totalAmount = dto.amounts.reduce((sum, amount) => sum + amount, 0);\n\n    const processor = this.factory.getProcessor(paymentMode.name);\n\n    if (!processor.createCheckoutSession) {\n      throw this.responseService.badRequest([\n        `createCheckoutSession is not supported by this processor`,\n      ]);\n    }\n\n    const session = await processor.createCheckoutSession(\n      totalAmount,\n      dto.currency,\n      process.env.STRIPE_SUCCESS_URL!,\n      process.env.STRIPE_CANCEL_URL!,\n      {\n        userId: dto.userId,\n        appointmentIds: dto.appointmentIds.join(','),\n        paymentModeId: dto.paymentModeId,\n      }\n    );\n\n    return this.responseService.success(\n      { checkoutUrl: session.url },\n      'Redirection vers Stripe Checkout.',\n    );\n  }\n\n  async getAllTransactions() {\n    const payments = await this.prisma.payment.findMany({\n      where: { deletedAt: null },\n      include: { user: true, appointment: true, paymentMode: true },\n    });\n\n    return this.responseService.success(\n      payments,\n      'All transactions retrieved.',\n    );\n  }\n\n  async getTransactionsByUser(userId: string) {\n    const payments = await this.prisma.payment.findMany({\n      where: { userId, deletedAt: null },\n      include: { appointment: true, paymentMode: true },\n    });\n\n    return this.responseService.success(\n      payments,\n      'User transactions retrieved.',\n    );\n  }\n\n  async getTransaction(transactionId: string) {\n    let payment = await this.prisma.payment.findFirst({\n      where: { transactionId },\n      include: { user: true, appointment: true, paymentMode: true },\n    });\n\n    if (!payment) {\n      payment = await this.prisma.payment.findUnique({\n        where: { id: transactionId },\n        include: { user: true, appointment: true, paymentMode: true },\n      });\n    }\n\n    if (!payment) {\n      // Debug\n      console.log('Transaction recherchée:', transactionId);\n      const payments = await this.prisma.payment.findMany({});\n      console.log('Toutes les transactions en base:', payments.map(p => ({id: p.id, transactionId: p.transactionId})));\n      throw this.responseService.notFound('Transaction not found.');\n    }\n\n    return this.responseService.success(\n      payment,\n      'Transaction details retrieved.',\n    );\n  }\n\n  /**\n   * Handle Stripe success (appelé à la redirection après paiement Stripe en dev/test)\n   */\n  async handleStripeSuccess(sessionId: string) {\n    console.log('>>> [DEBUG CONTROLLER -> SERVICE] sessionId reçu :', sessionId);\n\n    const secretKey = process.env.STRIPE_SECRET_KEY;\n    if (!secretKey) {\n      throw new Error('STRIPE_SECRET_KEY is not defined');\n    }\n    const stripe = new Stripe(secretKey, {\n      apiVersion: '2025-04-30.basil',\n    });\n\n    // 1. Récupérer la session Stripe\n    const stripeSession = await stripe.checkout.sessions.retrieve(sessionId);\n\n    // 2. Vérifier que le paiement est effectué\n    if (stripeSession.payment_status !== 'paid') {\n      throw this.responseService.badRequest(['Payment not completed.']);\n    }\n\n    // 3. Anti-double création\n    let paymentGroup: any = await this.prisma.paymentGroup.findUnique({\n      where: { transactionId: sessionId },\n      include: { payments: true }\n    });\n    if (paymentGroup) {\n      return this.responseService.success(\n        { paymentGroup },\n        'Paiement déjà enregistré.'\n      );\n    }\n\n    // 4. Extraire les metadata Stripe\n    const metadata = stripeSession.metadata;\n    if (!metadata || !metadata.userId || !metadata.appointmentIds || !metadata.paymentModeId) {\n      throw this.responseService.badRequest(['Metadata manquante dans la session Stripe.']);\n    }\n    const userId = metadata.userId;\n    const appointmentIds = metadata.appointmentIds.split(',');\n    const paymentModeId = metadata.paymentModeId;\n\n    // 5. Vérifier les appointments concernés existent et pas supprimés\n    const appointments = await this.prisma.appointment.findMany({\n      where: { id: { in: appointmentIds }, deletedAt: null },\n    });\n\n    if (!appointments || appointments.length === 0) {\n      throw this.responseService.notFound('Aucun rendez-vous trouvé pour cette transaction.');\n    }\n\n    // 6. Calcul du total payé (Stripe retourne en centimes)\n    const totalAmount = stripeSession.amount_total! / 100;\n\n    // 7. Création du PaymentGroup (SANS paymentModeId !)\n    paymentGroup = await this.prisma.paymentGroup.create({\n      data: {\n        userId,\n        transactionId: sessionId,\n        status: PaymentStatus.PAID,\n        totalAmount,\n      },\n    });\n\n    if (!paymentGroup) {\n      throw this.responseService.notFound('Erreur création PaymentGroup');\n    }\n\n    // 8. Création des paiements individuels AVEC paymentModeId\n    console.log('>>> [DEBUG SERVICE] sessionId transmis à la création Payment :', sessionId);\n    await Promise.all(\n      appointments.map((appointment) =>\n        this.prisma.payment.create({\n          data: {\n            userId,\n            appointmentId: appointment.id,\n            paymentModeId: paymentModeId,\n            amount: totalAmount / appointments.length,\n            status: PaymentStatus.PAID,\n            paymentGroupId: paymentGroup.id,\n            transactionId: sessionId, // >> [DEBUG SERVICE] Payments juste après création :', allPayments);\n\n    return this.responseService.success(\n      { paymentGroup },\n      'Paiement validé et enregistré.'\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  imports: [],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/prisma/prisma.service.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\n//import { loggingMiddleware } from './prisma.middleware';\n\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    super();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    // this.$use(loggingMiddleware(this.eventEmitter));\n  }\n\n  async onModuleInit() {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      await this.$connect();\n      console.log('✅ Connected to the database');\n      console.log('🧩 Available models:', Object.keys(this));\n    } catch (error) {\n      console.error('❌ Failed to connect to the database', error);\n      process.exit(1);\n    }\n  }\n\n  async onModuleDestroy() {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    await this.$disconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_providers\n\n\n\ncluster_RedisModule_exports\n\n\n\n\nRedisService \n\nRedisService \n\n\n\nRedisModule\n\nRedisModule\n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RedisService } from './redis.service';\n\n@Module({\n  providers: [RedisService],\n  imports: [],\n  exports: [RedisService],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisService.html":{"url":"injectables/RedisService.html","title":"injectable - RedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/redis/redis.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cacheable\n                            \n                            \n                                    Async\n                                del\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redis: Redis)\n                    \n                \n                        \n                            \n                                Defined in src/redis/redis.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    Redis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cacheable\n                        \n                    \n                \n            \n            \n                \n                        \n                    cacheable(key: string, ttlSeconds: number, fetcher: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:45\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Met en cache le résultat d'une fonction async, ou le récupère si déjà présent.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttlSeconds\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fetcher\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        del\n                        \n                    \n                \n            \n            \n                \n                        \n                    del(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:10\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: any, ttlSeconds?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttlSeconds\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRedis } from '@nestjs-modules/ioredis';\nimport { Redis } from 'ioredis';\n\n@Injectable()\nexport class RedisService {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n  constructor(@InjectRedis() private readonly redis: Redis) {}\n\n  async get(key: string): Promise {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    const data = await this.redis.get(key);\n    console.log('🔍 [Redis GET]', key);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return data ? JSON.parse(data) : null;\n  }\n\n  async set(key: string, value: any, ttlSeconds?: number): Promise {\n    const serialized = JSON.stringify(value);\n    console.log('💾 [Redis SET]', key);\n    if (ttlSeconds) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      await this.redis.set(key, serialized, 'EX', ttlSeconds);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      await this.redis.set(key, serialized);\n    }\n  }\n\n  async del(key: string): Promise {\n    console.log('🗑️ [Redis DEL]', key);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    await this.redis.del(key);\n  }\n\n  async exists(key: string): Promise {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    const result = await this.redis.exists(key);\n    return result === 1;\n  }\n\n  /**\n   * Met en cache le résultat d'une fonction async, ou le récupère si déjà présent.\n   */\n  async cacheable(\n    key: string,\n    ttlSeconds: number,\n    fetcher: () => Promise,\n  ): Promise {\n    const cached = await this.get(key);\n    if (cached !== null) return cached;\n\n    const data = await fetcher();\n    await this.set(key, data, ttlSeconds);\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenService.html":{"url":"injectables/RefreshTokenService.html","title":"injectable - RefreshTokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/refresh-token/refresh-token.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                rotate\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/refresh-token/refresh-token.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/refresh-token/refresh-token.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        rotate\n                        \n                    \n                \n            \n            \n                \n                        \n                    rotate(oldToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/refresh-token/refresh-token.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                oldToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/refresh-token/refresh-token.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PrismaService } from '../../prisma/prisma.service';\nimport { v4 as uuid } from 'uuid';\nimport { addDays } from 'date-fns';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class RefreshTokenService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly config: ConfigService,\n  ) {}\n\n  async create(userId: string): Promise {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call\n    const token = uuid();\n    const days = parseInt(\n      this.config.get('JWT_REFRESH_EXPIRES_DAYS', '7'),\n    );\n\n    await this.prisma.refreshToken.create({\n      data: {\n        userId,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        token,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call\n        expiresAt: addDays(new Date(), days),\n      },\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    return { token };\n  }\n\n  async validate(token: string): Promise {\n    const stored = await this.prisma.refreshToken.findUnique({\n      where: { token },\n    });\n\n    if (!stored || stored.revoked || stored.expiresAt  {\n    const existing = await this.prisma.refreshToken.findUnique({\n      where: { token: oldToken },\n    });\n\n    if (!existing || existing.revoked || existing.expiresAt \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RequestPasswordResetDto.html":{"url":"classes/RequestPasswordResetDto.html","title":"class - RequestPasswordResetDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RequestPasswordResetDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/request-password-reset.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/request-password-reset.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class RequestPasswordResetDto {\n  @ApiProperty({ example: 'user@example.com' })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/reset-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                code\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123456'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'NewSecurePassword123'})@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, MinLength, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ResetPasswordDto {\n  @ApiProperty({ example: 'user@example.com' })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({ example: '123456' })\n  @IsString()\n  @IsNotEmpty()\n  code: string;\n\n  @ApiProperty({ example: 'NewSecurePassword123' })\n  @IsString()\n  @MinLength(6)\n  newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/exception/response/response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            errors\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Response {\n  statusCode: number;\n  message: string;\n  data?: T;\n  errors?: string[];\n  timestamp?: string;\n  path?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseService.html":{"url":"injectables/ResponseService.html","title":"injectable - ResponseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/exception/response/response.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                badRequest\n                            \n                            \n                                conflict\n                            \n                            \n                                created\n                            \n                            \n                                error\n                            \n                            \n                                forbidden\n                            \n                            \n                                inactiveAccount\n                            \n                            \n                                internalError\n                            \n                            \n                                notFound\n                            \n                            \n                                success\n                            \n                            \n                                unauthorized\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        badRequest\n                        \n                    \n                \n            \n            \n                \nbadRequest(errors: string[], message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Requête invalide'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        conflict\n                        \n                    \n                \n            \n            \n                \nconflict(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Conflit détecté'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created\n                        \n                    \n                \n            \n            \n                \ncreated(data: T, message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:15\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Ressource créée avec succès'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Erreur interne du serveur'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forbidden\n                        \n                    \n                \n            \n            \n                \nforbidden(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Accès interdit'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inactiveAccount\n                        \n                    \n                \n            \n            \n                \ninactiveAccount(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        internalError\n                        \n                    \n                \n            \n            \n                \ninternalError(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Erreur interne du serveur'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notFound\n                        \n                    \n                \n            \n            \n                \nnotFound(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Ressource non trouvée'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n            \n                \nsuccess(data: T, message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:6\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Opération réussie'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unauthorized\n                        \n                    \n                \n            \n            \n                \nunauthorized(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Non autorisé'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Response } from './response.interface';\n\n@Injectable()\nexport class ResponseService {\n  success(data: T, message = 'Opération réussie'): Response {\n    return {\n      statusCode: 200,\n      message,\n      data,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  created(data: T, message = 'Ressource créée avec succès'): Response {\n    return {\n      statusCode: 201,\n      message,\n      data,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  badRequest(errors: string[], message = 'Requête invalide'): Response {\n    return {\n      statusCode: 400,\n      message,\n      errors,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  forbidden(message = 'Accès interdit'): Response {\n    return {\n      statusCode: 403,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  notFound(message = 'Ressource non trouvée'): Response {\n    return {\n      statusCode: 404,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  internalError(message = 'Erreur interne du serveur'): Response {\n    return {\n      statusCode: 500,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  conflict(message = 'Conflit détecté'): Response {\n    return {\n      statusCode: 409,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n\n\n  error(message = 'Erreur interne du serveur'): Response {\n    return {\n      statusCode: 500,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n  unauthorized(message = 'Non autorisé'): Response {\n    return {\n      statusCode: 401,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n  inactiveAccount(userId: string): Response {\n    return {\n      statusCode: 400,\n      message: 'Compte inactif',\n      errors: [\n        \"Votre compte n'est pas encore activé. Veuillez vérifier votre numéro de téléphone.\",\n      ],\n      data: {\n        user: {\n          id: userId,\n        },\n      },\n      timestamp: new Date().toISOString(),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmsModule.html":{"url":"modules/SmsModule.html","title":"module - SmsModule","body":"\n                   \n\n\n\n\n    Modules\n    SmsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SmsModule\n\n\n\ncluster_SmsModule_providers\n\n\n\n\nEvolutionApiService\n\nEvolutionApiService\n\n\n\nSmsModule\n\nSmsModule\n\nSmsModule -->\n\nEvolutionApiService->SmsModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nSmsModule -->\n\nRedisService->SmsModule\n\n\n\n\n\nTwilioService\n\nTwilioService\n\nSmsModule -->\n\nTwilioService->SmsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sms/sms.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EvolutionApiService\n                        \n                        \n                            RedisService\n                        \n                        \n                            TwilioService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TwilioService } from './twilio/twilio.service';\nimport { WhatsAppService } from './whatsapp/whatsapp.service';\nimport { EvolutionApiService } from './evolution-api/evolution-api.service';\nimport { SMS_SERVICE } from './sms.interface';\nimport { RedisService } from '../redis/redis.service';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [\n    {\n      provide: SMS_SERVICE,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      useClass: TwilioService,\n    },\n    RedisService,\n    TwilioService,\n    EvolutionApiService,\n  ],\n  exports: [SMS_SERVICE],\n})\nexport class SmsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SmsServiceInterface.html":{"url":"interfaces/SmsServiceInterface.html","title":"interface - SmsServiceInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SmsServiceInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/sms.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        sendOtp\n                                    \n                                \n                                \n                                    \n                                        verifyOtp\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendOtp\n                        \n                    \n                \n            \n            \n                \nsendOtp(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sms/sms.interface.ts:2\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \nverifyOtp(phone: string, code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sms/sms.interface.ts:3\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface SmsServiceInterface {\n  sendOtp(phone: string): Promise;\n  verifyOtp(phone: string, code: string): Promise;\n}\nexport const SMS_SERVICE = 'SmsServiceInterface';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                charge\n                            \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                            \n                                    Async\n                                getTransactionDetails\n                            \n                            \n                                    Async\n                                refund\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/payment/stripe/stripe.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        charge\n                        \n                    \n                \n            \n            \n                \n                        \n                    charge()\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/stripe/stripe.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCheckoutSession(amount: number, currency: string, successUrl: string, cancelUrl: string, metadata: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/stripe/stripe.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                successUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                cancelUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTransactionDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTransactionDetails(transactionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/stripe/stripe.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transactionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refund\n                        \n                    \n                \n            \n            \n                \n                        \n                    refund(transactionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/stripe/stripe.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transactionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(StripeService.name)\n                    \n                \n                    \n                        \n                                Defined in src/payment/stripe/stripe.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/payment/stripe/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport Stripe from 'stripe';\nimport { PaymentProcessor } from '../payment-processor.interface';\n\n@Injectable()\nexport class StripeService implements PaymentProcessor {\n  private readonly logger = new Logger(StripeService.name);\n  private stripe: Stripe;\n\n  constructor() {\n    if (!process.env.STRIPE_SECRET_KEY) {\n      throw new Error('STRIPE_SECRET_KEY is not defined');\n    }\n\n    this.stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n      apiVersion: '2025-04-30.basil',\n    });\n  }\n\n  async charge(): Promise {\n    throw new Error('charge method is disabled for Stripe Checkout');\n  }\n\n  async refund(transactionId: string): Promise {\n    try {\n      const refund = await this.stripe.refunds.create({\n        payment_intent: transactionId,\n      });\n      return refund.status === 'succeeded';\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      this.logger.error(`Refund failed: ${error.message}`);\n      return false;\n    }\n  }\n\n  async getTransactionDetails(\n    transactionId: string,\n  ): Promise {\n    return this.stripe.checkout.sessions.retrieve(transactionId);\n  }\n\n  async createCheckoutSession(\n    amount: number,\n    currency: string,\n    successUrl: string,\n    cancelUrl: string,\n    metadata: Record = {},\n  ): Promise {\n    const session = await this.stripe.checkout.sessions.create({\n      payment_method_types: ['card'],\n      line_items: [\n        {\n          price_data: {\n            currency,\n            unit_amount: Math.round(amount * 100),\n            product_data: { name: 'Paiement Rendez-vous' },\n          },\n          quantity: 1,\n        },\n      ],\n      mode: 'payment',\n      success_url: `${successUrl}?session_id={CHECKOUT_SESSION_ID}`,\n      cancel_url: cancelUrl,\n      metadata, // { userId: ..., appointmentIds: ... }\n    });\n\n    return {\n      sessionId: session.id,\n      url: session.url!,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TwilioService.html":{"url":"injectables/TwilioService.html","title":"injectable - TwilioService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TwilioService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/twilio/twilio.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                serviceSid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendOtp\n                            \n                            \n                                    Async\n                                verifyOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/sms/twilio/twilio.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendOtp(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sms/twilio/twilio.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOtp(phone: string, code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sms/twilio/twilio.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     twilio.Twilio\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/twilio/twilio.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        serviceSid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/twilio/twilio.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SmsServiceInterface } from '../sms.interface';\nimport twilio from 'twilio';\n\n@Injectable()\nexport class TwilioService implements SmsServiceInterface {\n  private client: twilio.Twilio;\n  private serviceSid: string;\n\n  constructor(private readonly config: ConfigService) {\n    const accountSid = this.config.get('TWILIO_ACCOUNT_SID');\n    const authToken = this.config.get('TWILIO_AUTH_TOKEN');\n    const serviceSid = this.config.get('TWILIO_SERVICE_SID');\n\n    if (!accountSid || !authToken || !serviceSid) {\n      throw new Error(\n        'Twilio configuration error: please check TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, and TWILIO_SERVICE_SID in your environment variables.',\n      );\n    }\n\n    this.serviceSid = serviceSid;\n    this.client = twilio(accountSid, authToken);\n  }\n\n  async sendOtp(phone: string) {\n    return this.client.verify.v2\n      .services(this.serviceSid)\n      .verifications.create({ to: phone, channel: 'sms' });\n  }\n\n  async verifyOtp(phone: string, code: string) {\n    return this.client.verify.v2\n      .services(this.serviceSid)\n      .verificationChecks.create({ to: phone, code });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UniqueConstraint.html":{"url":"injectables/UniqueConstraint.html","title":"injectable - UniqueConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UniqueConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/decorator/validators/unique.decorator.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/decorator/validators/unique.decorator.ts:15\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/decorator/validators/unique.decorator.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(value: any, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/decorator/validators/unique.decorator.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrismaService\n\n                    \n                \n                    \n                        \n                                Defined in src/common/decorator/validators/unique.decorator.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { PrismaService } from '../../../prisma/prisma.service';\nimport { Injectable } from '@nestjs/common';\nimport { getFromContainer } from 'class-validator';\n\n@Injectable()\n@ValidatorConstraint({ async: true })\nexport class UniqueConstraint implements ValidatorConstraintInterface {\n  private prisma: PrismaService;\n\n  constructor() {\n    this.prisma = getFromContainer(PrismaService); // ✅ injection manuelle\n  }\n\n  async validate(value: any, args: ValidationArguments): Promise {\n    const [modelName, fieldName] = args.constraints as [string, string];\n\n    if (!this.prisma[modelName]) {\n      console.error(`Model ${modelName} does not exist in PrismaService.`);\n      return false;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    const record = await this.prisma[modelName].findFirst({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      where: { [fieldName]: value },\n    });\n\n    return !record;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    const [, fieldName] = args.constraints as [string, string];\n    return `${fieldName} already exists`;\n  }\n}\n\nexport function Unique(\n  model: string,\n  field: string,\n  validationOptions?: ValidationOptions,\n) {\n  return function (object: any, propertyName: string) {\n    registerDecorator({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [model, field],\n      validator: UniqueConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAppointmentDto.html":{"url":"classes/UpdateAppointmentDto.html","title":"class - UpdateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/appointment/dto/update-appointment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                location\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                receiptNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                scheduledAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                titleNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                vehicleType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                vin\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123 Main St, City, State', description: 'Lieu du rendez-vous', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/update-appointment.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        receiptNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'REC123456', description: 'Numéro de reçu', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/update-appointment.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        scheduledAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2023-06-15T14:00:00', description: 'Date et heure du rendez-vous', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/update-appointment.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: AppointmentStatus, example: undefined, description: 'Statut du rendez-vous', required: false})@IsEnum(AppointmentStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/update-appointment.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        titleNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'ABC123456', description: 'Numéro du titre', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/update-appointment.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        vehicleType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'SUV', description: 'Type de véhicule', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/update-appointment.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        vin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '1HGCM82633A123456', description: 'Numéro d'identification du véhicule (VIN)', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/appointment/dto/update-appointment.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsEnum } from 'class-validator';\nimport { AppointmentStatus } from '@prisma/client';\n\nexport class UpdateAppointmentDto {\n  @ApiProperty({ example: '1HGCM82633A123456', description: 'Numéro d\\'identification du véhicule (VIN)', required: false })\n  @IsString()\n  @IsOptional()\n  vin?: string;\n\n  @ApiProperty({ example: 'SUV', description: 'Type de véhicule', required: false })\n  @IsString()\n  @IsOptional()\n  vehicleType?: string;\n\n  @ApiProperty({ example: 'ABC123456', description: 'Numéro du titre', required: false })\n  @IsString()\n  @IsOptional()\n  titleNumber?: string;\n\n  @ApiProperty({ example: 'REC123456', description: 'Numéro de reçu', required: false })\n  @IsString()\n  @IsOptional()\n  receiptNumber?: string;\n\n  @ApiProperty({ example: '2023-06-15T14:00:00', description: 'Date et heure du rendez-vous', required: false })\n  @IsString()\n  @IsOptional()\n  scheduledAt?: string;\n\n  @ApiProperty({ example: '123 Main St, City, State', description: 'Lieu du rendez-vous', required: false })\n  @IsString()\n  @IsOptional()\n  location?: string;\n\n  @ApiProperty({ enum: AppointmentStatus, example: AppointmentStatus.CONFIRMED, description: 'Statut du rendez-vous', required: false })\n  @IsEnum(AppointmentStatus)\n  @IsOptional()\n  status?: AppointmentStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDocumentDto.html":{"url":"classes/UpdateDocumentDto.html","title":"class - UpdateDocumentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDocumentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/document/dto/update-document.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DocumentType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: DocumentType, example: undefined, description: 'Nouveau type du document'})@IsNotEmpty()@IsEnum(DocumentType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/document/dto/update-document.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty } from 'class-validator';\nimport { DocumentType } from '@prisma/client';\n\nexport class UpdateDocumentDto {\n  @ApiProperty({\n    enum: DocumentType,\n    example: DocumentType.RECEIPT,\n    description: 'Nouveau type du document',\n  })\n  @IsNotEmpty()\n  @IsEnum(DocumentType)\n  type: DocumentType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePaymentModeDto.html":{"url":"classes/UpdatePaymentModeDto.html","title":"class - UpdatePaymentModeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePaymentModeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment-mode/dto/update-payment-mode.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePaymentModeDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePaymentModeDto } from './create-payment-mode.dto';\n\nexport class UpdatePaymentModeDto extends PartialType(CreatePaymentModeDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadModule.html":{"url":"modules/UploadModule.html","title":"module - UploadModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_exports\n\n\n\ncluster_UploadModule_providers\n\n\n\n\nUploadService \n\nUploadService \n\n\n\nUploadModule\n\nUploadModule\n\nUploadService  -->\n\nUploadModule->UploadService \n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nUploadModule -->\n\nCloudinaryService->UploadModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/upload/upload.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudinaryService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UploadService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // src/upload/upload.module.ts\nimport { Global, Module } from '@nestjs/common';\nimport { CloudinaryService } from './cloudinary/cloudinary.service';\n\n\n@Global()\n@Module({\n  providers: [\n    CloudinaryService,\n    {\n      provide: 'UploadService',\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      useClass: CloudinaryService,\n    },\n  ],\n  exports: ['UploadService'],\n})\nexport class UploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadService.html":{"url":"injectables/UploadService.html","title":"injectable - UploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/upload.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseDir\n                            \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Private\n                                    Async\n                                ensureDirectory\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                            \n                                uploadFile\n                            \n                            \n                                    Async\n                                uploadMultiple\n                            \n                            \n                                    Async\n                                uploadSingle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/upload/upload.service.ts:19\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(filePath: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filePath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        ensureDirectory\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureDirectory(folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(originalName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                originalName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadFile\n                        \n                    \n                \n            \n            \n                \nuploadFile(image: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadMultiple(files: Express.Multer.File[], folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'hotel-chambres'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadSingle\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadSingle(file: Express.Multer.File, folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'hotel-chambres'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseDir\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/upload/upload.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UploadService.name)\n                    \n                \n                    \n                        \n                                Defined in src/upload/upload.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\n\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as crypto from 'crypto';\nimport {\n  FileStorageService,\n  FileUploadResult,\n} from './interfaces/upload.interface';\n@Injectable()\nexport class UploadService implements FileStorageService {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  uploadFile(image: Express.Multer.File) {\n    throw new Error('Method not implemented.');\n  }\n  private logger = new Logger(UploadService.name);\n  private baseDir: string;\n\n  constructor() {\n    this.baseDir = process.env.UPLOAD_DIR || 'uploads';\n  }\n\n  private async ensureDirectory(folder: string): Promise {\n    const dirPath = path.join(this.baseDir, folder);\n    await fs.mkdir(dirPath, { recursive: true });\n    return dirPath;\n  }\n\n  private generateFileName(originalName: string): string {\n    const ext = path.extname(originalName);\n    const hash = crypto.randomBytes(8).toString('hex');\n    return `${hash}${ext}`;\n  }\n\n  async uploadSingle(\n    file: Express.Multer.File,\n    folder: string = 'hotel-chambres',\n  ): Promise {\n    const dirPath = await this.ensureDirectory(folder);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const fileName = this.generateFileName(file.originalname);\n    const filePath = path.join(dirPath, fileName);\n\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-member-access\n      await fs.writeFile(filePath, file.buffer);\n      const relativePath = path.join(folder, fileName);\n\n      return {\n        url: `/uploads/${relativePath}`,\n        id: relativePath,\n      };\n    } catch (error) {\n      this.logger.error(\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        `Erreur lors de l'enregistrement du fichier: ${error.message}`,\n      );\n      throw error;\n    }\n  }\n\n  async uploadMultiple(\n    files: Express.Multer.File[],\n    folder: string = 'hotel-chambres',\n  ): Promise {\n    if (!files?.length) return [];\n\n    try {\n      return await Promise.all(\n        files.map((file) => this.uploadSingle(file, folder)),\n      );\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      this.logger.error(`Échec de l'upload batch: ${error.nmessage}`);\n      throw error;\n    }\n  }\n  async deleteFile(filePath: string): Promise {\n    const fullPath = path.join(this.baseDir, filePath);\n    try {\n      await fs.unlink(fullPath);\n      this.logger.log(`🗑️ Fichier supprimé : ${filePath}`);\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (error) {\n      this.logger.warn(`⚠️ Impossible de supprimer le fichier : ${filePath}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                sendOtp\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                verifyOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new user'})@ApiResponse({status: 201, description: 'User created successfully.'})@ApiBody({type: CreateUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all users'})@ApiResponse({status: 200, description: 'List of users.'})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get a single user by ID'})@ApiResponse({status: 200, description: 'User found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Soft delete a user by ID'})@ApiResponse({status: 200, description: 'User soft-deleted.'})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        sendOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendOtp(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/send-otp')@ApiOperation({summary: 'Send OTP to user phone'})@ApiResponse({status: 200, description: 'OTP sent to user.'})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a user by ID'})@ApiResponse({status: 200, description: 'User updated.'})@ApiBody({type: UpdateUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOtp(dto: VerifyOtpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('verify-otp')@ApiOperation({summary: 'Verify OTP and activate phone'})@ApiResponse({status: 200, description: 'Phone verified.'})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            VerifyOtpDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Patch,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBody,\n} from '@nestjs/swagger';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { VerifyOtpDto } from './dto/verify-otp.dto';\nimport { Public } from '../common/decorator/public.decorator';\n\n@ApiTags('Users')\n@Public()\n@Controller('users')\nexport class UserController {\n  constructor(private readonly usersService: UserService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({ status: 201, description: 'User created successfully.' })\n  @ApiBody({ type: CreateUserDto })\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all users' })\n  @ApiResponse({ status: 200, description: 'List of users.' })\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a single user by ID' })\n  @ApiResponse({ status: 200, description: 'User found.' })\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a user by ID' })\n  @ApiResponse({ status: 200, description: 'User updated.' })\n  @ApiBody({ type: UpdateUserDto })\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Soft delete a user by ID' })\n  @ApiResponse({ status: 200, description: 'User soft-deleted.' })\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(id);\n  }\n\n  @Post(':id/send-otp')\n  @ApiOperation({ summary: 'Send OTP to user phone' })\n  @ApiResponse({ status: 200, description: 'OTP sent to user.' })\n  sendOtp(@Param('id') id: string) {\n    return this.usersService.sendPhoneVerificationOtp(id);\n  }\n\n  @Post('verify-otp')\n  @ApiOperation({ summary: 'Verify OTP and activate phone' })\n  @ApiResponse({ status: 200, description: 'Phone verified.' })\n  verifyOtp(@Body() dto: VerifyOtpDto) {\n    return this.usersService.verifyPhoneOtp(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nUserModule -->\n\nSmsModule->UserModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nUserModule -->\n\nRedisService->UserModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nUserModule -->\n\nResponseService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            SmsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport { RedisService } from '../redis/redis.service';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { SmsModule } from '../sms/sms.module'; // ✅ Ajout ici\n\n@Module({\n  imports: [PrismaModule, SmsModule], // ✅ Tu importes PrismaModule\n  controllers: [UserController],\n  providers: [UserService, RedisService, ResponseService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                sendPhoneVerificationOtp\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                verifyPhoneOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, redisService: RedisService, responseService: ResponseService, smsService: SmsServiceInterface)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        smsService\n                                                  \n                                                        \n                                                                        SmsServiceInterface\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendPhoneVerificationOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendPhoneVerificationOtp(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, data: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyPhoneOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyPhoneOtp(dto: VerifyOtpDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            VerifyOtpDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { RedisService } from '../redis/redis.service';\nimport { ResponseService } from '../validation/exception/response/response.service';\nimport * as bcrypt from 'bcrypt';\nimport { SMS_SERVICE, SmsServiceInterface } from '../sms/sms.interface';\nimport { VerifyOtpDto } from './dto/verify-otp.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly redisService: RedisService,\n    private readonly responseService: ResponseService,\n    @Inject(SMS_SERVICE)\n    private readonly smsService: SmsServiceInterface,\n  ) {}\n\n  async create(data: CreateUserDto) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n    const hashedPassword = await bcrypt.hash(data.password, 10);\n\n    const user = await this.prisma.user.create({\n      data: {\n        ...data,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        password: hashedPassword,\n        isPhoneVerified: false,\n      },\n    });\n\n    // Invalider le cache après création\n    await this.redisService.del('users:all');\n\n    return this.responseService.created(user, 'User created successfully.');\n  }\n\n  async findAll() {\n    return this.redisService.cacheable('users:all', 60, async () => {\n      const users = await this.prisma.user.findMany({\n        where: { deletedAt: null },\n      });\n      return this.responseService.success(users, 'List of users retrieved.');\n    });\n  }\n\n  async findOne(id: string) {\n    const user = await this.prisma.user.findFirst({\n      where: { id, deletedAt: null },\n    });\n\n    if (!user) {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw this.responseService.notFound('User not found.');\n    }\n\n    return this.responseService.success(user, 'User retrieved.');\n  }\n\n  async update(id: string, data: UpdateUserDto) {\n    if (data.password) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      data.password = await bcrypt.hash(data.password, 10);\n    }\n\n    const user = await this.prisma.user.update({\n      where: { id },\n      data,\n    });\n\n    // Invalider le cache après update\n    await this.redisService.del('users:all');\n\n    return this.responseService.success(user, 'User updated successfully.');\n  }\n\n  async remove(id: string) {\n    const user = await this.prisma.user.update({\n      where: { id },\n      data: { deletedAt: new Date() },\n    });\n\n    // Invalider le cache après suppression\n    await this.redisService.del('users:all');\n\n    return this.responseService.success(\n      user,\n      'User deleted (soft) successfully.',\n    );\n  }\n  async sendPhoneVerificationOtp(userId: string) {\n    const user = await this.prisma.user.findUnique({ where: { id: userId } });\n\n    if (!user) {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw this.responseService.notFound('User not found.');\n    }\n\n    await this.smsService.sendOtp(user.phone);\n    return this.responseService.success(null, 'OTP sent to phone.');\n  }\n\n  async verifyPhoneOtp(dto: VerifyOtpDto) {\n    const user = await this.prisma.user.findUnique({\n      where: { id: dto.userId },\n    });\n\n    if (!user) {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw this.responseService.notFound('User not found.');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const result = await this.smsService.verifyOtp(user.phone, dto.code);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (result.status === 'approved') {\n      await this.prisma.user.update({\n        where: { id: dto.userId },\n        data: { isPhoneVerified: true },\n      });\n      return this.responseService.success(null, 'Phone verified successfully.');\n    } else {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw this.responseService.badRequest(['Invalid OTP code.']);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ValidationModule.html":{"url":"modules/ValidationModule.html","title":"module - ValidationModule","body":"\n                   \n\n\n\n\n    Modules\n    ValidationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ValidationModule\n\n\n\ncluster_ValidationModule_providers\n\n\n\ncluster_ValidationModule_exports\n\n\n\n\nExceptionService \n\nExceptionService \n\n\n\nResponseService \n\nResponseService \n\n\n\nValidationService \n\nValidationService \n\n\n\nValidationModule\n\nValidationModule\n\nExceptionService  -->\n\nValidationModule->ExceptionService \n\n\n\nResponseService  -->\n\nValidationModule->ResponseService \n\n\n\nValidationService  -->\n\nValidationModule->ValidationService \n\n\n\n\n\nExceptionService\n\nExceptionService\n\nValidationModule -->\n\nExceptionService->ValidationModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nValidationModule -->\n\nPrismaService->ValidationModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nValidationModule -->\n\nResponseService->ValidationModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nValidationModule -->\n\nValidationService->ValidationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/validation/validation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExceptionService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExceptionService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Global } from '@nestjs/common';\nimport { ValidationService } from './validation.service';\nimport { ExceptionService } from './exception/exception.service';\nimport { ResponseService } from './exception/response/response.service';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Global()\n@Module({\n  providers: [\n    ValidationService,\n    ExceptionService,\n    ResponseService,\n    PrismaService,\n  ],\n  exports: [ValidationService, ExceptionService, ResponseService],\n})\nexport class ValidationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationService.html":{"url":"injectables/ValidationService.html","title":"injectable - ValidationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/validation.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ValidationPipe\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                options\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(exceptionService: ExceptionService)\n                    \n                \n                        \n                            \n                                Defined in src/validation/validation.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        exceptionService\n                                                  \n                                                        \n                                                                        ExceptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ValidationPipeOptions\n\n                    \n                \n                    \n                        \n                                Defined in src/validation/validation.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ValidationPipe, ValidationPipeOptions } from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport { ExceptionService } from './exception/exception.service';\n@Injectable()\nexport class ValidationService extends ValidationPipe {\n  // Make options accessible for testing\n  readonly options: ValidationPipeOptions;\n\n  constructor(private readonly exceptionService: ExceptionService) {\n    const options: ValidationPipeOptions = {\n      whitelist: true,\n      transform: true,\n      forbidNonWhitelisted: true,\n      validationError: {\n        target: false,\n        value: false,\n      },\n      transformOptions: {\n        enableImplicitConversion: true,\n      },\n      exceptionFactory: (errors: ValidationError[]) => {\n        return this.exceptionService.createValidationException(errors);\n      },\n    };\n    super(options);\n    this.options = options;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyOtpDto.html":{"url":"classes/VerifyOtpDto.html","title":"class - VerifyOtpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyOtpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/verify-otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                code\n                            \n                            \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The OTP code sent to the user's phone.', example: '123456', minLength: 4, maxLength: 10})@IsString()@Length(4, 10, {message: 'Code must be between 4 and 10 characters.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/verify-otp.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the user verifying the OTP.', example: 'a1b2c3d4-e5f6-7890-abcd-1234567890ef'})@IsString()@Exists('user', 'id', {message: 'User does not exist.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/verify-otp.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, Length } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Exists } from '../../common/decorator/validators/exists.decorator';\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: \"The OTP code sent to the user's phone.\",\n    example: '123456',\n    minLength: 4,\n    maxLength: 10,\n  })\n  @IsString()\n  @Length(4, 10, { message: 'Code must be between 4 and 10 characters.' })\n  code: string;\n\n  @ApiProperty({\n    description: 'The ID of the user verifying the OTP.',\n    example: 'a1b2c3d4-e5f6-7890-abcd-1234567890ef',\n  })\n  @IsString()\n  @Exists('user', 'id', { message: 'User does not exist.' })\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WhatsAppService.html":{"url":"injectables/WhatsAppService.html","title":"injectable - WhatsAppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WhatsAppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/whatsapp/whatsapp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                fromNumber\n                            \n                            \n                                    Private\n                                    Readonly\n                                OTP_EXPIRATION_TIME\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendOtp\n                            \n                            \n                                    Async\n                                verifyOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/sms/whatsapp/whatsapp.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendOtp(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sms/whatsapp/whatsapp.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOtp(phone: string, code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sms/whatsapp/whatsapp.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     twilio.Twilio\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/whatsapp/whatsapp.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fromNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/whatsapp/whatsapp.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        OTP_EXPIRATION_TIME\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 10 * 60\n                    \n                \n                    \n                        \n                                Defined in src/sms/whatsapp/whatsapp.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SmsServiceInterface } from '../sms.interface';\nimport twilio from 'twilio';\nimport { RedisService } from '../../redis/redis.service';\n\n@Injectable()\nexport class WhatsAppService implements SmsServiceInterface {\n  private client: twilio.Twilio;\n  private fromNumber: string;\n  private readonly OTP_EXPIRATION_TIME = 10 * 60; // 10 minutes in seconds\n\n  constructor(\n    private readonly config: ConfigService,\n    private readonly redisService: RedisService,\n  ) {\n    const accountSid = this.config.get('TWILIO_ACCOUNT_SID');\n    const authToken = this.config.get('TWILIO_AUTH_TOKEN');\n    const fromNumber = this.config.get('WHATSAPP_FROM_NUMBER');\n\n    if (!accountSid || !authToken || !fromNumber) {\n      throw new Error(\n        'WhatsApp configuration error: please check TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, and WHATSAPP_FROM_NUMBER in your environment variables.',\n      );\n    }\n\n    this.fromNumber = fromNumber;\n    this.client = twilio(accountSid, authToken);\n  }\n\n  async sendOtp(phone: string): Promise {\n    // Generate a random 6-digit code\n    const code = Math.floor(100000 + Math.random() * 900000).toString();\n\n    // Store the code in Redis with expiration\n    const redisKey = `otp:${phone}`;\n    await this.redisService.set(redisKey, code, this.OTP_EXPIRATION_TIME);\n\n    // Check if the phone number is the same as the fromNumber\n    if (phone === this.fromNumber) {\n      console.log(`Cannot send WhatsApp message to the same number as the sender (${phone}). Code stored in Redis.`);\n      // Return a mock successful response without actually sending the message\n      return {\n        sid: 'MOCK_SID',\n        status: 'delivered',\n        body: `Your verification code is: ${code}`,\n      };\n    }\n\n    // Send the code via WhatsApp\n    return this.client.messages.create({\n      body: `Your verification code is: ${code}`,\n      from: `whatsapp:${this.fromNumber}`,\n      to: `whatsapp:${phone}`\n    });\n  }\n\n  async verifyOtp(phone: string, code: string): Promise {\n    const redisKey = `otp:${phone}`;\n    const storedCode = await this.redisService.get(redisKey);\n\n    // Check if the code matches the stored code\n    if (storedCode && storedCode === code) {\n      // Clear the code after successful verification\n      await this.redisService.del(redisKey);\n      return { status: 'approved' };\n    }\n\n    return { status: 'rejected' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/appointment/appointment.controller.ts\n            \n            controller\n            AppointmentController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/appointment/appointment.service.ts\n            \n            injectable\n            AppointmentService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/appointment/dto/create-appointment.dto.ts\n            \n            class\n            CreateAppointmentDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/appointment/dto/create-guest-appointment.dto.ts\n            \n            class\n            CreateGuestAppointmentDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/appointment/dto/param-appointment-id.dto.ts\n            \n            class\n            ParamAppointmentIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/appointment/dto/param-user-id.dto.ts\n            \n            class\n            ParamUserIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/appointment/dto/update-appointment.dto.ts\n            \n            class\n            UpdateAppointmentDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/blacklist-token/blacklist-token.service.ts\n            \n            injectable\n            BlacklistTokenService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/request-password-reset.dto.ts\n            \n            class\n            RequestPasswordResetDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt-strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/optional-jwt-auth/optional-jwt-auth.guard.ts\n            \n            injectable\n            OptionalJwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/refresh-token/refresh-token.service.ts\n            \n            injectable\n            RefreshTokenService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/cache/cache.service.ts\n            \n            injectable\n            CacheService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/common/decorator/cache/cache-evict.decorator.ts\n            \n            interface\n            CacheEvictOptions\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/common/decorator/cache/cache-evict.decorator.ts\n            \n            variable\n            CACHE_EVICT_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorator/cache/cache-evict.decorator.ts\n            \n            variable\n            CacheEvict\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorator/cache/cache-prefix.decorator.ts\n            \n            variable\n            CACHE_PREFIX_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorator/cache/cache-prefix.decorator.ts\n            \n            variable\n            CachePrefix\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/cache/cacheable.decorator.ts\n            \n            interface\n            CacheableOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/decorator/cache/cacheable.decorator.ts\n            \n            variable\n            Cacheable\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorator/cache/cacheable.decorator.ts\n            \n            variable\n            CACHEABLE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorator/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorator/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/validators/exists.decorator.ts\n            \n            injectable\n            ExistsConstraint\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/common/decorator/validators/exists.decorator.ts\n            \n            function\n            Exists\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/validators/unique.decorator.ts\n            \n            injectable\n            UniqueConstraint\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/common/decorator/validators/unique.decorator.ts\n            \n            function\n            Unique\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/interceptor/cache.interceptor.ts\n            \n            injectable\n            CacheInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/document/document.controller.ts\n            \n            controller\n            DocumentController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/document/document.controller.ts\n            \n            interface\n            AuthenticatedRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/document/document.service.ts\n            \n            injectable\n            DocumentService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/document/dto/create-document.dto.ts\n            \n            class\n            CreateDocumentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/document/dto/document-response.dto.ts\n            \n            class\n            DocumentResponseDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/document/dto/param-document-id.dto.ts\n            \n            class\n            ParamDocumentIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/document/dto/param-user-id.dto.ts\n            \n            class\n            ParamUserIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/document/dto/update-document.dto.ts\n            \n            class\n            UpdateDocumentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/firebase/firebase-admin/firebase-admin.service.ts\n            \n            injectable\n            FirebaseAdminService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/payment-mode/dto/create-payment-mode.dto.ts\n            \n            class\n            CreatePaymentModeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/payment-mode/dto/update-payment-mode.dto.ts\n            \n            class\n            UpdatePaymentModeDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/payment-mode/payment-mode.controller.ts\n            \n            controller\n            PaymentModeController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/payment-mode/payment-mode.service.ts\n            \n            injectable\n            PaymentModeService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/payment/dto/create-payment.dto.ts\n            \n            class\n            CreatePaymentDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/payment/payment-processor.factory.ts\n            \n            injectable\n            PaymentProcessorFactory\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/payment/payment-processor.interface.ts\n            \n            interface\n            PaymentProcessor\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/payment/payment.controller.ts\n            \n            controller\n            PaymentController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/payment/payment.service.ts\n            \n            injectable\n            PaymentService\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/payment/stripe/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/redis/redis.service.ts\n            \n            injectable\n            RedisService\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/sms/evolution-api/evolution-api.service.ts\n            \n            injectable\n            EvolutionApiService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/sms/sms.interface.ts\n            \n            interface\n            SmsServiceInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/sms/sms.interface.ts\n            \n            variable\n            SMS_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sms/twilio/twilio.service.ts\n            \n            injectable\n            TwilioService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/sms/whatsapp/whatsapp.service.ts\n            \n            injectable\n            WhatsAppService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/test/mocks/blacklist-token.mock.ts\n            \n            variable\n            createMockBlacklistTokenService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/mocks/prisma.mock.ts\n            \n            variable\n            createMockPrismaService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/mocks/response.mock.ts\n            \n            variable\n            createMockResponseService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/upload/cloudinary/cloudinary.service.ts\n            \n            injectable\n            CloudinaryService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/upload/interfaces/upload.interface.ts\n            \n            interface\n            FileStorageService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/upload/interfaces/upload.interface.ts\n            \n            interface\n            FileUploadResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/upload/interfaces/upload.interface.ts\n            \n            variable\n            DATABASE_CONNECTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/upload/upload.service.ts\n            \n            injectable\n            UploadService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/verify-otp.dto.ts\n            \n            class\n            VerifyOtpDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/validation/exception/exception.service.ts\n            \n            injectable\n            ExceptionService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/validation/exception/response/response.interface.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/validation/exception/response/response.service.ts\n            \n            injectable\n            ResponseService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/validation/validation.service.ts\n            \n            injectable\n            ValidationService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/ioredis : ^2.0.2\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.0\n        \n            @nestjs/platform-socket.io : ^11.1.0\n        \n            @nestjs/swagger : ^11.1.5\n        \n            @nestjs/websockets : ^11.1.0\n        \n            @prisma/client : ^6.6.0\n        \n            axios : ^1.6.7\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cloudinary : ^2.6.0\n        \n            date-fns : ^4.1.0\n        \n            firebase-admin : ^13.3.0\n        \n            ioredis : ^5.6.1\n        \n            multer : ^1.4.5-lts.2\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            stripe : ^18.1.0\n        \n            twilio : ^5.5.2\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            Exists   (src/.../exists.decorator.ts)\n                        \n                        \n                            Unique   (src/.../unique.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/decorator/validators/exists.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Exists\n                        \n                    \n                \n            \n            \n                \nExists(model: string, field: string, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                model\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/common/decorator/validators/unique.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Unique\n                        \n                    \n                \n            \n            \n                \nUnique(model: string, field: string, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                model\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nSalvage Inspection Backend\nDescription\nThe Salvage Inspection Backend is a comprehensive API service built with NestJS that manages vehicle salvage inspections. This system allows users to register, upload vehicle-related documents, schedule inspection appointments, make payments, and communicate with administrators.\nKey Features\n\nUser authentication and authorization with JWT\nDocument upload and management\nAppointment scheduling for vehicle inspections\nPayment processing with Stripe\nWhatsApp notifications with Evolution API\nReal-time caching with Redis\nComprehensive API documentation with Swagger\n\nArchitecture\nThe application follows a modular architecture based on NestJS best practices:\nCore Modules\n\nConfigModule: Manages environment variables and application configuration\nPrismaModule: Handles database operations using Prisma ORM\nRedisModule: Provides caching capabilities using Redis\nValidationModule: Handles input validation and error responses\n\nFeature Modules\n\nUserModule: Manages user registration, profiles, and authentication\nAuthModule: Handles JWT authentication, token management, and authorization\nDocumentModule: Manages document uploads and storage using Cloudinary\nAppointmentModule: Handles scheduling and management of inspection appointments\nPaymentModule: Processes payments using Stripe\nSmsModule: Sends WhatsApp notifications using Evolution API\nUploadModule: Handles file uploads and storage\n\nData Model\nThe application uses PostgreSQL with Prisma ORM and includes the following main entities:\n\nUser: Stores user information and authentication details\nDocument: Manages vehicle-related documents (licenses, titles, receipts)\nAppointment: Tracks inspection appointments with vehicle details\nPayment: Records payment transactions for appointments\nPaymentMode: Defines available payment methods\nMessage: Stores communication between users and administrators\n\nAPI Endpoints\nAuthentication\n\nPOST /auth/login: Authenticate a user and get JWT tokens\nPOST /auth/logout: Invalidate the current JWT token\nPOST /auth/refresh: Get a new JWT token using a refresh token\nPOST /auth/request-password-reset: Request a password reset code (sent via WhatsApp)\nPOST /auth/reset-password: Reset password using the verification code\n\nPassword Reset Flow\n\nUser requests a password reset by sending their email to /auth/request-password-reset\nSystem sends a verification code to the user's WhatsApp\nUser submits the verification code, old password, and new password to /auth/reset-password\nSystem verifies the code and old password, then updates the password\n\nWhatsApp Integration\nThe application uses Evolution API to send verification codes for password reset. This integration requires:\n\nA self-hosted Evolution API server or access to a hosted instance\nA WhatsApp account connected to Evolution API\nProper configuration in the .env file (EVOLUTION_API_BASE_URL, EVOLUTION_API_INSTANCE, EVOLUTION_API_KEY, WHATSAPP_FROM_NUMBER)\n\nAbout Evolution API\nEvolution API is an open-source REST API for WhatsApp that allows you to send and receive messages without using the official WhatsApp Business API. It provides:\n\nMessage sending and receiving\nMedia handling (images, documents, etc.)\nGroup management\nStatus updates\nQR code authentication\n\nBeing open-source and self-hosted, Evolution API can be a cost-effective alternative to commercial WhatsApp API providers.\nDependencies\nCore Dependencies\n\nNestJS (@nestjs/*): Framework for building server-side applications\nPrisma (@prisma/client): ORM for database access\nRedis (@nestjs-modules/ioredis): In-memory data store for caching\nJWT (@nestjs/jwt): JSON Web Token implementation for authentication\nPassport (@nestjs/passport): Authentication middleware\nSwagger (@nestjs/swagger): API documentation\n\nExternal Services\n\nStripe (stripe): Payment processing\nEvolution API (axios): WhatsApp messaging\nCloudinary (cloudinary): Cloud-based image and file management\n\nUtilities\n\nbcrypt: Password hashing\nclass-validator & class-transformer: Input validation and transformation\ndate-fns: Date manipulation\nuuid: Unique identifier generation\n\nProject Setup\nPrerequisites\n\nNode.js (v16+)\nnpm or yarn\nPostgreSQL\nRedis\n\nInstallation\nExample :# Install dependencies\n$ npm install\n\n# Set up environment variables\n$ cp .env.example .env\n# Edit .env with your configuration\n\n# Run database migrations\n$ npx prisma migrate devRunning the Application\nExample :# Development mode\n$ npm run start:dev\n\n# Production mode\n$ npm run start:prodTesting\nExample :# Unit tests\n$ npm run test\n\n# E2E tests\n$ npm run test:e2e\n\n# Test coverage\n$ npm run test:covDocker Setup\nThe application is containerized using Docker and Docker Compose for easy deployment and development.\nDocker Architecture\nThe Docker setup consists of three main services:\n\napp: The NestJS application container\npostgres: PostgreSQL database container\nredis: Redis cache container\n\nAll services are configured with appropriate environment variables and persistent volumes for data storage.\nPrerequisites\n\nDocker\nDocker Compose\n\nEnvironment Variables\nCopy the example environment file and update it with your own values:\nExample :$ cp .env.example .envRequired environment variables include:\n\nDatabase connection details\nRedis connection details\nJWT configuration\nEvolution API configuration\nCloudinary API credentials\nStripe API keys\n\nRunning with Docker Compose\nTo start the application and its dependencies:\nExample :$ docker-compose up -dThis will start three containers:\n\nThe NestJS application (accessible at http://localhost:3000)\nPostgreSQL database\nRedis cache\n\nTo stop the containers:\nExample :$ docker-compose downTo view logs:\nExample :$ docker-compose logs -f appBuilding the Docker Image\nIf you want to build the Docker image separately:\nExample :$ docker build -t salvage-inspection-backend .Testing the Docker Setup\nA test script is provided to verify that the Docker setup works correctly:\nExample :$ chmod +x test-docker.sh  # Make the script executable (if not already)\n$ ./test-docker.shThis script will:\n\nBuild the Docker image\nStart the containers with Docker Compose\nCheck if the application is running correctly\nStop the containers\n\nAPI Documentation\nThe API is documented using Swagger, which provides an interactive interface to explore and test the endpoints.\nAccessing Swagger Documentation\nWhen the application is running, you can access the Swagger documentation at:\nExample :http://localhost:3000/apiThe Swagger UI provides:\n\nA list of all available endpoints\nRequest and response schemas\nAuthentication requirements\nThe ability to test endpoints directly from the browser\n\nAuthentication\nThe API uses JWT (JSON Web Token) for authentication. To access protected endpoints:\n\nRegister or login to obtain a JWT token\nInclude the token in the Authorization header of your requests:Example :Authorization: Bearer \n\nDevelopment Guidelines\nCode Structure\n\nControllers: Handle HTTP requests and define API endpoints\nServices: Contain business logic and interact with the database\nDTOs: Define data transfer objects for request/response validation\nEntities: Map to database models\nModules: Group related functionality\n\nAdding New Features\n\nCreate a new module: nest generate module feature-name\nCreate a controller: nest generate controller feature-name\nCreate a service: nest generate service feature-name\nDefine DTOs and entities\nImplement business logic in the service\nExpose endpoints in the controller\nAdd the module to AppModule imports\n\nDeployment\nThe application can be deployed to any environment that supports Docker containers. For production deployments, consider:\n\nSetting up a CI/CD pipeline\nUsing container orchestration (Kubernetes, AWS ECS)\nImplementing proper monitoring and logging\nSetting up database backups\nConfiguring HTTPS\n\nResources\n\nNestJS Documentation\nPrisma Documentation\nDocker Documentation\nStripe API Documentation\nEvolution API Documentation\nCloudinary Documentation\n\nLicense\nThis project is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppointmentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CacheModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DocumentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ValidationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CacheModule\n\n\n\ncluster_CacheModule_exports\n\n\n\ncluster_CacheModule_providers\n\n\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_exports\n\n\n\ncluster_PaymentModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_SmsModule\n\n\n\ncluster_SmsModule_providers\n\n\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_exports\n\n\n\ncluster_UploadModule_providers\n\n\n\ncluster_ValidationModule\n\n\n\ncluster_ValidationModule_exports\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAppointmentService \n\nAppointmentService \n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nDocumentModule\n\nDocumentModule\n\nAppModule -->\n\nDocumentModule->AppModule\n\n\n\n\n\nPaymentModeModule\n\nPaymentModeModule\n\nAppModule -->\n\nPaymentModeModule->AppModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nPaymentService \n\nPaymentService \n\nPaymentService  -->\n\nPaymentModule->PaymentService \n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppointmentModule -->\n\nPrismaModule->AppointmentModule\n\n\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nPaymentModeModule -->\n\nPrismaModule->PaymentModeModule\n\n\n\nPaymentModule -->\n\nPrismaModule->PaymentModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nCacheModule\n\nCacheModule\n\nCacheModule -->\n\nRedisModule->CacheModule\n\n\n\n\n\nRedisService \n\nRedisService \n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAuthModule -->\n\nSmsModule->AuthModule\n\n\n\nUserModule -->\n\nSmsModule->UserModule\n\n\n\nAppModule -->\n\nSmsModule->AppModule\n\n\n\n\n\nUploadModule\n\nUploadModule\n\nDocumentModule -->\n\nUploadModule->DocumentModule\n\n\n\nAppModule -->\n\nUploadModule->AppModule\n\n\n\n\n\nUploadService \n\nUploadService \n\nUploadService  -->\n\nUploadModule->UploadService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nValidationModule\n\nValidationModule\n\nAppModule -->\n\nValidationModule->AppModule\n\n\n\n\n\nExceptionService \n\nExceptionService \n\nExceptionService  -->\n\nValidationModule->ExceptionService \n\n\n\n\n\nResponseService \n\nResponseService \n\nResponseService  -->\n\nValidationModule->ResponseService \n\n\n\n\n\nValidationService \n\nValidationService \n\nValidationService  -->\n\nValidationModule->ValidationService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\nAppModule -->\n\nAppointmentService->AppModule\n\n\n\n\n\nDocumentService\n\nDocumentService\n\nDocumentModule -->\n\nDocumentService->DocumentModule\n\n\n\nAppModule -->\n\nDocumentService->AppModule\n\n\n\n\n\nExceptionService\n\nExceptionService\n\nValidationModule -->\n\nExceptionService->ValidationModule\n\n\n\nAppModule -->\n\nExceptionService->AppModule\n\n\n\n\n\nFirebaseAdminService\n\nFirebaseAdminService\n\nAppModule -->\n\nFirebaseAdminService->AppModule\n\n\n\n\n\nPaymentModeService\n\nPaymentModeService\n\nPaymentModeModule -->\n\nPaymentModeService->PaymentModeModule\n\n\n\nAppModule -->\n\nPaymentModeService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nDocumentModule -->\n\nPrismaService->DocumentModule\n\n\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\nValidationModule -->\n\nPrismaService->ValidationModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\nSmsModule -->\n\nRedisService->SmsModule\n\n\n\nUserModule -->\n\nRedisService->UserModule\n\n\n\nAppModule -->\n\nRedisService->AppModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nAppointmentModule -->\n\nResponseService->AppointmentModule\n\n\n\nAuthModule -->\n\nResponseService->AuthModule\n\n\n\nDocumentModule -->\n\nResponseService->DocumentModule\n\n\n\nPaymentModeModule -->\n\nResponseService->PaymentModeModule\n\n\n\nPaymentModule -->\n\nResponseService->PaymentModule\n\n\n\nUserModule -->\n\nResponseService->UserModule\n\n\n\nValidationModule -->\n\nResponseService->ValidationModule\n\n\n\nAppModule -->\n\nResponseService->AppModule\n\n\n\n\n\nTwilioService\n\nTwilioService\n\nSmsModule -->\n\nTwilioService->SmsModule\n\n\n\nAppModule -->\n\nTwilioService->AppModule\n\n\n\n\n\nUploadService\n\nUploadService\n\nAppModule -->\n\nUploadService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nValidationModule -->\n\nValidationService->ValidationModule\n\n\n\nAppModule -->\n\nValidationService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nBlacklistTokenService\n\nBlacklistTokenService\n\nAuthModule -->\n\nBlacklistTokenService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRefreshTokenService\n\nRefreshTokenService\n\nAuthModule -->\n\nRefreshTokenService->AuthModule\n\n\n\n\n\nCacheService \n\nCacheService \n\nCacheService  -->\n\nCacheModule->CacheService \n\n\n\n\n\nCacheService\n\nCacheService\n\nCacheModule -->\n\nCacheService->CacheModule\n\n\n\n\n\nPaymentProcessorFactory\n\nPaymentProcessorFactory\n\nPaymentModule -->\n\nPaymentProcessorFactory->PaymentModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nPaymentModule -->\n\nStripeService->PaymentModule\n\n\n\n\n\nEvolutionApiService\n\nEvolutionApiService\n\nSmsModule -->\n\nEvolutionApiService->SmsModule\n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nUploadModule -->\n\nCloudinaryService->UploadModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        13 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    29 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    19 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CACHE_EVICT_KEY   (src/.../cache-evict.decorator.ts)\n                        \n                        \n                            CACHE_PREFIX_KEY   (src/.../cache-prefix.decorator.ts)\n                        \n                        \n                            Cacheable   (src/.../cacheable.decorator.ts)\n                        \n                        \n                            CACHEABLE_KEY   (src/.../cacheable.decorator.ts)\n                        \n                        \n                            CacheEvict   (src/.../cache-evict.decorator.ts)\n                        \n                        \n                            CachePrefix   (src/.../cache-prefix.decorator.ts)\n                        \n                        \n                            createMockBlacklistTokenService   (src/.../blacklist-token.mock.ts)\n                        \n                        \n                            createMockPrismaService   (src/.../prisma.mock.ts)\n                        \n                        \n                            createMockResponseService   (src/.../response.mock.ts)\n                        \n                        \n                            DATABASE_CONNECTION   (src/.../upload.interface.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            SMS_SERVICE   (src/.../sms.interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorator/cache/cache-evict.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CACHE_EVICT_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CACHE_EVICT_METADATA'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CacheEvict\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (options: CacheEvictOptions) =>\n  SetMetadata(CACHE_EVICT_KEY, options)\n                    \n                \n\n\n        \n    \n\n    src/common/decorator/cache/cache-prefix.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CACHE_PREFIX_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CACHE_PREFIX_METADATA'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CachePrefix\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (prefix: string) =>\n  SetMetadata(CACHE_PREFIX_KEY, prefix)\n                    \n                \n\n\n        \n    \n\n    src/common/decorator/cache/cacheable.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Cacheable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (options: CacheableOptions) =>\n  SetMetadata(CACHEABLE_KEY, options)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CACHEABLE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CACHEABLE_METADATA'\n                    \n                \n\n\n        \n    \n\n    src/test/mocks/blacklist-token.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createMockBlacklistTokenService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {\n  return {\n    blacklist: jest.fn().mockImplementation(async (token: string, expiresAt: Date) => {\n      return Promise.resolve();\n    }),\n    \n    isBlacklisted: jest.fn().mockImplementation(async (token: string) => {\n      return Promise.resolve(false);\n    }),\n  } as unknown as BlacklistTokenService;\n}\n                    \n                \n\n\n        \n    \n\n    src/test/mocks/prisma.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createMockPrismaService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {\n  return {\n    // Add mock implementations for any Prisma models used in tests\n    user: {\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      findMany: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n      count: jest.fn(),\n    },\n    refreshToken: {\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      findMany: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n      deleteMany: jest.fn(),\n    },\n    blacklistedToken: {\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      create: jest.fn(),\n      delete: jest.fn(),\n    },\n    paymentMode: {\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      findMany: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    payment: {\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      findMany: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    appointment: {\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      findMany: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    document: {\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      findMany: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    // Add transaction mock\n    $transaction: jest.fn((callback) => callback()),\n    // Add connect/disconnect mocks\n    $connect: jest.fn(),\n    $disconnect: jest.fn(),\n  } as unknown as PrismaService;\n}\n                    \n                \n\n\n        \n    \n\n    src/test/mocks/response.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createMockResponseService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {\n  return {\n    success: jest.fn().mockImplementation((data, message = 'Opération réussie') => ({\n      statusCode: 200,\n      message,\n      data,\n      timestamp: expect.any(String),\n    })),\n    \n    created: jest.fn().mockImplementation((data, message = 'Ressource créée avec succès') => ({\n      statusCode: 201,\n      message,\n      data,\n      timestamp: expect.any(String),\n    })),\n    \n    badRequest: jest.fn().mockImplementation((errors, message = 'Requête invalide') => ({\n      statusCode: 400,\n      message,\n      errors,\n      timestamp: expect.any(String),\n    })),\n    \n    forbidden: jest.fn().mockImplementation((message = 'Accès interdit') => ({\n      statusCode: 403,\n      message,\n      timestamp: expect.any(String),\n    })),\n    \n    notFound: jest.fn().mockImplementation((message = 'Ressource non trouvée') => ({\n      statusCode: 404,\n      message,\n      timestamp: expect.any(String),\n    })),\n    \n    internalError: jest.fn().mockImplementation((message = 'Erreur interne du serveur') => ({\n      statusCode: 500,\n      message,\n      timestamp: expect.any(String),\n    })),\n    \n    conflict: jest.fn().mockImplementation((message = 'Conflit détecté') => ({\n      statusCode: 409,\n      message,\n      timestamp: expect.any(String),\n    })),\n    \n    error: jest.fn().mockImplementation((message = 'Erreur interne du serveur') => ({\n      statusCode: 500,\n      message,\n      timestamp: expect.any(String),\n    })),\n    \n    unauthorized: jest.fn().mockImplementation((message = 'Non autorisé') => ({\n      statusCode: 401,\n      message,\n      timestamp: expect.any(String),\n    })),\n    \n    inactiveAccount: jest.fn().mockImplementation((userId) => ({\n      statusCode: 400,\n      message: 'Compte inactif',\n      errors: [\n        \"Votre compte n'est pas encore activé. Veuillez vérifier votre numéro de téléphone.\",\n      ],\n      data: {\n        user: {\n          id: userId,\n        },\n      },\n      timestamp: expect.any(String),\n    })),\n  } as unknown as ResponseService;\n}\n                    \n                \n\n\n        \n    \n\n    src/upload/interfaces/upload.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DATABASE_CONNECTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'UPLOAD'\n                    \n                \n\n\n        \n    \n\n    src/common/decorator/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/sms/sms.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SMS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SmsServiceInterface'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
